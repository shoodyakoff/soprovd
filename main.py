"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª Telegram-–±–æ—Ç–∞ –°–æ–ø—Ä–æ–≤–æ–¥ v6.0
–ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –µ–¥–∏–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ smart_analyzer_v6
"""
import logging
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    CallbackQueryHandler,
    ConversationHandler,
    filters
)

from config import TELEGRAM_BOT_TOKEN

from handlers.simple_conversation_v6 import get_conversation_handler, get_command_handlers

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(),  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        logging.FileHandler('bot.log', encoding='utf-8')  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
    ]
)
logger = logging.getLogger(__name__)

async def check_ai_api():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É AI API –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (OpenAI –∏–ª–∏ Claude)
    """
    from services.ai_factory import get_ai_service, AIFactory
    
    ai_service = get_ai_service()
    provider_name = AIFactory.get_provider_name()
    
    is_working = await ai_service.test_api_connection()
    if not is_working:
        logger.error(f"‚ùå {provider_name} API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")
        logger.error("–ë–æ—Ç –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω, –Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∏—Å–µ–º –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å.")
    else:
        logger.info(f"‚úÖ {provider_name} API —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
    
    return is_working

async def post_init(application):
    """
    –§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    from services.ai_factory import AIFactory
    provider_name = AIFactory.get_provider_name()
    logger.info(f"–ü—Ä–æ–≤–µ—Ä—è—é {provider_name} API...")
    await check_ai_api()

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ v6.0 - –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –¥–ª—è –°—Ç–∞—Å–∞!
    """
    if not TELEGRAM_BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).post_init(post_init).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ù–û–í–´–ô v6.0 handler - —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞!
    v6_handler = get_conversation_handler()
    application.add_handler(v6_handler)
    logger.info("üöÄ –°—Ç–∞—Å, v6.0 ConversationHandler –¥–æ–±–∞–≤–ª–µ–Ω - –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê!")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã help, about, support
    command_handlers = get_command_handlers()
    for handler in command_handlers:
        application.add_handler(handler)
    logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã help, about, support –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    
    # –°—Ç–∞—Ä—ã–π help handler —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∏–∑ handlers
    
    logger.info("üöÄ –°—Ç–∞—Å, –±–æ—Ç –°–æ–ø—Ä–æ–≤–æ–¥ v6.0 –∑–∞–ø—É—â–µ–Ω! –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: smart_analyzer_v6 + UNIFIED_ANALYSIS_PROMPT!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=["message", "callback_query"])

if __name__ == "__main__":
    main() 