"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª Telegram-–±–æ—Ç–∞ LetterGenius
"""
import logging
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    CallbackQueryHandler,
    ConversationHandler,
    filters
)

from config import (
    TELEGRAM_BOT_TOKEN,
    CHOOSING_MODE,
    WAITING_JOB_DESCRIPTION,
    WAITING_RESUME,
    WAITING_STYLE_CHOICE
)

from handlers.start import start
from handlers.conversation import (
    handle_job_description,
    handle_resume,
    handle_text_in_style_choice,
    cancel
)
from handlers.callback import handle_style_callback, handle_mode_choice
from handlers.personalized_conversation import (
    start_personalized,
    receive_job_description,
    receive_resume,
    handle_style_choice,
    cancel_personalized,
    WAITING_JOB_DESCRIPTION as PERS_WAITING_JOB,
    WAITING_RESUME as PERS_WAITING_RESUME,
    WAITING_STYLE_CONFIRMATION as PERS_WAITING_STYLE
)
from handlers.v3_conversation import get_v3_conversation_handler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(),  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        logging.FileHandler('bot.log', encoding='utf-8')  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
    ]
)
logger = logging.getLogger(__name__)

async def check_openai_api():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É OpenAI API –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    """
    from services.openai_service import OpenAIService
    openai_service = OpenAIService()
    
    is_working = await openai_service.test_api_connection()
    if not is_working:
        logger.error("‚ùå OpenAI API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")
        logger.error("–ë–æ—Ç –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω, –Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∏—Å–µ–º –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å.")
    
    return is_working

async def post_init(application):
    """
    –§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    logger.info("–ü—Ä–æ–≤–µ—Ä—è—é OpenAI API...")
    await check_openai_api()

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    """
    if not TELEGRAM_BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).post_init(post_init).build()
    
    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π ConversationHandler –¥–ª—è –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–æ–≤
    conversation_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING_MODE: [
                CallbackQueryHandler(handle_mode_choice, pattern="^mode_(classic|personalized|v3)$")
            ],
            WAITING_JOB_DESCRIPTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_job_description)
            ],
            WAITING_RESUME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_resume)
            ],
            WAITING_STYLE_CHOICE: [
                CallbackQueryHandler(handle_style_callback, pattern="^style_"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_in_style_choice)
            ],
            # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            PERS_WAITING_JOB: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_job_description)
            ],
            PERS_WAITING_RESUME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_resume)
            ],
            PERS_WAITING_STYLE: [
                CallbackQueryHandler(handle_style_choice, pattern="^style_")
            ]
        },
        fallbacks=[
            CommandHandler("cancel", cancel),
            CommandHandler("start", start)  # –ü–æ–∑–≤–æ–ª—è–µ–º –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç
        ],
        allow_reentry=True,  # –ü–æ–∑–≤–æ–ª—è–µ–º –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
        per_message=False,   # False –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å MessageHandler
        per_chat=True,       # –û–¥–∏–Ω —Ä–∞–∑–≥–æ–≤–æ—Ä –Ω–∞ —á–∞—Ç
        per_user=True        # –û–¥–∏–Ω —Ä–∞–∑–≥–æ–≤–æ—Ä –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º v3.0 conversation handler –ü–ï–†–í–´–ú (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    v3_handler = get_v3_conversation_handler()
    application.add_handler(v3_handler)
    logger.info("üöÄ v3.0 ConversationHandler –¥–æ–±–∞–≤–ª–µ–Ω!")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π conversation handler
    application.add_handler(conversation_handler)
    logger.info(f"üî• ConversationHandler –¥–æ–±–∞–≤–ª–µ–Ω! States: {list(conversation_handler.states.keys())}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    async def debug_handler(update, context):
        if update.message and update.effective_user:
            logger.info(f"üî• DEBUG: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {update.effective_user.id}: '{update.message.text[:50]}...'")
            logger.info(f"üî• DEBUG: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {context.user_data.get('state', 'unknown') if context.user_data else 'no_user_data'}")
    
    application.add_handler(MessageHandler(filters.ALL, debug_handler), group=1)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã help
    async def help_handler(update, context):
        await update.message.reply_text(
            "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
            "ü§ñ /start - –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã\n"
            "üéØ /personalized - –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º\n"
            "‚ùå /cancel - –æ—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞",
            parse_mode='HTML'
        )
    
    application.add_handler(CommandHandler("help", help_handler))
    
    logger.info("–ë–æ—Ç LetterGenius –∑–∞–ø—É—â–µ–Ω!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=["message", "callback_query"])

if __name__ == "__main__":
    main() 