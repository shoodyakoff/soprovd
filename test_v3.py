"""
–¢–µ—Å—Ç –¥–ª—è v3.0 —É–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
"""
import asyncio
import logging
from services.smart_analyzer import SmartAnalyzer
from services.openai_service import OpenAIService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
TEST_VACANCY = """
Senior Python Developer
–ö–æ–º–ø–∞–Ω–∏—è: TechCorp

–ú—ã –∏—â–µ–º –æ–ø—ã—Ç–Ω–æ–≥–æ Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- 5+ –ª–µ—Ç –æ–ø—ã—Ç–∞ Python —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- –û–ø—ã—Ç —Å Django/FastAPI
- –ó–Ω–∞–Ω–∏–µ PostgreSQL, Redis
- –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å Docker, Kubernetes
- –ü–æ–Ω–∏–º–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
- –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –æ—Ç B2

–ë—É–¥–µ—Ç –ø–ª—é—Å–æ–º:
- –û–ø—ã—Ç —Å AWS/GCP
- –ó–Ω–∞–Ω–∏–µ React
- –û–ø—ã—Ç team lead

–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:
- –ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç 200,000 —Ä—É–±
- –£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞
- –ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫
- –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞
"""

TEST_RESUME = """
–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤
Python Developer, 6 –ª–µ—Ç –æ–ø—ã—Ç–∞

–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:
- Senior Python Developer –≤ StartupXYZ (2021-2024)
  ‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç–∞–ª 15 –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ FastAPI
  ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ 40%
  ‚Ä¢ –í–Ω–µ–¥—Ä–∏–ª CI/CD —Å Docker
  ‚Ä¢ –†—É–∫–æ–≤–æ–¥–∏–ª –∫–æ–º–∞–Ω–¥–æ–π –∏–∑ 3 —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

- Middle Python Developer –≤ WebAgency (2018-2021)
  ‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ Django
  ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ API
  ‚Ä¢ –†–∞–±–æ—Ç–∞ —Å PostgreSQL

–ù–∞–≤—ã–∫–∏:
- Python, Django, FastAPI
- PostgreSQL, Redis, MongoDB
- Docker, Kubernetes
- AWS (EC2, RDS, S3)
- Git, CI/CD
- –ê–Ω–≥–ª–∏–π—Å–∫–∏–π B2

–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:
- –ú–ì–£, –§–∞–∫—É–ª—å—Ç–µ—Ç –í–ú–ö (2014-2018)
"""

async def test_smart_analyzer():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —É–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    logger.info("=== –¢–ï–°–¢ –£–ú–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê v3.0 ===")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        openai_service = OpenAIService()
        analyzer = SmartAnalyzer(openai_service)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è—é OpenAI API...")
        api_working = await openai_service.test_api_connection()
        if not api_working:
            logger.error("‚ùå OpenAI API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return
        
        logger.info("‚úÖ OpenAI API —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –≠—Ç–∞–ø 1: –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑
        logger.info("\nüß† –≠—Ç–∞–ø 1: –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑...")
        analysis = await analyzer.deep_analyze(TEST_VACANCY, TEST_RESUME)
        
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
        logger.info(f"- –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis.get('confidence_score', 0):.2f}")
        logger.info(f"- –ö–ª—é—á–µ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è: {len(analysis.get('vacancy_analysis', {}).get('key_requirements', []))}")
        logger.info(f"- –ù–∞–≤—ã–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {len(analysis.get('resume_analysis', {}).get('key_skills', []))}")
        
        # –≠—Ç–∞–ø 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∏—Å—å–º–∞
        logger.info("\n‚úçÔ∏è –≠—Ç–∞–ø 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–Ω–æ–≥–æ –ø–∏—Å—å–º–∞...")
        letter = await analyzer.generate_human_letter(analysis, "professional")
        
        logger.info(f"üìù –ü–∏—Å—å–º–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(letter)} —Å–∏–º–≤–æ–ª–æ–≤")
        logger.info(f"–ü—Ä–µ–≤—å—é: {letter[:100]}...")
        
        # –≠—Ç–∞–ø 3: –î–µ–ò–ò-—Ñ–∏–∫–∞—Ü–∏—è
        logger.info("\nüîß –≠—Ç–∞–ø 3: –î–µ–ò–ò-—Ñ–∏–∫–∞—Ü–∏—è...")
        final_letter = await analyzer.deai_text(letter)
        
        logger.info(f"‚ú® –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ: {len(final_letter)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü–æ–ª–Ω—ã–π —Ñ–ª–æ—É
        logger.info("\nüöÄ –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ñ–ª–æ—É...")
        full_letter = await analyzer.generate_full_letter(
            TEST_VACANCY, 
            TEST_RESUME, 
            "professional"
        )
        
        logger.info("\n=== –†–ï–ó–£–õ–¨–¢–ê–¢ ===")
        logger.info(f"–î–ª–∏–Ω–∞ –ø–∏—Å—å–º–∞: {len(full_letter)} —Å–∏–º–≤–æ–ª–æ–≤")
        logger.info("–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ:")
        logger.info("-" * 50)
        logger.info(full_letter)
        logger.info("-" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ò–ò-—à—Ç–∞–º–ø—ã
        ai_patterns = [
            "—Ö–æ—Ç–µ–ª –±—ã –≤—ã—Ä–∞–∑–∏—Ç—å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å",
            "—Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –º–æ—é –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—É",
            "–∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–∂—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏",
            "—É–Ω–∏–∫–∞–ª—å–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –Ω–∞–≤—ã–∫–æ–≤",
            "—Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥—É"
        ]
        
        found_patterns = [p for p in ai_patterns if p.lower() in full_letter.lower()]
        
        if found_patterns:
            logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ò–ò-—à—Ç–∞–º–ø—ã: {found_patterns}")
        else:
            logger.info("‚úÖ –ò–ò-—à—Ç–∞–º–ø—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã!")
        
        logger.info("\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(test_smart_analyzer()) 