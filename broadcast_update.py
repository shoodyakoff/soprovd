#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –∞–ø–¥–µ–π—Ç–∞ v7.x –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞
–ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –û–°–¢–û–†–û–ñ–ù–û! –¢–æ–ª—å–∫–æ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ!
"""

import asyncio
import logging
import os
from datetime import datetime
from typing import List, Dict, Any

from telegram import Bot
from telegram.error import TelegramError, Forbidden, BadRequest

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('broadcast.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
from config import TELEGRAM_BOT_TOKEN
from utils.database import SupabaseClient


class UpdateBroadcaster:
    def __init__(self):
        if not TELEGRAM_BOT_TOKEN:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
        
        # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –¥–ª—è –ª–∏–Ω—Ç–µ—Ä–∞
        self.token: str = TELEGRAM_BOT_TOKEN
        self.bot = Bot(token=self.token)
        self.supabase = SupabaseClient.get_client()
        self.stats = {
            'total_users': 0,
            'sent_success': 0,
            'sent_failed': 0,
            'blocked_bot': 0,
            'other_errors': 0
        }
    
    async def get_all_users(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î"""
        try:
            if not self.supabase:
                logger.error("Supabase not available!")
                return []
            
            response = self.supabase.table('users').select(
                'id, telegram_user_id, username, first_name, created_at'
            ).execute()
            
            users = response.data or []
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î")
            return users
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []
    
    def get_update_message(self) -> str:
        """–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∞–ø–¥–µ–π—Ç–µ v7.x"""
        return """üéâ <b>–ö—Ä—É—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –°–æ–ø—Ä–æ–≤–æ–¥!</b>

–ü—Ä–∏–≤–µ—Ç! –ú—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –ú–ï–ì–ê-–∞–ø–¥–µ–π—Ç –±–æ—Ç–∞ —Å –∫—É—á–µ–π –Ω–æ–≤—ã—Ö —Ñ–∏—à–µ–∫:

<b>üÜï –ß—Ç–æ –Ω–æ–≤–æ–≥–æ:</b>
‚úÖ <b>–£–ª—É—á—à–µ–Ω–∏–µ –ø–∏—Å–µ–º</b> - —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ (–¥–æ 3 —Ä–∞–∑!)
‚úÖ <b>–õ–∞–π–∫–∏ –∏ –æ—Ü–µ–Ω–∫–∏</b> - –æ—Ü–µ–Ω–∏ –ø–∏—Å—å–º–æ –∏ –ø–æ–º–æ–≥–∏ –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ  
‚úÖ <b>–ë—ã—Å—Ç—Ä–µ–µ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–µ–µ</b> - —É–ª—É—á—à–∏–ª–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫

<b>üî• –ì–ª–∞–≤–Ω–æ–µ:</b>
–¢–µ–ø–µ—Ä—å –µ—Å–ª–∏ –ø–∏—Å—å–º–æ –Ω–µ –∏–¥–µ–∞–ª—å–Ω–æ - –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ "üîÑ –£–ª—É—á—à–∏—Ç—å –ø–∏—Å—å–º–æ" –∏ –æ–±—ä—è—Å–Ω–∏ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å. –ë–æ—Ç –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—Ç —Å —É—á–µ—Ç–æ–º —Ç–≤–æ–∏—Ö –ø–æ–∂–µ–ª–∞–Ω–∏–π!

<b>üí° –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
1. –û—Ç–ø—Ä–∞–≤—å –≤–∞–∫–∞–Ω—Å–∏—é
2. –û—Ç–ø—Ä–∞–≤—å —Ä–µ–∑—é–º–µ  
3. –ü–æ–ª—É—á–∏ –ø–∏—Å—å–º–æ
4. –û—Ü–µ–Ω–∏: ‚ù§Ô∏è –∏–ª–∏ üëé
5. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ - —É–ª—É—á—à–∏!

üöÄ <b>–ü–æ–ø—Ä–æ–±—É–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>

/start - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ"""
    
    async def send_to_user(self, user: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        telegram_id = user['telegram_user_id']
        username = user.get('username', 'unknown')
        first_name = user.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        
        try:
            message = self.get_update_message()
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
            await self.bot.send_message(
                chat_id=int(telegram_id),
                text=message,
                parse_mode='HTML'
            )
            
            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: @{username} ({first_name})")
            self.stats['sent_success'] += 1
            return True
            
        except Forbidden:
            logger.warning(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞: @{username}")
            self.stats['blocked_bot'] += 1
            return False
            
        except BadRequest as e:
            if "chat not found" in str(e).lower():
                logger.warning(f"‚ùì –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: @{username}")
            else:
                logger.error(f"‚ùå BadRequest –¥–ª—è @{username}: {e}")
            self.stats['other_errors'] += 1
            return False
            
        except TelegramError as e:
            logger.error(f"‚ùå Telegram –æ—à–∏–±–∫–∞ –¥–ª—è @{username}: {e}")
            self.stats['sent_failed'] += 1
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è @{username}: {e}")
            self.stats['other_errors'] += 1
            return False
    
    async def broadcast_update(self, delay_between_messages: float = 0.5):
        """–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ª–∏–º–∏—Ç–æ–≤"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É –∞–ø–¥–µ–π—Ç–∞ v7.x")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await self.get_all_users()
        if not users:
            logger.error("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!")
            return
        
        self.stats['total_users'] = len(users)
        logger.info(f"üìä –ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(users)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        print(f"\nüéØ –í–ù–ò–ú–ê–ù–ò–ï! –ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(users)} —Å–æ–æ–±—â–µ–Ω–∏–π.")
        print("‚ö†Ô∏è  –≠—Ç–æ –º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞! –£–±–µ–¥–∏—Å—å —á—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ—à—å –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –±–æ—Ç–µ.")
        print("ü§ñ –ü—Ä–æ–≤–µ—Ä—å —á—Ç–æ TELEGRAM_BOT_TOKEN —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ü–†–û–î–ê–ö–®–ù –±–æ—Ç–∞.")
        
        confirm = input("\n‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É? (yes/no): ").lower().strip()
        if confirm not in ['yes', 'y', '–¥–∞']:
            logger.info("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        start_time = datetime.now()
        logger.info("üì§ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É...")
        
        for i, user in enumerate(users, 1):
            try:
                await self.send_to_user(user)
                
                # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
                if i % 10 == 0:
                    logger.info(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(users)} ({i/len(users)*100:.1f}%)")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–∑–∞—â–∏—Ç–∞ –æ—Ç –ª–∏–º–∏—Ç–æ–≤)
                if delay_between_messages > 0:
                    await asyncio.sleep(delay_between_messages)
                
            except Exception as e:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
                continue
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        end_time = datetime.now()
        duration = end_time - start_time
        
        logger.info("üéâ –†–ê–°–°–´–õ–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        logger.info("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        logger.info(f"   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {self.stats['total_users']}")
        logger.info(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.stats['sent_success']}")
        logger.info(f"   ‚ùå –û—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏: {self.stats['sent_failed']}")
        logger.info(f"   üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {self.stats['blocked_bot']}")
        logger.info(f"   ‚ùì –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏: {self.stats['other_errors']}")
        logger.info(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration}")
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
        if self.stats['total_users'] > 0:
            success_rate = self.stats['sent_success'] / self.stats['total_users'] * 100
            logger.info(f"   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        broadcaster = UpdateBroadcaster()
        
        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        async with broadcaster.bot:
            bot_info = await broadcaster.bot.get_me()
            logger.info(f"ü§ñ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–æ—Ç—É: @{bot_info.username}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
            if not broadcaster.supabase:
                logger.error("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase!")
                return
            
            # –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏
            await broadcaster.broadcast_update(delay_between_messages=0.5)
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return


if __name__ == "__main__":
    print("üöÄ –ú–ê–°–°–û–í–ê–Ø –†–ê–°–°–´–õ–ö–ê –ê–ü–î–ï–ô–¢–ê v7.x")
    print("=" * 50)
    asyncio.run(main())