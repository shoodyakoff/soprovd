"""
Webhook Handler –¥–ª—è –ÆKassa v10.1
FastAPI —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
"""
import logging
import json
import asyncio
from typing import Dict, Any, Optional
from fastapi import FastAPI, Request, HTTPException, Response
from fastapi.responses import JSONResponse
import uvicorn
import os

from services.payment_service import payment_service
from config import WEBHOOK_HOST, WEBHOOK_PATH, YOOKASSA_ENABLED

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è bot instance
bot_instance = None

def set_bot_instance(bot):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç bot instance –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    global bot_instance
    bot_instance = bot
    logger.info("ü§ñ Bot instance set for webhook handler")

def get_bot_instance():
    """–ü–æ–ª—É—á–∞–µ—Ç bot instance"""
    return bot_instance

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="–ÆKassa Webhook Handler",
    description="–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook'–æ–≤ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π Premium –ø–æ–¥–ø–∏—Å–æ–∫",
    version="10.1.0"
)

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {
        "status": "healthy",
        "payments_enabled": YOOKASSA_ENABLED,
        "test_mode": True  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –±—É–¥–µ—Ç False
    }

@app.get("/webhook/health")
async def webhook_health():
    """Health check –¥–ª—è webhook endpoint"""
    return {
        "status": "healthy",
        "webhook_path": WEBHOOK_PATH,
        "payments_enabled": YOOKASSA_ENABLED
    }

@app.post(WEBHOOK_PATH)
async def handle_yookassa_webhook(request: Request):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ—Ç –ÆKassa
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–æ–±—ã—Ç–∏—è:
    - payment.succeeded - —É—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞
    - payment.canceled - –æ—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞
    - refund.succeeded - –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        body = await request.body()
        webhook_data = json.loads(body.decode('utf-8'))
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π webhook
        event = webhook_data.get('event', 'unknown')
        logger.info(f"üîî Received –ÆKassa webhook, event={event}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–ª–∞—Ç–µ–∂–∏ –≤–∫–ª—é—á–µ–Ω—ã
        if not YOOKASSA_ENABLED:
            logger.warning("‚ö†Ô∏è Webhook received but payments are disabled")
            return JSONResponse(
                status_code=200,
                content={"status": "ignored", "reason": "payments_disabled"}
            )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º webhook
        success = await payment_service.process_webhook(webhook_data)
        
        if success:
            logger.info(f"‚úÖ Webhook processed successfully for event: {event}")
            return JSONResponse(
                status_code=200,
                content={"status": "success", "event": event}
            )
        else:
            logger.error(f"‚ùå Failed to process webhook for event: {event}")
            return JSONResponse(
                status_code=400,
                content={"status": "error", "event": event, "reason": "processing_failed"}
            )
            
    except json.JSONDecodeError as e:
        logger.error(f"‚ùå Invalid JSON in webhook: {e}")
        raise HTTPException(status_code=400, detail="Invalid JSON")
        
    except Exception as e:
        logger.error(f"‚ùå Error processing webhook: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.post("/webhook/test")
async def test_webhook():
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    test_data = {
        "event": "payment.succeeded",
        "object": {
            "id": "test_payment_123",
            "status": "succeeded",
            "metadata": {
                "user_id": "1",
                "telegram_id": "123456789",
                "subscription_type": "premium"
            }
        }
    }
    
    try:
        success = await payment_service.process_webhook(test_data)
        return {
            "status": "success" if success else "error",
            "test_data": test_data
        }
    except Exception as e:
        return {
            "status": "error",
            "error": str(e),
            "test_data": test_data
        }

@app.post("/webhook/yookassa/test")
async def test_yookassa_webhook(user_id: int = 5):
    """
    –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5)
    """
    payment_id = f"test_payment_{user_id}_{int(asyncio.get_event_loop().time())}"
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π Telegram ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤–∞—à ID)
    real_telegram_id = 678674926  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π Telegram ID
    
    test_data = {
        "event": "payment.succeeded",
        "object": {
            "id": payment_id,
            "status": "succeeded",
            "amount": {
                "value": "199.00",
                "currency": "RUB"
            },
            "metadata": {
                "user_id": str(user_id),
                "telegram_id": str(real_telegram_id),
                "subscription_type": "premium"
            }
        }
    }
    
    try:
        logger.info(f"üß™ Testing webhook for user {user_id} with telegram_id {real_telegram_id}")
        
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –≤ –ë–î
        save_success = await payment_service._save_payment_to_db(
            payment_id=payment_id,
            user_id=user_id,
            amount=199.00,
            status="pending",
            confirmation_url="https://test.yookassa.ru/payment",
            metadata=test_data["object"]["metadata"]
        )
        
        if not save_success:
            logger.error(f"‚ùå Failed to save test payment {payment_id} to DB")
            return {
                "status": "error",
                "message": f"Failed to save test payment to DB",
                "test_data": test_data,
                "timestamp": asyncio.get_event_loop().time()
            }
        
        logger.info(f"‚úÖ Test payment {payment_id} saved to DB")
        
        # –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º webhook
        success = await payment_service.process_webhook(test_data)
        
        if success:
            logger.info(f"‚úÖ Test webhook successful for user {user_id}")
            return {
                "status": "success",
                "message": f"Test webhook processed successfully for user {user_id}",
                "test_data": test_data,
                "timestamp": asyncio.get_event_loop().time()
            }
        else:
            logger.error(f"‚ùå Test webhook failed for user {user_id}")
            return {
                "status": "error",
                "message": f"Test webhook processing failed for user {user_id}",
                "test_data": test_data,
                "timestamp": asyncio.get_event_loop().time()
            }
            
    except Exception as e:
        logger.error(f"‚ùå Test webhook exception for user {user_id}: {e}")
        return {
            "status": "error",
            "message": f"Test webhook exception: {str(e)}",
            "test_data": test_data,
            "timestamp": asyncio.get_event_loop().time()
        }

@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    logger.error(f"‚ùå Unhandled exception: {exc}")
    return JSONResponse(
        status_code=500,
        content={"status": "error", "message": "Internal server error"}
    )

def start_webhook_server(bot=None):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç webhook —Å–µ—Ä–≤–µ—Ä"""
    if bot:
        set_bot_instance(bot)
        logger.info(f"ü§ñ Bot instance set for webhook server")
    
    # Railway –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ—Ä—Ç —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PORT
    port = int(os.getenv("PORT", 8000))
    
    logger.info(f"üöÄ Starting webhook server on {WEBHOOK_HOST}:{port}")
    logger.info(f"üîó Webhook endpoint: {WEBHOOK_PATH}")
    
    uvicorn.run(
        "webhook_handler:app",
        host=WEBHOOK_HOST,
        port=port,
        log_level="info"
    )

if __name__ == "__main__":
    start_webhook_server() 