#!/usr/bin/env python3
"""
DEV –≤–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –∞–ø–¥–µ–π—Ç–∞ v7.x
–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ —Å TEST MODE –∏ REAL MODE
"""

import asyncio
import logging
import os
from datetime import datetime
from typing import List, Dict, Any, Optional

from telegram import Bot
from telegram.error import TelegramError, Forbidden, BadRequest

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è dev
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('broadcast_dev.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
from config import TELEGRAM_BOT_TOKEN
from utils.database import SupabaseClient


class DevUpdateBroadcaster:
    def __init__(self):
        if not TELEGRAM_BOT_TOKEN:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
        
        self.token: str = TELEGRAM_BOT_TOKEN
        self.bot = Bot(token=self.token)
        self.supabase = SupabaseClient.get_client()
        self.stats = {
            'total_users': 0,
            'sent_success': 0,
            'sent_failed': 0,
            'blocked_bot': 0,
            'other_errors': 0
        }
        
        # Dev –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.test_mode = True
        self.max_users_real = 5  # –ú–∞–∫—Å–∏–º—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ REAL MODE
        self.admin_telegram_id: Optional[int] = None
    
    async def get_all_users(self, limit_for_test: bool = False) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            if not self.supabase:
                logger.error("Supabase not available!")
                return []
            
            query = self.supabase.table('users').select(
                'id, telegram_user_id, username, first_name, created_at'
            )
            
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω admin ID, –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –µ–≥–æ
            if self.admin_telegram_id:
                query = query.eq('telegram_user_id', self.admin_telegram_id)
                logger.info(f"üéØ –§–∏–ª—å—Ç—Ä –ø–æ admin ID: {self.admin_telegram_id}")
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è REAL MODE
            elif limit_for_test:
                query = query.limit(self.max_users_real)
                logger.info(f"üõ°Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è REAL MODE: –º–∞–∫—Å–∏–º—É–º {self.max_users_real} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            response = query.execute()
            users = response.data or []
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î")
            return users
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []
    
    def get_dev_update_message(self) -> str:
        """–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∞–ø–¥–µ–π—Ç–µ v7.x —Å –ø–æ–º–µ—Ç–∫–æ–π DEV"""
        return """üß™ <b>[DEV TEST] –ö—Ä—É—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –°–æ–ø—Ä–æ–≤–æ–¥!</b>

–ü—Ä–∏–≤–µ—Ç! –ú—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –ú–ï–ì–ê-–∞–ø–¥–µ–π—Ç –±–æ—Ç–∞ —Å –∫—É—á–µ–π –Ω–æ–≤—ã—Ö —Ñ–∏—à–µ–∫:

<b>üÜï –ß—Ç–æ –Ω–æ–≤–æ–≥–æ:</b>
‚úÖ <b>–£–ª—É—á—à–µ–Ω–∏–µ –ø–∏—Å–µ–º</b> - —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ (–¥–æ 3 —Ä–∞–∑!)
‚úÖ <b>–õ–∞–π–∫–∏ –∏ –æ—Ü–µ–Ω–∫–∏</b> - –æ—Ü–µ–Ω–∏ –ø–∏—Å—å–º–æ –∏ –ø–æ–º–æ–≥–∏ –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ  
‚úÖ <b>–ë—ã—Å—Ç—Ä–µ–µ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–µ–µ</b> - —É–ª—É—á—à–∏–ª–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫

<b>üî• –ì–ª–∞–≤–Ω–æ–µ:</b>
–¢–µ–ø–µ—Ä—å –µ—Å–ª–∏ –ø–∏—Å—å–º–æ –Ω–µ –∏–¥–µ–∞–ª—å–Ω–æ - –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ "üîÑ –£–ª—É—á—à–∏—Ç—å –ø–∏—Å—å–º–æ" –∏ –æ–±—ä—è—Å–Ω–∏ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å. –ë–æ—Ç –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—Ç —Å —É—á–µ—Ç–æ–º —Ç–≤–æ–∏—Ö –ø–æ–∂–µ–ª–∞–Ω–∏–π!

<b>üí° –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
1. –û—Ç–ø—Ä–∞–≤—å –≤–∞–∫–∞–Ω—Å–∏—é
2. –û—Ç–ø—Ä–∞–≤—å —Ä–µ–∑—é–º–µ  
3. –ü–æ–ª—É—á–∏ –ø–∏—Å—å–º–æ
4. –û—Ü–µ–Ω–∏: ‚ù§Ô∏è –∏–ª–∏ üëé
5. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ - —É–ª—É—á—à–∏!

üöÄ <b>–ü–æ–ø—Ä–æ–±—É–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>

/start - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ

<i>üß™ –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ DEV –æ–∫—Ä—É–∂–µ–Ω–∏—è</i>"""
    
    async def send_to_user_test(self, user: Dict[str, Any]) -> bool:
        """–≠–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è (TEST MODE)"""
        telegram_id = user['telegram_user_id']
        username = user.get('username', 'unknown')
        first_name = user.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        
        # –≠–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
        await asyncio.sleep(0.1)  # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É API
        
        # –≠–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        import random
        if random.random() < 0.8:  # 80% —É—Å–ø–µ—à–Ω—ã—Ö
            logger.info(f"‚úÖ [TEST] –≠–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É: @{username} ({first_name})")
            self.stats['sent_success'] += 1
            return True
        elif random.random() < 0.6:  # 10% –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏
            logger.warning(f"üö´ [TEST] –≠–º—É–ª–∏—Ä—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É: @{username}")
            self.stats['blocked_bot'] += 1
            return False
        else:  # 10% –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
            logger.error(f"‚ùå [TEST] –≠–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É: @{username}")
            self.stats['other_errors'] += 1
            return False
    
    async def send_to_user_real(self, user: Dict[str, Any]) -> bool:
        """–†–µ–∞–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (REAL MODE)"""
        telegram_id = user['telegram_user_id']
        username = user.get('username', 'unknown')
        first_name = user.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        
        try:
            message = self.get_dev_update_message()
            
            await self.bot.send_message(
                chat_id=int(telegram_id),
                text=message,
                parse_mode='HTML'
            )
            
            logger.info(f"‚úÖ [REAL] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: @{username} ({first_name})")
            self.stats['sent_success'] += 1
            return True
            
        except Forbidden:
            logger.warning(f"üö´ [REAL] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞: @{username}")
            self.stats['blocked_bot'] += 1
            return False
            
        except BadRequest as e:
            if "chat not found" in str(e).lower():
                logger.warning(f"‚ùì [REAL] –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: @{username}")
            else:
                logger.error(f"‚ùå [REAL] BadRequest –¥–ª—è @{username}: {e}")
            self.stats['other_errors'] += 1
            return False
            
        except TelegramError as e:
            logger.error(f"‚ùå [REAL] Telegram –æ—à–∏–±–∫–∞ –¥–ª—è @{username}: {e}")
            self.stats['sent_failed'] += 1
            return False
            
        except Exception as e:
            logger.error(f"‚ùå [REAL] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è @{username}: {e}")
            self.stats['other_errors'] += 1
            return False
    
    def get_mode_selection(self) -> tuple[bool, bool]:
        """–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã"""
        print("\nüß™ DEV BROADCAST –†–ï–ñ–ò–ú–´:")
        print("1. TEST MODE - –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —ç–º—É–ª—è—Ü–∏—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
        print("2. REAL MODE - –†–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ (–û–°–¢–û–†–û–ñ–ù–û!)")
        
        while True:
            choice = input("\n‚ùì –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (1 –∏–ª–∏ 2): ").strip()
            if choice == "1":
                return True, False  # test_mode=True, real_mode=False
            elif choice == "2":
                print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï! REAL MODE –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!")
                print(f"üõ°Ô∏è –ú–∞–∫—Å–∏–º—É–º {self.max_users_real} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                confirm = input("‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã? (yes/no): ").lower().strip()
                if confirm in ['yes', 'y', '–¥–∞']:
                    return False, True  # test_mode=False, real_mode=True
            else:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2")
    
    def get_admin_id(self) -> Optional[int]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–π Telegram ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        admin_input = input("\n‚ùì –í–∞—à Telegram ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (Enter - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å): ").strip()
        if admin_input:
            try:
                return int(admin_input)
            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return None
    
    async def broadcast_update_dev(self, delay_between_messages: float = 0.3):
        """DEV —Ä–∞—Å—Å—ã–ª–∫–∞ —Å –≤—ã–±–æ—Ä–æ–º —Ä–µ–∂–∏–º–∞"""
        logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º DEV —Ä–∞—Å—Å—ã–ª–∫—É –∞–ø–¥–µ–π—Ç–∞ v7.x")
        
        # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
        is_test_mode, is_real_mode = self.get_mode_selection()
        self.test_mode = is_test_mode
        
        # –ü–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–π ID
        self.admin_telegram_id = self.get_admin_id()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await self.get_all_users(limit_for_test=is_real_mode)
        if not users:
            logger.error("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!")
            return
        
        self.stats['total_users'] = len(users)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∂–∏–º–µ
        mode_name = "TEST MODE" if is_test_mode else "REAL MODE"
        print(f"\nüéØ –†–µ–∂–∏–º: {mode_name}")
        print(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
        if self.admin_telegram_id:
            print(f"üë§ –ê–¥–º–∏–Ω ID: {self.admin_telegram_id}")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirm = input(f"\n‚ùì –ó–∞–ø—É—Å—Ç–∏—Ç—å {mode_name}? (yes/no): ").lower().strip()
        if confirm not in ['yes', 'y', '–¥–∞']:
            logger.info("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        start_time = datetime.now()
        logger.info(f"üì§ –ù–∞—á–∏–Ω–∞–µ–º {mode_name}...")
        
        for i, user in enumerate(users, 1):
            try:
                if is_test_mode:
                    await self.send_to_user_test(user)
                else:
                    await self.send_to_user_real(user)
                
                # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ dev
                if i % 5 == 0:
                    logger.info(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(users)} ({i/len(users)*100:.1f}%)")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                if delay_between_messages > 0:
                    await asyncio.sleep(delay_between_messages)
                
            except Exception as e:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
                continue
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        end_time = datetime.now()
        duration = end_time - start_time
        
        logger.info(f"üéâ {mode_name} –ó–ê–í–ï–†–®–ï–ù!")
        logger.info("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        logger.info(f"   –†–µ–∂–∏–º: {mode_name}")
        logger.info(f"   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {self.stats['total_users']}")
        logger.info(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.stats['sent_success']}")
        logger.info(f"   ‚ùå –û—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏: {self.stats['sent_failed']}")
        logger.info(f"   üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {self.stats['blocked_bot']}")
        logger.info(f"   ‚ùì –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏: {self.stats['other_errors']}")
        logger.info(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration}")
        
        if self.stats['total_users'] > 0:
            success_rate = self.stats['sent_success'] / self.stats['total_users'] * 100
            logger.info(f"   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        if is_test_mode:
            print(f"\n‚úÖ {mode_name} –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∏–∫–∞–∫–∏—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        else:
            print(f"\n‚ö†Ô∏è  {mode_name} –∑–∞–≤–µ—Ä—à–µ–Ω. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {self.stats['sent_success']} —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è DEV"""
    try:
        broadcaster = DevUpdateBroadcaster()
        
        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        async with broadcaster.bot:
            bot_info = await broadcaster.bot.get_me()
            logger.info(f"ü§ñ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–æ—Ç—É: @{bot_info.username}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
            if not broadcaster.supabase:
                logger.error("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase!")
                return
            
            # –ó–∞–ø—É—Å–∫ dev —Ä–∞—Å—Å—ã–ª–∫–∏
            await broadcaster.broadcast_update_dev(delay_between_messages=0.3)
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return


if __name__ == "__main__":
    print("üß™ DEV –ú–ê–°–°–û–í–ê–Ø –†–ê–°–°–´–õ–ö–ê –ê–ü–î–ï–ô–¢–ê v7.x")
    print("=" * 50)
    print("üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å TEST MODE –∏ REAL MODE")
    asyncio.run(main())