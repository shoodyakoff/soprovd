#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 678674926 –≤ –ø—Ä–æ–¥–∞–∫—à–Ω –±–∞–∑–µ

–ü—Ä–æ–±–ª–µ–º–∞:
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 678674926 –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ users
- –ù–æ —Å—É—â–µ—Å—Ç–≤—É—é—Ç —Å–µ—Å—Å–∏–∏ –∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
- Foreign key constraints –±–ª–æ–∫–∏—Ä—É—é—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
- –õ–∏–º–∏—Ç—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç

–†–µ—à–µ–Ω–∏–µ:
1. –ù–∞–π—Ç–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º 678674926
2. –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users
3. –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
"""
import asyncio
import os
from services.analytics_service import analytics
from services.subscription_service import subscription_service
from models.analytics_models import UserData
from utils.database import SupabaseClient

async def diagnose_missing_user():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º 678674926"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 678674926")
    print("=" * 60)
    
    user_id = 678674926
    session_id = "5a593176-5c8a-4295-8bd5-a825cd8d0582"
    
    supabase = SupabaseClient.get_client()
    if not supabase:
        print("‚ùå Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users
        print(f"üîç 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —Ç–∞–±–ª–∏—Ü–µ users...")
        users_response = supabase.table('users').select('*').eq('telegram_user_id', user_id).execute()
        
        if users_response.data:
            user = users_response.data[0]
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ID={user['id']}, Username={user.get('username', 'N/A')}")
            internal_user_id = user['id']
        else:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ù–ï –ù–ê–ô–î–ï–ù –≤ —Ç–∞–±–ª–∏—Ü–µ users!")
            internal_user_id = None
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é –ø–∏—Å—å–º–∞
        print(f"\nüîç 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ {session_id}...")
        session_response = supabase.table('letter_sessions').select('*').eq('id', session_id).execute()
        
        if session_response.data:
            session = session_response.data[0]
            session_user_id = session.get('user_id')
            print(f"‚úÖ –°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞: user_id={session_user_id}, status={session.get('status', 'N/A')}")
            
            if internal_user_id and session_user_id != internal_user_id:
                print(f"‚ö†Ô∏è –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: –°–µ—Å—Å–∏—è —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ user_id={session_user_id}, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç id={internal_user_id}")
        else:
            print(f"‚ùå –°–µ—Å—Å–∏—è {session_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        print(f"\nüîç 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è telegram_user_id={user_id}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≥–¥–µ –º–æ–∂–µ—Ç –±—ã—Ç—å user_id
        tables_to_check = [
            'subscriptions',
            'user_events', 
            'openai_requests',
            'letter_iterations',
            'letter_feedback'
        ]
        
        orphaned_data = {}
        for table in tables_to_check:
            try:
                # –ò—â–µ–º –∑–∞–ø–∏—Å–∏ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                response = supabase.table(table).select('id, user_id').eq('user_id', user_id).execute()
                if response.data:
                    orphaned_data[table] = len(response.data)
                    print(f"‚ö†Ô∏è {table}: {len(response.data)} –∑–∞–ø–∏—Å–µ–π —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                else:
                    print(f"‚úÖ {table}: –Ω–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {table}: {e}")
        
        return {
            'user_exists': bool(users_response.data),
            'internal_user_id': internal_user_id,
            'session_exists': bool(session_response.data),
            'orphaned_data': orphaned_data
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        return False

async def fix_missing_user():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    print("\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 678674926")
    print("=" * 60)
    
    user_id = 678674926
    
    try:
        # 1. –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(f"üîß 1. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")
        user_data = UserData(
            telegram_user_id=user_id,
            username="shoodyakoff",  # –ò–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤–∏–¥–Ω–æ —á—Ç–æ username shoodyakoff
            first_name="Stanislav",
            language_code="ru"
        )
        
        internal_user_id = await analytics.track_user(user_data)
        if internal_user_id:
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å internal_user_id: {internal_user_id}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return False
        
        # 2. –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        print(f"üîß 2. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id={internal_user_id}...")
        subscription = await analytics.get_or_create_subscription(internal_user_id)
        if subscription:
            print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ID={subscription.get('id', 'N/A')}")
            print(f"   Plan: {subscription.get('plan_type', 'N/A')}")
            print(f"   Status: {subscription.get('status', 'N/A')}")
            print(f"   Limit: {subscription.get('letters_limit', 'N/A')}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
            return False
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        print(f"üîß 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è user_id={internal_user_id}...")
        limits = await subscription_service.check_user_limits(internal_user_id, force_refresh=True)
        print(f"üìä –õ–∏–º–∏—Ç—ã: {limits}")
        
        can_generate = limits.get('can_generate', False)
        remaining = limits.get('remaining', 0)
        plan_type = limits.get('plan_type', 'unknown')
        
        print(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: Plan={plan_type}, –ú–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å={can_generate}, –û—Å—Ç–∞–ª–æ—Å—å={remaining}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
        import traceback
        print(f"Traceback: {traceback.format_exc()}")
        return False

async def verify_fix():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ"""
    print("\n‚úÖ –ü–†–û–í–ï–†–ö–ê: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    print("=" * 60)
    
    user_id = 678674926
    
    try:
        supabase = SupabaseClient.get_client()
        if not supabase:
            print("‚ùå Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω
        users_response = supabase.table('users').select('*').eq('telegram_user_id', user_id).execute()
        if users_response.data:
            user = users_response.data[0]
            internal_user_id = user['id']
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: internal_id={internal_user_id}")
        else:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        subscription_response = supabase.table('subscriptions').select('*').eq('user_id', internal_user_id).execute()
        if subscription_response.data:
            subscription = subscription_response.data[0]
            print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ID={subscription['id']}, Plan={subscription['plan_type']}")
        else:
            print("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ—à–∏–±–æ–∫)
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è...")
        test_event = {
            'user_id': internal_user_id,
            'event_type': 'test_fix_missing_user', 
            'event_data': {'test': True, 'fixed_user_id': user_id}
        }
        
        await analytics.track_event(
            user_id=internal_user_id,
            event_type='test_fix_missing_user',
            event_data={'test': True, 'fixed_user_id': user_id}
        )
        print("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 678674926")
    print("=" * 80)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫—É—é –±–∞–∑—É –∏—Å–ø–æ–ª—å–∑—É–µ–º
    from config import SUPABASE_URL
    print(f"üîó –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {SUPABASE_URL[:50]}...")
    
    # 1. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    diagnosis = await diagnose_missing_user()
    if not diagnosis:
        print("‚ùå –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
        return
    
    # 2. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    if not diagnosis.get('user_exists', False):
        fix_result = await fix_missing_user()
        if not fix_result:
            print("‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
            return
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞
        verify_result = await verify_fix()
        if verify_result:
            print("\nüéâ –£–°–ü–ï–•: –ü—Ä–æ–±–ª–µ–º–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!")
            print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 678674926 —Å–æ–∑–¥–∞–Ω")
            print("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞") 
            print("‚úÖ –õ–∏–º–∏—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
            print("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print("\nüöÄ –¢–µ–ø–µ—Ä—å –ª–∏–º–∏—Ç—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω!")
        else:
            print("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
    else:
        print("‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –¥—Ä—É–≥–æ–º")

if __name__ == "__main__":
    print("üîß –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    asyncio.run(main()) 