"""
–°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é –∏ –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏ –ø–∏—Å–µ–º v7.2
–£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: —Ç–æ–ª—å–∫–æ –ª–∞–π–∫–∏/–¥–∏–∑–ª–∞–π–∫–∏ –ë–ï–ó –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
"""
import logging
from typing import Optional, Dict, Any, List
from datetime import datetime

from utils.database import SupabaseClient
from models.feedback_models import (
    LetterFeedbackData, LetterIterationImprovement, SessionIterationStatus
)

logger = logging.getLogger(__name__)

class FeedbackService:
    def __init__(self):
        self.supabase = SupabaseClient.get_client()
        self.enabled = SupabaseClient.is_available()
        
    async def _execute_async(self, func, *args, **kwargs):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
        if not self.enabled:
            return None
            
        try:
            import asyncio
            loop = asyncio.get_event_loop()
            result = await loop.run_in_executor(None, func, *args, **kwargs)
            return result
        except Exception as e:
            logger.error(f"Feedback operation failed: {e}")
            return None
    
    # === –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–û–ú –ò–¢–ï–†–ê–¶–ò–ô ===
    
    async def get_session_iteration_status(self, session_id: str) -> Optional[SessionIterationStatus]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è —Å–µ—Å—Å–∏–∏"""
        def _get_status():
            try:
                if not self.supabase:
                    return None
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
                response = self.supabase.table('letter_sessions').select(
                    'current_iteration, max_iterations, has_feedback'
                ).eq('id', session_id).execute()
                
                if not response.data:
                    return None
                
                session = response.data[0]
                current = session['current_iteration'] or 1
                max_iter = session['max_iterations'] or 3
                has_feedback = session['has_feedback'] or False
                
                remaining = max(0, max_iter - current)
                can_iterate = remaining > 0
                
                return SessionIterationStatus(
                    session_id=session_id,
                    current_iteration=current,
                    max_iterations=max_iter,
                    has_feedback=has_feedback,
                    can_iterate=can_iterate,
                    remaining_iterations=remaining
                )
                
            except Exception as e:
                logger.error(f"Error getting session status: {e}")
                return None
        
        return await self._execute_async(_get_status)
    
    async def increment_session_iteration(self, session_id: str) -> bool:
        """–£–≤–µ–ª–∏—á–∏—Ç—å –Ω–æ–º–µ—Ä –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏"""
        def _increment():
            try:
                if not self.supabase:
                    return False
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é
                response = self.supabase.table('letter_sessions').select(
                    'current_iteration'
                ).eq('id', session_id).execute()
                
                if not response.data:
                    return False
                
                current = response.data[0]['current_iteration'] or 1
                new_iteration = current + 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º
                self.supabase.table('letter_sessions').update({
                    'current_iteration': new_iteration
                }).eq('id', session_id).execute()
                
                logger.info(f"Session {session_id} iteration incremented: {current} -> {new_iteration}")
                return True
                
            except Exception as e:
                logger.error(f"Error incrementing iteration: {e}")
                return False
        
        result = await self._execute_async(_increment)
        return result is True
    
    # === –°–û–•–†–ê–ù–ï–ù–ò–ï –û–ë–†–ê–¢–ù–û–ô –°–í–Ø–ó–ò ===
    
    async def save_feedback(self, feedback_data: LetterFeedbackData) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –ª–∞–π–∫/–¥–∏–∑–ª–∞–π–∫)"""
        def _save_feedback():
            try:
                if not self.supabase:
                    logger.warning("Supabase not available for feedback saving")
                    return False
                
                logger.info(f"üí¨ –°–æ—Ö—Ä–∞–Ω—è—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å: {feedback_data.feedback_type} –¥–ª—è —Å–µ—Å—Å–∏–∏ {feedback_data.session_id}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                session_check = self.supabase.table('letter_sessions').select('id').eq(
                    'id', feedback_data.session_id
                ).execute()
                
                if not session_check.data:
                    logger.error(f"‚ùå Session {feedback_data.session_id} not found")
                    return False
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
                self.supabase.table('letter_feedback').insert(
                    feedback_data.to_dict()
                ).execute()
                
                logger.info(f"‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                return True
                
            except Exception as e:
                logger.error(f"‚ùå Error saving feedback: {e}")
                logger.error(f"‚ùå Feedback data: {feedback_data.to_dict()}")
                return False
        
        result = await self._execute_async(_save_feedback)
        return result is True
    
    async def get_session_feedback(self, session_id: str) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ —Å–µ—Å—Å–∏–∏"""
        def _get_feedback():
            try:
                if not self.supabase:
                    return []
                
                response = self.supabase.table('letter_feedback').select('*').eq(
                    'session_id', session_id
                ).order('iteration_number').execute()
                
                return response.data or []
                
            except Exception as e:
                logger.error(f"Error getting session feedback: {e}")
                return []
        
        result = await self._execute_async(_get_feedback)
        return result or []
    
    # === –ì–ï–ù–ï–†–ê–¶–ò–Ø –£–õ–£–ß–®–ï–ù–ù–´–• –ü–ò–°–ï–ú ===
    
    async def save_letter_iteration(self, iteration_data: LetterIterationImprovement, 
                                  generated_letter: str, generation_time: int) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ç–µ—Ä–∞—Ü–∏—é —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞"""
        def _save_iteration():
            try:
                if not self.supabase:
                    return False
                
                data = iteration_data.to_dict()
                data.update({
                    'generated_letter': generated_letter,
                    'generation_time_seconds': generation_time,
                    'ai_model_used': 'claude',  # –∏–ª–∏ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ AIFactory
                    'created_at': datetime.now().isoformat()
                })
                
                self.supabase.table('letter_iterations').insert(data).execute()
                logger.info(f"Letter iteration saved for session {iteration_data.session_id}")
                return True
                
            except Exception as e:
                logger.error(f"Error saving letter iteration: {e}")
                return False
        
        result = await self._execute_async(_save_iteration)
        return result is True
    
    # === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===
    
    def format_iteration_counter(self, status: SessionIterationStatus) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—á–µ—Ç—á–∏–∫ –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        remaining = status.remaining_iterations
        
        if remaining <= 0:
            return "üèÅ <b>–≠—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ</b>\n–ò—Å—á–µ—Ä–ø–∞–Ω—ã –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–∏—è\n\nüí° –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ: /start"
        
        return f"üîÑ <b>–û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∞–≤–æ–∫: {remaining}</b>"
    
    def get_improvement_prompt_text(self, remaining_iterations: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–∏—Å—å–º–∞"""
        return (
            f"üîÑ <b>–£–ª—É—á—à–∞–µ–º –ø–∏—Å—å–º–æ</b> ({remaining_iterations} –ø—Ä–∞–≤–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å)\n\n"
            "üí¨ <b>–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å:</b>\n\n"
            "üéØ <b>–ù–∞–ø—Ä–∏–º–µ—Ä:</b>\n"
            "‚Ä¢ –ö–∞–∫–æ–π —Ç–æ–Ω –ø–∏—Å—å–º–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ? (–¥–µ–ª–æ–≤–æ–π/–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π/—É–≤–µ—Ä–µ–Ω–Ω—ã–π)\n"
            "‚Ä¢ –ö–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ —Å—Ç–æ–∏—Ç –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å —Å–∏–ª—å–Ω–µ–µ?\n"
            "‚Ä¢ –ß—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–±—Ä–∞—Ç—å –∏–∑ –ø–∏—Å—å–º–∞?\n"
            "‚Ä¢ –ù—É–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–ª–∏ –∞–∫—Ü–µ–Ω—Ç—ã?\n"
            "‚Ä¢ –ë–æ–ª—å—à–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ –æ–ø—ã—Ç–∞?\n\n"
            "üìù <i>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ...</i>"
        )

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
feedback_service = FeedbackService() 