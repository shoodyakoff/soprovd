"""
–£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä v3.0 - –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ GPT –ø—Ä–æ–º–ø—Ç—ã
–ü—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ –±–µ–∑ –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤
"""
import json
import logging
from typing import Dict, Any, Optional

logger = logging.getLogger(__name__)


# ============ –ü–†–û–ú–ü–¢–´ ============

DEEP_ANALYSIS_PROMPT = """–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫ –ø–æ HR –∏ —Ä–µ–∫—Ä—É—Ç–∏–Ω–≥—É. –ü—Ä–æ–≤–µ–¥–∏ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ —Ä–µ–∑—é–º–µ.

–ó–ê–î–ê–ß–ê: –ü–æ—à–∞–≥–æ–≤–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏ –≤–µ—Ä–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON

–≠–¢–ê–ü–´ –ê–ù–ê–õ–ò–ó–ê:

1. –ê–ù–ê–õ–ò–ó –í–ê–ö–ê–ù–°–ò–ò:
   - –ò–∑–≤–ª–µ–∫–∏ –∫–ª—é—á–µ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ/–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ)
   - –í—ã—è–≤–∏ —Å–∫—Ä—ã—Ç—ã–µ –±–æ–ª–µ–≤—ã–µ —Ç–æ—á–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏ 
   - –û–ø—Ä–µ–¥–µ–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è
   - –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –∫—É–ª—å—Ç—É—Ä—É
   - –ù–∞–π–¥–∏ —Å–∏–≥–Ω–∞–ª—ã —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –∏ —Ä–æ—Å—Ç–∞

2. –ê–ù–ê–õ–ò–ó –†–ï–ó–Æ–ú–ï:  
   - –ò–∑–≤–ª–µ–∫–∏ –æ–ø—ã—Ç, –Ω–∞–≤—ã–∫–∏, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
   - –ù–∞–π–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
   - –û–ø—Ä–µ–¥–µ–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ (USP)
   - –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞—Ä—å–µ—Ä–Ω—É—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é
   - –í—ã—è–≤–∏ transferable skills

3. –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–û–ï –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–ï:
   - –ù–∞–π–¥–∏ –ø—Ä—è–º—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤
   - –û–ø—Ä–µ–¥–µ–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å–∏–º—ã–µ –Ω–∞–≤—ã–∫–∏  
   - –í—ã—è–≤–∏ –ø—Ä–æ–±–µ–ª—ã –∏ —Å–ø–æ—Å–æ–±—ã –∏—Ö –∑–∞–∫—Ä—ã—Ç–∏—è
   - –°–æ–∑–¥–∞–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
   - –ü–æ–¥–≥–æ—Ç–æ–≤—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—Ç—Å—ã–ª–∫–∏ –∫ –≤–∞–∫–∞–Ω—Å–∏–∏

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê: —Å—Ç—Ä–æ–≥–æ JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
{{
  "vacancy_analysis": {{
    "key_requirements": ["—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ1", "—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ2"],
    "pain_points": ["–ø—Ä–æ–±–ª–µ–º–∞1", "–ø—Ä–æ–±–ª–µ–º–∞2"], 
    "priorities": ["–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç1", "–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç2"],
    "company_culture": "–æ–ø–∏—Å–∞–Ω–∏–µ –∫—É–ª—å—Ç—É—Ä—ã",
    "urgency_signals": ["—Å–∏–≥–Ω–∞–ª1", "—Å–∏–≥–Ω–∞–ª2"],
    "hidden_needs": ["—Å–∫—Ä—ã—Ç–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å1", "—Å–∫—Ä—ã—Ç–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å2"]
  }},
  "resume_analysis": {{
    "key_skills": ["–Ω–∞–≤—ã–∫1", "–Ω–∞–≤—ã–∫2"],
    "achievements": ["–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏1", "–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏2"],
    "unique_advantages": ["–£–¢–ü1", "–£–¢–ü2"],
    "career_trajectory": "–æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –ø—É—Ç–∏",
    "transferable_skills": ["–ø–µ—Ä–µ–Ω–æ—Å–∏–º—ã–π –Ω–∞–≤—ã–∫1", "–ø–µ—Ä–µ–Ω–æ—Å–∏–º—ã–π –Ω–∞–≤—ã–∫2"]
  }},
  "matching_strategy": {{
    "direct_matches": ["—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ1", "—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ2"],
    "skill_gaps": ["–ø—Ä–æ–±–µ–ª1", "–ø—Ä–æ–±–µ–ª2"],
    "positioning": "—Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
    "value_proposition": "—Ü–µ–Ω–Ω–æ—Å—Ç–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
    "specific_references": ["–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –æ—Ç—Å—ã–ª–∫–∞ –∫ –≤–∞–∫–∞–Ω—Å–∏–∏1", "–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –æ—Ç—Å—ã–ª–∫–∞ –∫ –≤–∞–∫–∞–Ω—Å–∏–∏2"]
  }},
  "confidence_score": 0.85
}}

–í–ê–ö–ê–ù–°–ò–Ø:
{vacancy_text}

–†–ï–ó–Æ–ú–ï:
{resume_text}"""


HUMAN_WRITING_PROMPT = """–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—é —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∏—Å–µ–º. 
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞—Ç—å –ï–°–¢–ï–°–¢–í–ï–ù–ù–û–ï, –ß–ï–õ–û–í–ï–ß–ù–û–ï –ø–∏—Å—å–º–æ –±–µ–∑ –ò–ò-—à—Ç–∞–º–ø–æ–≤.

–ê–ù–ê–õ–ò–ó –ò–ó –ü–†–ï–î–´–î–£–©–ï–ì–û –≠–¢–ê–ü–ê:
{analysis_json}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ü–ò–°–¨–ú–£:
1. –ß–ï–õ–û–í–ï–ß–ù–û–°–¢–¨: 
   ‚ùå –ò–∑–±–µ–≥–∞–π: "—Ö–æ—Ç–µ–ª –±—ã –≤—ã—Ä–∞–∑–∏—Ç—å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å", "—Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –º–æ—é –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—É"
   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π: –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–±–æ—Ä–æ—Ç—ã, –ª–∏—á–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã

2. –ö–û–ù–ö–†–ï–¢–ù–û–°–¢–¨:
   - –ü—Ä—è–º—ã–µ –æ—Ç—Å—ã–ª–∫–∏ –∫ –ø—É–Ω–∫—Ç–∞–º –≤–∞–∫–∞–Ω—Å–∏–∏
   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –æ–ø—ã—Ç–∞
   - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º

3. –°–¢–†–ê–¢–ï–ì–ò–ß–ù–û–°–¢–¨:
   - –ü–æ–∫–∞–∂–∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –±–æ–ª–µ–≤—ã—Ö —Ç–æ—á–µ–∫ –∫–æ–º–ø–∞–Ω–∏–∏
   - –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–π —á–µ—Ä–µ–∑ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
   - –ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å

4. –°–¢–†–£–ö–¢–£–†–ê:
   - –ò–Ω—Ç—Ä–∏–≥—É—é—â–µ–µ –Ω–∞—á–∞–ª–æ (–Ω–µ "–ø–∏—à—É –ø–æ –ø–æ–≤–æ–¥—É –≤–∞–∫–∞–Ω—Å–∏–∏")
   - 2-3 –∞–±–∑–∞—Ü–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏  
   - –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å next step

–ê–ù–¢–ò-–ò–ò –ü–†–ê–í–ò–õ–ê:
- –ù–∏–∫–∞–∫–∏—Ö –∫–ª–∏—à–µ —Ç–∏–ø–∞ "–∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–∂—É"
- –ù–∏–∫–∞–∫–∏—Ö —Ñ–æ—Ä–º–∞–ª—å–Ω—ã—Ö –æ–±–æ—Ä–æ—Ç–æ–≤
- –ñ–∏–≤—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É –∞–±–∑–∞—Ü–∞–º–∏
- –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è

–°–¢–ò–õ–¨: {writing_style}

–°–æ–∑–¥–∞–π –ø–∏—Å—å–º–æ, –∫–æ—Ç–æ—Ä–æ–µ HR –Ω–µ –æ—Ç–ª–∏—á–∏—Ç –æ—Ç –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –æ–ø—ã—Ç–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º.
–ù–∞–ø–∏—à–∏ –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."""


DEAI_PROMPT = """–ü—Ä–æ–≤–µ—Ä—å —Ç–µ–∫—Å—Ç –Ω–∞ –ò–ò-—à—Ç–∞–º–ø—ã –∏ —Å–¥–µ–ª–∞–π –µ–≥–æ –±–æ–ª–µ–µ —á–µ–ª–æ–≤–µ—á–Ω—ã–º.

–î–ï–¢–ï–ö–¢–ò–†–£–ï–ú–´–ï –ü–ê–¢–¢–ï–†–ù–´:
- "—Ö–æ—Ç–µ–ª –±—ã –≤—ã—Ä–∞–∑–∏—Ç—å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å" 
- "—Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –º–æ—é –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—É"
- "–∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–∂—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏"
- "—É–Ω–∏–∫–∞–ª—å–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –Ω–∞–≤—ã–∫–æ–≤"
- "–≥–æ—Ç–æ–≤ –≤–Ω–µ—Å—Ç–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –≤–∫–ª–∞–¥"
- "–±—É–¥—É —Ä–∞–¥ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–±—Å—É–¥–∏—Ç—å"
- "—Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥—É –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞"
- "—Å—Ç—Ä–∞—Å—Ç–Ω–æ —É–≤–ª–µ—á–µ–Ω"
- "—Ç–∞–∫–∂–µ —Å—Ç–æ–∏—Ç —É–ø–æ–º—è–Ω—É—Ç—å"
- "–∫—Ä–æ–º–µ —Ç–æ–≥–æ, —Ö–æ—á—É –æ—Ç–º–µ—Ç–∏—Ç—å"

–ó–ê–ú–ï–ù–ò –ù–ê –ß–ï–õ–û–í–ï–ß–ù–´–ï –í–ê–†–ò–ê–ù–¢–´:
- "–∑–∞–º–µ—Ç–∏–ª –≤–∞—à—É –≤–∞–∫–∞–Ω—Å–∏—é –∏ –ø–æ–Ω—è–ª - —ç—Ç–æ —Ç–æ, —á—Ç–æ –∏—Å–∫–∞–ª"
- "–≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–ª–µ–∫–ª–æ –≤–Ω–∏–º–∞–Ω–∏–µ"
- "–¥—É–º–∞—é, –º–æ–π –æ–ø—ã—Ç –∑–¥–µ—Å—å –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è"
- "–≤ [–∫–æ–º–ø–∞–Ω–∏—è] –º–Ω–µ –¥–æ–≤–µ–ª–æ—Å—å"
- "–∫–æ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–ª –Ω–∞–¥ [–ø—Ä–æ–µ–∫—Ç], —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å"
- "–∑–∞ X –ª–µ—Ç —Ä–∞–±–æ—Ç—ã –≤ [—Å—Ñ–µ—Ä–∞] –Ω–∞—É—á–∏–ª—Å—è"

–ü–†–ê–í–ò–õ–ê –£–õ–£–ß–®–ï–ù–ò–Ø:
1. –£–±–µ—Ä–∏ –≤—Å–µ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–µ –æ–±–æ—Ä–æ—Ç—ã
2. –î–æ–±–∞–≤—å –∂–∏–≤—ã–µ –¥–µ—Ç–∞–ª–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
3. –ó–∞–º–µ–Ω–∏ –æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
4. –°–¥–µ–ª–∞–π –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏
5. –î–æ–±–∞–≤—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–æ—Å—Ç–∞–≤–ª—è—é—â—É—é, –Ω–æ –±–µ–∑ –ø–∞—Ñ–æ—Å–∞

–¢–ï–ö–°–¢ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò:
{text}

–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –ø–æ–º–µ—Ç–æ–∫."""


# ============ –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° ============

class SmartAnalyzer:
    """–£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ GPT –ø—Ä–æ–º–ø—Ç–æ–≤"""
    
    def __init__(self, openai_service):
        self.openai = openai_service
        
    async def deep_analyze(self, vacancy_text: str, resume_text: str) -> Dict[str, Any]:
        """
        –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ GPT
        
        Args:
            vacancy_text: –¢–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏
            resume_text: –¢–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
        """
        logger.info("üîç –ù–∞—á–∏–Ω–∞—é –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ GPT...")
        
        prompt = DEEP_ANALYSIS_PROMPT.format(
            vacancy_text=vacancy_text,
            resume_text=resume_text
        )
        
        try:
            response = await self.openai.get_completion(
                prompt=prompt,
                temperature=0.3,  # –î–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                max_tokens=2000
            )
            
            if not response:
                logger.error("‚ùå –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç GPT")
                return self._get_fallback_analysis()
            
            # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç markdown –±–ª–æ–∫–æ–≤
            cleaned_response = response.strip()
            if cleaned_response.startswith('```json'):
                cleaned_response = cleaned_response[7:]  # —É–±–∏—Ä–∞–µ–º ```json
            if cleaned_response.endswith('```'):
                cleaned_response = cleaned_response[:-3]  # —É–±–∏—Ä–∞–µ–º ```
            cleaned_response = cleaned_response.strip()
            
            # –ü–∞—Ä—Å–∏–º JSON
            analysis = json.loads(cleaned_response)
            logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis.get('confidence_score', 0):.2f}")
            
            return analysis
            
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            logger.error(f"–û—Ç–≤–µ—Ç GPT: {response}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            return self._get_fallback_analysis()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            raise
    
    async def generate_human_letter(
        self, 
        analysis: Dict[str, Any], 
        style: str = "professional"
    ) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–Ω–æ–≥–æ –ø–∏—Å—å–º–∞
        
        Args:
            analysis: –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            style: –°—Ç–∏–ª—å –ø–∏—Å—å–º–∞
            
        Returns:
            –ì–æ—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ
        """
        logger.info("‚úçÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é —á–µ–ª–æ–≤–µ—á–Ω–æ–µ –ø–∏—Å—å–º–æ...")
        
        prompt = HUMAN_WRITING_PROMPT.format(
            analysis_json=json.dumps(analysis, ensure_ascii=False, indent=2),
            writing_style=style
        )
        
        try:
            response = await self.openai.get_completion(
                prompt=prompt,
                temperature=0.7,  # –î–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
                max_tokens=1500
            )
            
            if not response:
                logger.error("‚ùå –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Å—å–º–∞")
                raise Exception("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç GPT")
            
            logger.info("‚úÖ –ü–∏—Å—å–º–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
            return response.strip()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Å—å–º–∞: {e}")
            raise
    
    async def deai_text(self, text: str) -> str:
        """
        –î–µ–ò–ò-—Ñ–∏–∫–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ - —É–±–∏—Ä–∞–µ–º –ò–ò-—à—Ç–∞–º–ø—ã
        
        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            
        Returns:
            –£–ª—É—á—à–µ–Ω–Ω—ã–π —á–µ–ª–æ–≤–µ—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        logger.info("üîß –ü—Ä–∏–º–µ–Ω—è—é –¥–µ–ò–ò-—Ñ–∏–∫–∞—Ü–∏—é...")
        
        prompt = DEAI_PROMPT.format(text=text)
        
        try:
            response = await self.openai.get_completion(
                prompt=prompt,
                temperature=0.5,
                max_tokens=1500
            )
            
            if not response:
                logger.warning("‚ùå –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –¥–µ–ò–ò-—Ñ–∏–∫–∞—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞—é –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç")
                return text
            
            logger.info("‚úÖ –î–µ–ò–ò-—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return response.strip()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–ò–ò-—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
            return text
    
    async def generate_full_letter(
        self,
        vacancy_text: str,
        resume_text: str,
        style: str = "professional"
    ) -> str:
        """
        –ü–æ–ª–Ω—ã–π —Ñ–ª–æ—É: –∞–Ω–∞–ª–∏–∑ + –≥–µ–Ω–µ—Ä–∞—Ü–∏—è + –¥–µ–ò–ò-—Ñ–∏–∫–∞—Ü–∏—è
        
        Args:
            vacancy_text: –¢–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏
            resume_text: –¢–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ
            style: –°—Ç–∏–ª—å –ø–∏—Å—å–º–∞
            
        Returns:
            –ì–æ—Ç–æ–≤–æ–µ —á–µ–ª–æ–≤–µ—á–Ω–æ–µ –ø–∏—Å—å–º–æ
        """
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø–æ–ª–Ω—ã–π —Ñ–ª–æ—É v3.0...")
        
        # –≠—Ç–∞–ø 1: –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑
        analysis = await self.deep_analyze(vacancy_text, resume_text)
        
        # –≠—Ç–∞–ø 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∏—Å—å–º–∞
        letter = await self.generate_human_letter(analysis, style)
        
        # –≠—Ç–∞–ø 3: –î–µ–ò–ò-—Ñ–∏–∫–∞—Ü–∏—è
        final_letter = await self.deai_text(letter)
        
        logger.info("üéâ –ü–æ–ª–Ω—ã–π —Ñ–ª–æ—É –∑–∞–≤–µ—Ä—à–µ–Ω!")
        return final_letter
    
    def _get_fallback_analysis(self) -> Dict[str, Any]:
        """Fallback —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–æ–∫"""
        return {
            "vacancy_analysis": {
                "key_requirements": ["–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã", "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏"],
                "pain_points": ["–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–µ"],
                "priorities": ["–ö–∞—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á"],
                "company_culture": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ä–µ–¥–∞",
                "urgency_signals": [],
                "hidden_needs": ["–ù–∞–¥–µ–∂–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"]
            },
            "resume_analysis": {
                "key_skills": ["–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏", "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã"],
                "achievements": ["–£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á"],
                "unique_advantages": ["–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞"],
                "career_trajectory": "–°—Ç–∞–±–∏–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ",
                "transferable_skills": ["–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ"]
            },
            "matching_strategy": {
                "direct_matches": ["–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º"],
                "skill_gaps": [],
                "positioning": "–ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
                "value_proposition": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –∏ –æ–ø—ã—Ç",
                "specific_references": ["–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã"]
            },
            "confidence_score": 0.6
        }


# ============ –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† ============

_analyzer_instance: Optional[SmartAnalyzer] = None


def get_analyzer(openai_service=None) -> SmartAnalyzer:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    global _analyzer_instance
    
    if _analyzer_instance is None:
        if openai_service is None:
            from services.openai_service import openai_service as default_service
            openai_service = default_service
        _analyzer_instance = SmartAnalyzer(openai_service)
    
    return _analyzer_instance


async def analyze_and_generate(
    vacancy_text: str,
    resume_text: str,
    style: str = "professional",
    openai_service=None
) -> str:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ–ª–æ—É
    
    Args:
        vacancy_text: –¢–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏
        resume_text: –¢–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ  
        style: –°—Ç–∏–ª—å –ø–∏—Å—å–º–∞
        openai_service: –°–µ—Ä–≤–∏—Å OpenAI (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        –ì–æ—Ç–æ–≤–æ–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ
    """
    analyzer = get_analyzer(openai_service)
    return await analyzer.generate_full_letter(vacancy_text, resume_text, style) 