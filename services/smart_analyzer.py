"""
–£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä v3.0 - –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ GPT –ø—Ä–æ–º–ø—Ç—ã
–ü—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ –±–µ–∑ –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤
"""
import json
import logging
from typing import Dict, Any, Optional

logger = logging.getLogger(__name__)


# ============ –ü–†–û–ú–ü–¢–´ ============

DEEP_ANALYSIS_PROMPT = """–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫ –ø–æ HR –∏ —Ä–µ–∫—Ä—É—Ç–∏–Ω–≥—É. –ü—Ä–æ–≤–µ–¥–∏ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ —Ä–µ–∑—é–º–µ.

–ó–ê–î–ê–ß–ê: –ü–æ—à–∞–≥–æ–≤–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏ –≤–µ—Ä–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON

–≠–¢–ê–ü–´ –ê–ù–ê–õ–ò–ó–ê:

1. –ê–ù–ê–õ–ò–ó –í–ê–ö–ê–ù–°–ò–ò - –∏—â–∏ –ö–û–ù–ö–†–ï–¢–ù–´–ï —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:
   - –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (Python, React, Figma, Tableau, etc.)
   - –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ (Scrum, Agile, Design Thinking, OKR, etc.)
   - –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ (A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, SQL, –ª–∏–¥–µ—Ä—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥, etc.)
   - –û—Ç—Ä–∞—Å–ª–∏ –∏ –ø—Ä–æ–¥—É–∫—Ç—ã (fintech, e-commerce, SaaS, etc.)
   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (–æ–ø—ã—Ç X –ª–µ—Ç, –∫–æ–º–∞–Ω–¥–∞ Y —á–µ–ª–æ–≤–µ–∫)

2. –ê–ù–ê–õ–ò–ó –†–ï–ó–Æ–ú–ï - –∏—â–∏ –¢–û–ß–ù–´–ï —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è:
   - –¢–µ –∂–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
   - –¢–µ –∂–µ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã  
   - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å —Ü–∏—Ñ—Ä–∞–º–∏
   - –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ—Ç—Ä–∞—Å–ª–µ–≤–æ–π –æ–ø—ã—Ç
   - –°—Ö–æ–∂–∏–µ –ø—Ä–æ–µ–∫—Ç–Ω—ã–µ —Ä–æ–ª–∏

3. –ü–û–ò–°–ö –ü–†–Ø–ú–´–• –°–û–í–ü–ê–î–ï–ù–ò–ô:
   - –°–æ–ø–æ—Å—Ç–∞–≤—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ 1:1 —Å –æ–ø—ã—Ç–æ–º
   - –ò–≥–Ω–æ—Ä–∏—Ä—É–π –æ–±—â–∏–µ –Ω–∞–≤—ã–∫–∏ (–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å)
   - –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è—Ö
   - –ù–∞–π–¥–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è (—Ä–µ–¥–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –Ω–∏—à–µ–≤—ã–π –æ–ø—ã—Ç)
   - –í—ã—è–≤–∏ —Å–∞–º—ã–µ —Å–∏–ª—å–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê: —Å—Ç—Ä–æ–≥–æ JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
{{
  "vacancy_analysis": {{
    "key_requirements": ["—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ1", "—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ2"],
    "pain_points": ["–ø—Ä–æ–±–ª–µ–º–∞1", "–ø—Ä–æ–±–ª–µ–º–∞2"], 
    "priorities": ["–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç1", "–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç2"],
    "company_culture": "–æ–ø–∏—Å–∞–Ω–∏–µ –∫—É–ª—å—Ç—É—Ä—ã",
    "urgency_signals": ["—Å–∏–≥–Ω–∞–ª1", "—Å–∏–≥–Ω–∞–ª2"],
    "hidden_needs": ["—Å–∫—Ä—ã—Ç–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å1", "—Å–∫—Ä—ã—Ç–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å2"]
  }},
  "resume_analysis": {{
    "key_skills": ["–Ω–∞–≤—ã–∫1", "–Ω–∞–≤—ã–∫2"],
    "achievements": ["–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏1", "–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏2"],
    "unique_advantages": ["–£–¢–ü1", "–£–¢–ü2"],
    "career_trajectory": "–æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –ø—É—Ç–∏",
    "transferable_skills": ["–ø–µ—Ä–µ–Ω–æ—Å–∏–º—ã–π –Ω–∞–≤—ã–∫1", "–ø–µ—Ä–µ–Ω–æ—Å–∏–º—ã–π –Ω–∞–≤—ã–∫2"]
  }},
  "matching_strategy": {{
    "direct_matches": ["—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ1", "—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ2"],
    "skill_gaps": ["–ø—Ä–æ–±–µ–ª1", "–ø—Ä–æ–±–µ–ª2"],
    "positioning": "—Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
    "value_proposition": "—Ü–µ–Ω–Ω–æ—Å—Ç–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
    "specific_references": ["–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –æ—Ç—Å—ã–ª–∫–∞ –∫ –≤–∞–∫–∞–Ω—Å–∏–∏1", "–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –æ—Ç—Å—ã–ª–∫–∞ –∫ –≤–∞–∫–∞–Ω—Å–∏–∏2"]
  }},
  "confidence_score": 0.85
}}

–í–ê–ö–ê–ù–°–ò–Ø:
{vacancy_text}

–†–ï–ó–Æ–ú–ï:
{resume_text}"""


HUMAN_WRITING_PROMPT = """–¢—ã –ø–∏—à–µ—à—å —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∏—Å—å–º–∞ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ —Ä–∞–±–æ—Ç—É. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ü–µ–ø–ª—è–µ—Ç HR –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –º–µ–∂–¥—É —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∏ –æ–ø—ã—Ç–æ–º.

–ê–ù–ê–õ–ò–ó –ò–ó –ü–†–ï–î–´–î–£–©–ï–ì–û –≠–¢–ê–ü–ê:
{analysis_json}

–≠–¢–ê–ü 1: –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
‚Ä¢ –í—ã–ø–∏—à–∏ 5-7 –∫–ª—é—á–µ–≤—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏–∑ –≤–∞–∫–∞–Ω—Å–∏–∏
‚Ä¢ –î–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–π–¥–∏ –ö–û–ù–ö–†–ï–¢–ù–û–ï —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ —Ä–µ–∑—é–º–µ (–Ω–µ –æ–±—â–∏–µ —Å–ª–æ–≤–∞, –∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞–≤—ã–∫–∏/–æ–ø—ã—Ç/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã)
‚Ä¢ –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç - –ø—Ä–æ–ø—É—Å—Ç–∏ —ç—Ç–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ

–≠–¢–ê–ü 2: –°–æ–∑–¥–∞–π "–º–æ—Å—Ç—ã" –º–µ–∂–¥—É —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∏ –æ–ø—ã—Ç–æ–º
–§–æ—Ä–º–∞—Ç: "–í–∞–º –≤–∞–∂–Ω–æ X ‚Üí –£ –º–µ–Ω—è –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ Y"

–ü—Ä–∏–º–µ—Ä—ã –ü–†–ê–í–ò–õ–¨–ù–´–• —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:
‚Ä¢ "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –ø–æ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ Scrum" ‚Üí "3 –≥–æ–¥–∞ —Ä–∞–±–æ—Ç—ã —Å–æ Scrum –≤ –∫–æ–º–∞–Ω–¥–µ –∏–∑ 15 —á–µ–ª–æ–≤–µ–∫"
‚Ä¢ "–∞–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è" ‚Üí "–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Google Analytics –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ A/B —Ç–µ—Å—Ç–æ–≤"
‚Ä¢ "—Ä–∞–±–æ—Ç–∞ —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö MySQL" ‚Üí "–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ MySQL, —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ 40%"
‚Ä¢ "OKR –∏ —Ü–µ–ª–µ–ø–æ–ª–∞–≥–∞–Ω–∏–µ" ‚Üí "–≤–Ω–µ–¥—Ä–∏–ª —Å–∏—Å—Ç–µ–º—É OKR –≤ –∫–æ–º–∞–Ω–¥–µ –∏–∑ 12 —á–µ–ª–æ–≤–µ–∫, –¥–æ—Å—Ç–∏–≥–ª–∏ 95% —Ü–µ–ª–µ–π"
‚Ä¢ "—Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ" ‚Üí "—Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª 3-–ª–µ—Ç–Ω—é—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é, —É–≤–µ–ª–∏—á–∏–≤—à—É—é DAU –Ω–∞ 150%"

–ü—Ä–∏–º–µ—Ä—ã –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–• —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:
‚Ä¢ "–∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏" ‚Üí "—Ä–∞–±–æ—Ç–∞–ª –≤ –∫–æ–º–∞–Ω–¥–µ" (—Å–ª–∏—à–∫–æ–º –æ–±—â–µ–µ)
‚Ä¢ "–æ–ø—ã—Ç –ø—Ä–æ–¥–∞–∂" ‚Üí "—É–≤–µ–ª–∏—á–∏–ª –≤—ã—Ä—É—á–∫—É" (–Ω–µ—Ç –ø—Ä—è–º–æ–π —Å–≤—è–∑–∏ —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏)

–≠–¢–ê–ü 3: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∏—Å—å–º–∞

–ê–±–∑–∞—Ü 1: –ú–æ—Ç–∏–≤–∞—Ü–∏—è/–∑–∞—Ü–µ–ø–∫–∞
‚Ä¢ –ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–∞ –∫–æ–º–ø–∞–Ω–∏—è/–ø—Ä–æ–¥—É–∫—Ç –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç
‚Ä¢ –ú–æ–∂–Ω–æ —É–ø–æ–º—è–Ω—É—Ç—å 1 —Å–∞–º–æ–µ —Å–∏–ª—å–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ

–ê–±–∑–∞—Ü 2: –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
‚Ä¢ 2-3 —Å–∞–º—ã—Ö —Å–∏–ª—å–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
‚Ä¢ –ö–∞–∂–¥–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ = —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ + —Ç–≤–æ–π –æ–ø—ã—Ç + —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ü–∏—Ñ—Ä–∞–º–∏

–ê–±–∑–∞—Ü 3: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞
‚Ä¢ –ï—â–µ 2-3 —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–µ –≥–ª—É–±–∏–Ω—É –∑–Ω–∞–Ω–∏–π
‚Ä¢ –ú–µ–Ω–µ–µ –æ—á–µ–≤–∏–¥–Ω—ã–µ, –Ω–æ –≤–∞–∂–Ω—ã–µ –Ω–∞–≤—ã–∫–∏

–ê–±–∑–∞—Ü 4: –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏/–∑–≤–æ–Ω–∫–∞
‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏

–ü–†–ê–í–ò–õ–ê:
‚Ä¢ –£–±–µ—Ä–∏ –≤–æ–¥—É –∏ –∫–ª–∏—à–µ ("—Å –ø–æ–ª–Ω–æ–π –æ—Ç–¥–∞—á–µ–π", "—ç—Ç–æ —Ç–æ —á—Ç–æ –∏—Å–∫–∞–ª")
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏ —Ñ–∞–∫—Ç—ã
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 4 –∞–±–∑–∞—Ü–∞
‚Ä¢ –¢–æ–Ω - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –Ω–æ –∂–∏–≤–æ–π
‚Ä¢ –°–¢–ò–õ–¨: {writing_style}

–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ —Ä–µ–∑—é–º–µ.
–ù–∞–ø–∏—à–∏ –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."""


DEAI_PROMPT = """–ü—Ä–æ–≤–µ—Ä—å —Ç–µ–∫—Å—Ç –Ω–∞ –ò–ò-—à—Ç–∞–º–ø—ã –∏ —Å–¥–µ–ª–∞–π –µ–≥–æ –±–æ–ª–µ–µ —á–µ–ª–æ–≤–µ—á–Ω—ã–º.

–î–ï–¢–ï–ö–¢–ò–†–£–ï–ú–´–ï –ü–ê–¢–¢–ï–†–ù–´:
- "—Ö–æ—Ç–µ–ª –±—ã –≤—ã—Ä–∞–∑–∏—Ç—å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å" 
- "—Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –º–æ—é –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—É"
- "–∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–∂—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏"
- "—É–Ω–∏–∫–∞–ª—å–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –Ω–∞–≤—ã–∫–æ–≤"
- "–≥–æ—Ç–æ–≤ –≤–Ω–µ—Å—Ç–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –≤–∫–ª–∞–¥"
- "–±—É–¥—É —Ä–∞–¥ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–±—Å—É–¥–∏—Ç—å"
- "—Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥—É –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞"
- "—Å—Ç—Ä–∞—Å—Ç–Ω–æ —É–≤–ª–µ—á–µ–Ω"
- "—Ç–∞–∫–∂–µ —Å—Ç–æ–∏—Ç —É–ø–æ–º—è–Ω—É—Ç—å"
- "–∫—Ä–æ–º–µ —Ç–æ–≥–æ, —Ö–æ—á—É –æ—Ç–º–µ—Ç–∏—Ç—å"

–ó–ê–ú–ï–ù–ò –ù–ê –ß–ï–õ–û–í–ï–ß–ù–´–ï –í–ê–†–ò–ê–ù–¢–´:
- "–∑–∞–º–µ—Ç–∏–ª –≤–∞—à—É –≤–∞–∫–∞–Ω—Å–∏—é –∏ –ø–æ–Ω—è–ª - —ç—Ç–æ —Ç–æ, —á—Ç–æ –∏—Å–∫–∞–ª"
- "–≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–ª–µ–∫–ª–æ –≤–Ω–∏–º–∞–Ω–∏–µ"
- "–¥—É–º–∞—é, –º–æ–π –æ–ø—ã—Ç –∑–¥–µ—Å—å –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è"
- "–≤ [–∫–æ–º–ø–∞–Ω–∏—è] –º–Ω–µ –¥–æ–≤–µ–ª–æ—Å—å"
- "–∫–æ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–ª –Ω–∞–¥ [–ø—Ä–æ–µ–∫—Ç], —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å"
- "–∑–∞ X –ª–µ—Ç —Ä–∞–±–æ—Ç—ã –≤ [—Å—Ñ–µ—Ä–∞] –Ω–∞—É—á–∏–ª—Å—è"

–ü–†–ê–í–ò–õ–ê –£–õ–£–ß–®–ï–ù–ò–Ø:
1. –£–±–µ—Ä–∏ –≤—Å–µ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–µ –æ–±–æ—Ä–æ—Ç—ã
2. –î–æ–±–∞–≤—å –∂–∏–≤—ã–µ –¥–µ—Ç–∞–ª–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
3. –ó–∞–º–µ–Ω–∏ –æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
4. –°–¥–µ–ª–∞–π –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏
5. –î–æ–±–∞–≤—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–æ—Å—Ç–∞–≤–ª—è—é—â—É—é, –Ω–æ –±–µ–∑ –ø–∞—Ñ–æ—Å–∞

–¢–ï–ö–°–¢ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò:
{text}

–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –ø–æ–º–µ—Ç–æ–∫."""


# ============ –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° ============

class SmartAnalyzer:
    """–£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ GPT –ø—Ä–æ–º–ø—Ç–æ–≤"""
    
    def __init__(self, openai_service):
        self.openai = openai_service
        
    async def deep_analyze(self, vacancy_text: str, resume_text: str) -> Dict[str, Any]:
        """
        –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ GPT
        
        Args:
            vacancy_text: –¢–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏
            resume_text: –¢–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
        """
        logger.info("üîç –ù–∞—á–∏–Ω–∞—é –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ GPT...")
        
        prompt = DEEP_ANALYSIS_PROMPT.format(
            vacancy_text=vacancy_text,
            resume_text=resume_text
        )
        
        try:
            response = await self.openai.get_completion(
                prompt=prompt,
                temperature=0.3,  # –î–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                max_tokens=2000
            )
            
            if not response:
                logger.error("‚ùå –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç GPT")
                return self._get_fallback_analysis()
            
            # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç markdown –±–ª–æ–∫–æ–≤
            cleaned_response = response.strip()
            if cleaned_response.startswith('```json'):
                cleaned_response = cleaned_response[7:]  # —É–±–∏—Ä–∞–µ–º ```json
            if cleaned_response.endswith('```'):
                cleaned_response = cleaned_response[:-3]  # —É–±–∏—Ä–∞–µ–º ```
            cleaned_response = cleaned_response.strip()
            
            # –ü–∞—Ä—Å–∏–º JSON
            analysis = json.loads(cleaned_response)
            logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis.get('confidence_score', 0):.2f}")
            
            return analysis
            
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            logger.error(f"–û—Ç–≤–µ—Ç GPT: {response}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            return self._get_fallback_analysis()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            logger.error(f"üîç –ö–æ–Ω—Ç–µ–∫—Å—Ç: –≤–∞–∫–∞–Ω—Å–∏—è={len(vacancy_text)} —Å–∏–º–≤–æ–ª–æ–≤, —Ä–µ–∑—é–º–µ={len(resume_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –≤–º–µ—Å—Ç–æ raise –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            logger.warning("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ fallback –∞–Ω–∞–ª–∏–∑...")
            return self._get_fallback_analysis()
    
    async def generate_human_letter(
        self, 
        analysis: Dict[str, Any], 
        style: str = "professional"
    ) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–Ω–æ–≥–æ –ø–∏—Å—å–º–∞
        
        Args:
            analysis: –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            style: –°—Ç–∏–ª—å –ø–∏—Å—å–º–∞
            
        Returns:
            –ì–æ—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ
        """
        logger.info("‚úçÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é —á–µ–ª–æ–≤–µ—á–Ω–æ–µ –ø–∏—Å—å–º–æ...")
        
        prompt = HUMAN_WRITING_PROMPT.format(
            analysis_json=json.dumps(analysis, ensure_ascii=False, indent=2),
            writing_style=style
        )
        
        try:
            response = await self.openai.get_completion(
                prompt=prompt,
                temperature=0.7,  # –î–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
                max_tokens=1500
            )
            
            if not response:
                logger.error("‚ùå –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Å—å–º–∞")
                raise Exception("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç GPT")
            
            logger.info("‚úÖ –ü–∏—Å—å–º–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
            return response.strip()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Å—å–º–∞: {e}")
            raise
    
    async def deai_text(self, text: str) -> str:
        """
        –î–µ–ò–ò-—Ñ–∏–∫–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ - —É–±–∏—Ä–∞–µ–º –ò–ò-—à—Ç–∞–º–ø—ã
        
        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            
        Returns:
            –£–ª—É—á—à–µ–Ω–Ω—ã–π —á–µ–ª–æ–≤–µ—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        logger.info("üîß –ü—Ä–∏–º–µ–Ω—è—é –¥–µ–ò–ò-—Ñ–∏–∫–∞—Ü–∏—é...")
        
        prompt = DEAI_PROMPT.format(text=text)
        
        try:
            response = await self.openai.get_completion(
                prompt=prompt,
                temperature=0.5,
                max_tokens=1500
            )
            
            if not response:
                logger.warning("‚ùå –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –¥–µ–ò–ò-—Ñ–∏–∫–∞—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞—é –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç")
                return text
            
            logger.info("‚úÖ –î–µ–ò–ò-—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return response.strip()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–ò–ò-—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
            return text
    
    async def generate_full_letter(
        self,
        vacancy_text: str,
        resume_text: str,
        style: str = "professional"
    ) -> str:
        """
        –ü–æ–ª–Ω—ã–π —Ñ–ª–æ—É: –∞–Ω–∞–ª–∏–∑ + –≥–µ–Ω–µ—Ä–∞—Ü–∏—è + –¥–µ–ò–ò-—Ñ–∏–∫–∞—Ü–∏—è
        
        Args:
            vacancy_text: –¢–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏
            resume_text: –¢–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ
            style: –°—Ç–∏–ª—å –ø–∏—Å—å–º–∞
            
        Returns:
            –ì–æ—Ç–æ–≤–æ–µ —á–µ–ª–æ–≤–µ—á–Ω–æ–µ –ø–∏—Å—å–º–æ
        """
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø–æ–ª–Ω—ã–π —Ñ–ª–æ—É v3.0...")
        logger.info(f"üìä –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –≤–∞–∫–∞–Ω—Å–∏—è={len(vacancy_text)} —Å–∏–º–≤–æ–ª–æ–≤, —Ä–µ–∑—é–º–µ={len(resume_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –≠—Ç–∞–ø 1: –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑
        logger.info("üîç –≠–¢–ê–ü 1: –ù–∞—á–∏–Ω–∞—é –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑...")
        analysis = await self.deep_analyze(vacancy_text, resume_text)
        logger.info(f"‚úÖ –≠–¢–ê–ü 1 –∑–∞–≤–µ—Ä—à–µ–Ω. Confidence: {analysis.get('confidence_score', 0):.2f}")
        
        # –≠—Ç–∞–ø 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∏—Å—å–º–∞
        logger.info("‚úçÔ∏è –≠–¢–ê–ü 2: –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–∏—Å—å–º–∞...")
        letter = await self.generate_human_letter(analysis, style)
        logger.info(f"‚úÖ –≠–¢–ê–ü 2 –∑–∞–≤–µ—Ä—à–µ–Ω. –î–ª–∏–Ω–∞ –ø–∏—Å—å–º–∞: {len(letter)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –≠—Ç–∞–ø 3: –î–µ–ò–ò-—Ñ–∏–∫–∞—Ü–∏—è
        logger.info("üîß –≠–¢–ê–ü 3: –ù–∞—á–∏–Ω–∞—é –¥–µ–ò–ò-—Ñ–∏–∫–∞—Ü–∏—é...")
        final_letter = await self.deai_text(letter)
        logger.info(f"‚úÖ –≠–¢–ê–ü 3 –∑–∞–≤–µ—Ä—à–µ–Ω. –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {len(final_letter)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        logger.info("üéâ –ü–æ–ª–Ω—ã–π —Ñ–ª–æ—É –∑–∞–≤–µ—Ä—à–µ–Ω!")
        return final_letter
    
    def _get_fallback_analysis(self) -> Dict[str, Any]:
        """Fallback —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–æ–∫"""
        return {
            "vacancy_analysis": {
                "key_requirements": ["–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã", "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏"],
                "pain_points": ["–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–µ"],
                "priorities": ["–ö–∞—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á"],
                "company_culture": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ä–µ–¥–∞",
                "urgency_signals": [],
                "hidden_needs": ["–ù–∞–¥–µ–∂–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"]
            },
            "resume_analysis": {
                "key_skills": ["–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏", "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã"],
                "achievements": ["–£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á"],
                "unique_advantages": ["–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞"],
                "career_trajectory": "–°—Ç–∞–±–∏–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ",
                "transferable_skills": ["–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ"]
            },
            "matching_strategy": {
                "direct_matches": ["–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º"],
                "skill_gaps": [],
                "positioning": "–ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
                "value_proposition": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –∏ –æ–ø—ã—Ç",
                "specific_references": ["–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã"]
            },
            "confidence_score": 0.6
        }


# ============ –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† ============

_analyzer_instance: Optional[SmartAnalyzer] = None


def get_analyzer(openai_service=None) -> SmartAnalyzer:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    global _analyzer_instance
    
    if _analyzer_instance is None:
        if openai_service is None:
            from services.openai_service import openai_service as default_service
            openai_service = default_service
        _analyzer_instance = SmartAnalyzer(openai_service)
    
    return _analyzer_instance


async def analyze_and_generate(
    vacancy_text: str,
    resume_text: str,
    style: str = "professional",
    openai_service=None
) -> str:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ–ª–æ—É
    
    Args:
        vacancy_text: –¢–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏
        resume_text: –¢–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ  
        style: –°—Ç–∏–ª—å –ø–∏—Å—å–º–∞
        openai_service: –°–µ—Ä–≤–∏—Å OpenAI (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        –ì–æ—Ç–æ–≤–æ–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ
    """
    analyzer = get_analyzer(openai_service)
    return await analyzer.generate_full_letter(vacancy_text, resume_text, style) 