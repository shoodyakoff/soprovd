"""
–°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ v7.0
–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –±–µ–∑ –ø–ª–∞—Ç–µ–∂–µ–π
"""
import logging
from typing import Optional, Dict, Any
from datetime import datetime

from utils.database import SupabaseClient
from config import SUBSCRIPTIONS_ENABLED, FREE_LETTERS_LIMIT, PREMIUM_LETTERS_LIMIT
from datetime import datetime, date, timedelta

logger = logging.getLogger(__name__)

class SubscriptionService:
    def __init__(self):
        self.supabase = SupabaseClient.get_client()
        self.enabled = SUBSCRIPTIONS_ENABLED and SupabaseClient.is_available()
    
    def _parse_period_end_safely(self, period_end) -> date:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è v9.10)"""
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π None (–Ω–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –±–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ period_end)
            if period_end is None:
                logger.info("period_end is None, returning yesterday to trigger reset")
                return date.today() - timedelta(days=1)
            
            if isinstance(period_end, str):
                # –£–±–∏—Ä–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ timezone –º–∞—Ä–∫–µ—Ä—ã
                clean_date = period_end.replace('Z', '').replace('+00:00', '').replace('T', ' ')
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
                for fmt in ['%Y-%m-%d %H:%M:%S', '%Y-%m-%d']:
                    try:
                        return datetime.strptime(clean_date, fmt).date()
                    except ValueError:
                        continue
                # Fallback –Ω–∞ fromisoformat
                return datetime.fromisoformat(clean_date.split('.')[0]).date()
            else:
                return period_end.date() if hasattr(period_end, 'date') else period_end
        except (ValueError, AttributeError) as e:
            logger.error(f"Error parsing period_end date: {period_end}, error: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—á–µ—Ä–∞—à–Ω—é—é –¥–∞—Ç—É —á—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã
            return date.today() - timedelta(days=1)
        
    async def check_user_limits(self, user_id: int, force_refresh: bool = False) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
        - FREE: 3 –ø–∏—Å—å–º–∞ –≤ –º–µ—Å—è—Ü
        - PREMIUM: 20 –ø–∏—Å–µ–º –≤ –¥–µ–Ω—å
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            force_refresh: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
            
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: {
            'can_generate': bool,
            'letters_used': int,
            'letters_limit': int,
            'plan_type': str,
            'remaining': int,
            'period_type': str,
            'is_active': bool,
            'period_end': Optional[str]
        }
        """
        if not self.enabled or not self.supabase:
            logger.warning("Subscription service is disabled or Supabase client is not available.")
            return self._free_access_fallback()
        
        if force_refresh:
            logger.info(f"üîÑ Force refreshing limits for user {user_id}")
        
        try:
            response = self.supabase.table('subscriptions').select('*').eq('user_id', user_id).execute()
            
            if not response.data:
                logger.info(f"No subscription found for user {user_id}, attempting to create one.")
                from services.analytics_service import analytics
                if hasattr(analytics, 'supabase') and analytics.supabase:
                    subscription = await analytics.get_or_create_subscription(user_id)
                    if not subscription:
                        logger.error(f"Failed to create subscription for user {user_id}")
                        return self._free_access_fallback()
                    
                    response = self.supabase.table('subscriptions').select('*').eq('user_id', user_id).execute()
                    if not response.data:
                        logger.error(f"Analytics created subscription but not found in DB for user {user_id}")
                        return self._free_access_fallback()
                else:
                    logger.error(f"Analytics service or its Supabase client is not available.")
                    return self._free_access_fallback()
            
            subscription = response.data[0]
            
            letters_used = subscription.get('letters_used', 0)
            letters_limit = subscription.get('letters_limit', FREE_LETTERS_LIMIT)
            plan_type = subscription.get('plan_type', 'free')
            status = subscription.get('status', 'inactive')
            period_end = subscription.get('period_end')
            
            is_active = status == 'active'
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –ø–µ—Ä–∏–æ–¥
            today = date.today()
            period_end_date = self._parse_period_end_safely(period_end)
            
            if today > period_end_date:
                await self._reset_limits(user_id, plan_type)
                letters_used = 0
                is_active = plan_type == 'free' # Premium —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º
            
            remaining = max(0, letters_limit - letters_used)
            can_generate = remaining > 0 and is_active
            
            return {
                'can_generate': can_generate,
                'letters_used': letters_used,
                'letters_limit': letters_limit,
                'plan_type': plan_type,
                'remaining': remaining,
                'period_type': 'monthly' if plan_type == 'free' else 'daily',
                'is_active': is_active,
                'period_end': period_end
            }
            
        except Exception as e:
            logger.error(f"Error checking user limits: {e}")
            return self._free_access_fallback()
    

    
    def _free_access_fallback(self) -> Dict[str, Any]:
        """Free –¥–æ—Å—Ç—É–ø (fallback –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"""
        return {
            'can_generate': True,
            'letters_used': 0,
            'letters_limit': 3,
            'plan_type': 'free',
            'remaining': 3,
            'period_type': 'monthly'
        }
    

    
    async def _check_and_reset_period(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ —Å–±—Ä–æ—Å–∏—Ç—å –ø–µ—Ä–∏–æ–¥ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –ª–∏–º–∏—Ç–æ–≤)"""
        try:
            if not self.supabase:
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            response = self.supabase.table('subscriptions').select('*').eq('user_id', user_id).execute()
            if not response.data:
                return False
            
            subscription = response.data[0]
            plan_type = subscription['plan_type']
            period_end = subscription['period_end']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –ø–µ—Ä–∏–æ–¥
            today = date.today()
            period_end_date = self._parse_period_end_safely(period_end)
            
            if today > period_end_date:
                logger.info(f"üîÑ Period expired for user {user_id}, resetting limits")
                await self._reset_limits(user_id, plan_type)
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"Error checking period for user {user_id}: {e}")
            return False

    async def _reset_limits(self, user_id: int, plan_type: str) -> bool:
        """–°–±—Ä–æ—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞–Ω–∞"""
        try:
            if not self.supabase:
                return False
            
            today = date.today()
            
            if plan_type == 'premium':
                # Premium: –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã
                tomorrow = today + timedelta(days=1)
                period_end = tomorrow.isoformat()
                period_type = "–¥–Ω–µ–≤–Ω—ã–µ"
            else:
                # Free: –º–µ—Å—è—á–Ω—ã–µ –ª–∏–º–∏—Ç—ã
                import calendar
                # –°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
                if today.month == 12:
                    next_month = today.replace(year=today.year + 1, month=1, day=1)
                else:
                    next_month = today.replace(month=today.month + 1, day=1)
                period_end = next_month.isoformat()
                period_type = "–º–µ—Å—è—á–Ω—ã–µ"
            
            self.supabase.table('subscriptions').update({
                'letters_used': 0,
                'period_start': today.isoformat(),
                'period_end': period_end
            }).eq('user_id', user_id).execute()
            
            logger.info(f"{period_type} limits reset for user {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"Error resetting limits: {e}")
            return False
    
    async def increment_usage(self, user_id: int) -> bool:
        """
        –£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º –ê–¢–û–ú–ê–†–ù–û
        –¢–û–õ–¨–ö–û –¥–ª—è –Ω–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π, –ù–ï –¥–ª—è –∏—Ç–µ—Ä–∞—Ü–∏–π!
        """
        if not self.enabled:
            return True
            
        try:
            if not self.supabase:
                return True
            
            logger.info(f"üîÑ Attempting atomic increment for user {user_id}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ç–æ–º–∞—Ä–Ω—É—é SQL —Ñ—É–Ω–∫—Ü–∏—é
            response = self.supabase.rpc('increment_user_letters', {
                'user_id_param': user_id
            }).execute()
            
            if response.data and len(response.data) > 0:
                result = response.data[0]
                new_count = result['new_count']
                can_generate = result['can_generate']
                plan_type = result['plan_type']
                
                logger.info(f"‚úÖ Letter usage incremented atomically for user {user_id}: count={new_count}, can_generate={can_generate}, plan={plan_type}")
                return True
            else:
                logger.error(f"‚ùå No response from increment_user_letters for user {user_id}")
                return False
            
        except Exception as e:
            error_msg = str(e)
            logger.error(f"‚ùå Error in atomic increment_usage for user {user_id}: {error_msg}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –ª—É—á—à–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            if "column reference \"plan_type\" is ambiguous" in error_msg:
                logger.warning(f"‚ö†Ô∏è SQL function has ambiguous column reference - using fallback for user {user_id}")
            elif "42702" in error_msg:
                logger.warning(f"‚ö†Ô∏è PostgreSQL error 42702 (ambiguous column) - using fallback for user {user_id}")
            else:
                logger.warning(f"‚ö†Ô∏è Unknown error type - using fallback for user {user_id}")
            
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É —Ç–æ–ª—å–∫–æ –≤ –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ
            try:
                logger.info(f"üîÑ Falling back to manual increment logic for user {user_id}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
                from services.analytics_service import analytics
                subscription = await analytics.get_or_create_subscription(user_id)
                
                if subscription:
                    # –†—É—á–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
                    current_used = subscription.get('letters_used', 0)
                    new_used = current_used + 1
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
                    self.supabase.table('subscriptions').update({
                        'letters_used': new_used,
                        'updated_at': 'now()'
                    }).eq('user_id', user_id).execute()
                    
                    logger.info(f"‚úÖ Manual increment successful for user {user_id}: {current_used} -> {new_used}")
                    return True
                else:
                    logger.error(f"‚ùå No subscription found for manual increment - user {user_id}")
                    return False
                    
            except Exception as fallback_e:
                logger.error(f"‚ùå Fallback increment also failed for user {user_id}: {fallback_e}")
                return False
    
    def format_limit_message(self, limits: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ª–∏–º–∏—Ç–∞—Ö"""
        if not limits['can_generate']:
            if limits.get('error'):
                return f"‚ùå {limits['error']}"
            
            period_text = "—Å–µ–≥–æ–¥–Ω—è" if limits['period_type'] == 'daily' else "–≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ"
            reset_text = "–∑–∞–≤—Ç—Ä–∞" if limits['period_type'] == 'daily' else "–≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ"
            
            return (
                f"<b>–õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω!</b>\n\n"
                f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {limits['letters_used']}/{limits['letters_limit']} –ø–∏—Å–µ–º {period_text}\n"
                f"–ü–ª–∞–Ω: {limits['plan_type'].title()}\n"
                f"–õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—Å—è {reset_text}\n\n"
                f"<b>Premium:</b> 20 –ø–∏—Å–µ–º –≤ –¥–µ–Ω—å –∑–∞ 199‚ÇΩ/–º–µ—Å—è—Ü\n"
                f"–ù–∞–ø–∏—Å–∞—Ç—å @shoodyakoff"
            )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –ø—Ä–∏ –º–∞–ª–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ
        remaining = limits.get('remaining', 0)
        if remaining <= 5:
            period_text = "—Å–µ–≥–æ–¥–Ω—è" if limits['period_type'] == 'daily' else "–≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ"
            return (
                f"<b>–û—Å—Ç–∞—Ç–æ–∫ –ø–∏—Å–µ–º {period_text}: {remaining}</b>\n"
                f"–ü—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ –Ω–µ –∑–∞—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤ –ª–∏–º–∏—Ç"
            )
        
        return ""  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –±–æ–ª—å—à–æ–º –æ—Å—Ç–∞—Ç–∫–µ

    def format_subscription_info(self, limits: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞
        plan_name = {
            'free': '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è',
            'premium': '–ü—Ä–µ–º–∏—É–º'
        }.get(limits['plan_type'], limits['plan_type'].title())
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
        period_text = "—Å–µ–≥–æ–¥–Ω—è" if limits['period_type'] == 'daily' else "–≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Å—Ç–∞—Ç–∫–∞
        if limits['remaining'] == 0:
            emoji = "üî¥"
        elif limits['remaining'] <= 3:
            emoji = "üü°"
        else:
            emoji = "üü¢"
        
        return (
            f"<b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> {plan_name}\n"
            f"{emoji} <b>–ü–∏—Å–µ–º –æ—Å—Ç–∞–ª–æ—Å—å {period_text}:</b> {limits['remaining']}/{limits['letters_limit']}\n"
        )

    async def activate_premium_subscription(self, user_id: int, payment_id: str = None) -> bool:
        """
        –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç Premium –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            payment_id: ID –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç –ÆKassa (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º –º–∏–≥—Ä–∞—Ü–∏—é)
            
        Returns:
            True –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        try:
            if not self.supabase:
                logger.error(f"‚ùå Supabase not available for Premium activation for user {user_id}")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
            response = self.supabase.table('subscriptions').select('*').eq('user_id', user_id).execute()
            
            today = date.today()
            
            if response.data:
                # –ï—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - –ü–†–û–î–õ–ï–í–ê–ï–ú
                current_subscription = response.data[0]
                current_period_end = current_subscription.get('period_end')
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
                if current_period_end:
                    try:
                        # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
                        if isinstance(current_period_end, str):
                            current_end = datetime.fromisoformat(current_period_end.replace('Z', '+00:00')).date()
                        else:
                            current_end = current_period_end
                        
                        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞ - –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
                        if current_end > today:
                            new_period_end = current_end + timedelta(days=30)
                            logger.info(f"üîÑ Extending active Premium subscription for user {user_id}: {current_end} ‚Üí {new_period_end}")
                        else:
                            # –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ - –Ω–∞—á–∏–Ω–∞–µ–º —Å —Å–µ–≥–æ–¥–Ω—è
                            new_period_end = today + timedelta(days=30)
                            logger.info(f"üîÑ Renewing expired Premium subscription for user {user_id}: {today} ‚Üí {new_period_end}")
                            
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è Error parsing current period_end, starting fresh: {e}")
                        new_period_end = today + timedelta(days=30)
                else:
                    # –ù–µ—Ç –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è - –Ω–∞—á–∏–Ω–∞–µ–º —Å —Å–µ–≥–æ–¥–Ω—è
                    new_period_end = today + timedelta(days=30)
                    logger.info(f"üîÑ Starting new Premium subscription for user {user_id}: {today} ‚Üí {new_period_end}")
            else:
                # –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                new_period_end = today + timedelta(days=30)
                logger.info(f"üÜï Creating new Premium subscription for user {user_id}: {today} ‚Üí {new_period_end}")
            
            subscription_data = {
                'user_id': user_id,
                'plan_type': 'premium',
                'status': 'active',
                'letters_used': 0,  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏
                'letters_limit': PREMIUM_LETTERS_LIMIT,
                'period_start': today.isoformat(),
                'period_end': new_period_end.isoformat(),
                'upgraded_at': datetime.now().isoformat(),
                'updated_at': datetime.now().isoformat()
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º payment_id —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ None
            if payment_id is not None:
                subscription_data['payment_id'] = payment_id
            
            if response.data:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
                self.supabase.table('subscriptions').update(subscription_data).eq('user_id', user_id).execute()
                logger.info(f"‚úÖ Premium subscription extended for user {user_id} until {new_period_end}")
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
                subscription_data['created_at'] = datetime.now().isoformat()
                self.supabase.table('subscriptions').insert(subscription_data).execute()
                logger.info(f"‚úÖ Premium subscription created for user {user_id} until {new_period_end}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error activating Premium subscription for user {user_id}: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
subscription_service = SubscriptionService() 