"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–ª–æ—É —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Å—å–º–∞
"""
import logging
from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler
from config import (
    WAITING_JOB_DESCRIPTION, 
    WAITING_RESUME, 
    WAITING_STYLE_CHOICE,
    GENERATING
)
from utils.keyboards import get_style_keyboard
from services.openai_service import OpenAIService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å OpenAI
openai_service = OpenAIService()

async def handle_job_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏
    """
    if not update.effective_user or not update.message:
        return WAITING_JOB_DESCRIPTION
        
    user_id = update.effective_user.id
    job_description = update.message.text
    
    logger.info(f"[USER {user_id}] –°–û–°–¢–û–Ø–ù–ò–ï: WAITING_JOB_DESCRIPTION. –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏, –¥–ª–∏–Ω–∞: {len(job_description) if job_description else 0}")
    
    if not job_description or len(job_description.strip()) < 10:
        logger.warning(f"[USER {user_id}] –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏")
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)."
        )
        return WAITING_JOB_DESCRIPTION
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É –æ–±–∞ –±–ª–æ–∫–∞ (–æ–ø–∏—Å–∞–Ω–∏–µ + —Ä–µ–∑—é–º–µ)
    if len(job_description) > 2000:
        logger.warning(f"[USER {user_id}] –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ({len(job_description)} —Å–∏–º–≤–æ–ª–æ–≤). –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –≤—Å–µ —Å—Ä–∞–∑—É.")
        await update.message.reply_text(
            "–ü–æ–ª—É—á–∏–ª –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ —Ä–µ–∑—é–º–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—à–ª–∏ —Ç–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:"
        )
        return WAITING_JOB_DESCRIPTION
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    if context.user_data is not None:
        context.user_data['job_description'] = job_description.strip()
        # –û—á–∏—â–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.pop('resume', None)
        context.user_data.pop('style', None)
    
    logger.info(f"[USER {user_id}] –û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é —Ä–µ–∑—é–º–µ")
    
    await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Ç–≤–æ—ë —Ä–µ–∑—é–º–µ (—Ç–µ–∫—Å—Ç–æ–º). "
        "–ú–æ–∂–µ—à—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ —Å—é–¥–∞."
    )
    
    return WAITING_RESUME

async def handle_resume(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—é–º–µ
    """
    if not update.effective_user or not update.message:
        return WAITING_RESUME
        
    user_id = update.effective_user.id
    resume = update.message.text
    
    logger.info(f"[USER {user_id}] –°–û–°–¢–û–Ø–ù–ò–ï: WAITING_RESUME. –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ, –¥–ª–∏–Ω–∞: {len(resume) if resume else 0}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
    if not context.user_data or not context.user_data.get('job_description'):
        logger.error(f"[USER {user_id}] –ü–æ–ª—É—á–µ–Ω–æ —Ä–µ–∑—é–º–µ, –Ω–æ –Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ —Å /start"
        )
        if context.user_data:
            context.user_data.clear()
        return ConversationHandler.END
    
    if not resume or len(resume.strip()) < 20:
        logger.warning(f"[USER {user_id}] –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ")
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ä–µ–∑—é–º–µ (–º–∏–Ω–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤)."
        )
        return WAITING_RESUME
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—é–º–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    if context.user_data is not None:
        context.user_data['resume'] = resume.strip()
    
    logger.info(f"[USER {user_id}] –†–µ–∑—é–º–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
    await update.message.reply_text(
        "–ü–æ–Ω—è–ª. –ò –ø–æ—Å–ª–µ–¥–Ω–∏–π —à—Ç—Ä–∏—Ö: –∫–∞–∫–æ–π —Å—Ç–∏–ª—å –ø–∏—Å—å–º–∞ —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å?",
        reply_markup=get_style_keyboard()
    )
    
    return WAITING_STYLE_CHOICE

async def handle_text_in_style_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
    """
    if not update.message:
        return WAITING_STYLE_CHOICE
        
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å, –Ω–∞–∂–∞–≤ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –≤—ã—à–µ."
    )
    
    return WAITING_STYLE_CHOICE

async def generate_letter_content(message, context: ContextTypes.DEFAULT_TYPE, user_id: int) -> int:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ (–æ—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑ callback)
    """
    if not message or not context.user_data:
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    job_description = context.user_data.get('job_description', '')
    resume = context.user_data.get('resume', '')
    style = context.user_data.get('style', 'neutral')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
    if not job_description or not resume or not style:
        await message.reply_text(
            "–ò–∑–≤–∏–Ω–∏, –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start"
        )
        if context.user_data:
            context.user_data.clear()
        return ConversationHandler.END
    
    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∏—Å—å–º–æ
        cover_letter = await openai_service.generate_cover_letter(
            job_description=job_description,
            resume=resume,
            style=style
        )
        
        if cover_letter:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ
            await message.reply_text(cover_letter)
            await message.reply_text(
                "–ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Ç–≤–æ—ë –ø–∏—Å—å–º–æ üëá. –ù–∞–¥–µ—é—Å—å, –æ–Ω–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø–æ–ª—É—á–∏—Ç—å –∂–µ–ª–∞–µ–º—É—é —Ä–∞–±–æ—Ç—É!\n\n"
                "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start"
            )
        else:
            await message.reply_text(
                "–ò–∑–≤–∏–Ω–∏, –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. "
                "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start"
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Å—å–º–∞: {e}")
        await message.reply_text(
            "–ò–∑–≤–∏–Ω–∏, –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. "
            "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start"
        )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if context.user_data:
        context.user_data.clear()
    
    return ConversationHandler.END

async def generate_letter(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ
    """
    if not update.message or not update.effective_user or not context.user_data:
        return ConversationHandler.END
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í—Å—ë –ø–æ–ª—É—á–∏–ª. –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–∏—Å—å–º–æ...")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    return await generate_letter_content(update.message, context, update.effective_user.id)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    """
    if not update.message:
        return ConversationHandler.END
        
    await update.message.reply_text(
        "–°–æ–∑–¥–∞–Ω–∏–µ –ø–∏—Å—å–º–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start"
    )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if context.user_data:
        context.user_data.clear()
    
    return ConversationHandler.END 