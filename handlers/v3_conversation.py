"""
Handler –¥–ª—è v3.0 - —É–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —á–µ–ª–æ–≤–µ—á–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
–ü—Ä–æ—Å—Ç–æ–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
"""
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackContext, ConversationHandler
from services.smart_analyzer import analyze_and_generate
from utils.keyboards import get_main_menu

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è v3.0 (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ, –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏)
V3_VACANCY_INPUT, V3_RESUME_INPUT, V3_STYLE_SELECT = range(100, 103)

# –°—Ç–∏–ª–∏ –ø–∏—Å—å–º–∞
LETTER_STYLES = {
    "professional": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π",
    "friendly": "–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π", 
    "creative": "–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π",
    "formal": "–§–æ—Ä–º–∞–ª—å–Ω—ã–π",
    "startup": "–°—Ç–∞—Ä—Ç–∞–ø-—Å—Ç–∏–ª—å"
}


async def start_v3_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –±–µ—Å–µ–¥—ã v3.0"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º v3.0 –¥–∏–∞–ª–æ–≥")
    
    message = (
        "üéØ <b>–£–º–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä v3.0</b>\n\n"
        "–ù–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∏—Å–µ–º:\n"
        "‚Ä¢ –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ GPT\n"
        "‚Ä¢ –ß–µ–ª–æ–≤–µ—á–Ω—ã–π —Å—Ç–∏–ª—å –±–µ–∑ –ò–ò-—à—Ç–∞–º–ø–æ–≤\n"
        "‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏ –º–µ—Ç—Ä–∏–∫–∏\n\n"
        "üìù <b>–®–∞–≥ 1/3:</b> –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏"
    )
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            text=message,
            parse_mode='HTML'
        )
    elif update.message:
        await update.message.reply_text(
            text=message,
            parse_mode='HTML'
        )
    
    return V3_VACANCY_INPUT


async def handle_vacancy_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–∞–∫–∞–Ω—Å–∏–∏"""
    logger.info(f"üéØ handle_vacancy_input –≤—ã–∑–≤–∞–Ω! User: {update.effective_user.id if update.effective_user else 'unknown'}")
    
    if not update.message or not update.message.text:
        logger.warning("‚ùå handle_vacancy_input: Missing message or text")
        return V3_VACANCY_INPUT
    
    vacancy_text = update.message.text
    logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏: {len(vacancy_text)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if len(vacancy_text) < 50:
        await update.message.reply_text(
            "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏."
        )
        return V3_VACANCY_INPUT
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context.user_data['vacancy_text'] = vacancy_text
    
    logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—è: {len(vacancy_text)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    await update.message.reply_text(
        "‚úÖ –í–∞–∫–∞–Ω—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
        "üìã <b>–®–∞–≥ 2/3:</b> –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ —Ä–µ–∑—é–º–µ",
        parse_mode='HTML'
    )
    
    return V3_RESUME_INPUT


async def handle_resume_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä–µ–∑—é–º–µ"""
    logger.info(f"üìã handle_resume_input –≤—ã–∑–≤–∞–Ω! User: {update.effective_user.id if update.effective_user else 'unknown'}")
    
    if not update.message or not update.message.text:
        logger.warning("‚ùå handle_resume_input: Missing message or text")
        return V3_RESUME_INPUT
    
    resume_text = update.message.text
    logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ: {len(resume_text)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if len(resume_text) < 50:
        await update.message.reply_text(
            "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ."
        )
        return V3_RESUME_INPUT
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context.user_data['resume_text'] = resume_text
    
    logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω–æ —Ä–µ–∑—é–º–µ: {len(resume_text)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å—Ç–∏–ª—è
    keyboard = []
    for style_key, style_name in LETTER_STYLES.items():
        keyboard.append([InlineKeyboardButton(
            text=f"‚ú® {style_name}",
            callback_data=f"style_{style_key}"
        )])
    
    keyboard.append([InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞",
        callback_data="back_to_main"
    )])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "‚úÖ –†–µ–∑—é–º–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
        "üé® <b>–®–∞–≥ 3/3:</b> –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –ø–∏—Å—å–º–∞:",
        parse_mode='HTML',
        reply_markup=reply_markup
    )
    
    return V3_STYLE_SELECT


async def handle_style_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∏—Å—å–º–∞"""
    logger.info(f"üé® handle_style_selection –≤—ã–∑–≤–∞–Ω! User: {update.effective_user.id if update.effective_user else 'unknown'}")
    
    if not update.callback_query:
        logger.warning("‚ùå handle_style_selection: Missing callback_query")
        return ConversationHandler.END
    
    query = update.callback_query
    await query.answer()
    
    if not query.data:
        logger.warning("‚ùå handle_style_selection: Missing query.data")
        return ConversationHandler.END
    
    if query.data == "back_to_main":
        from handlers.start import show_main_menu
        await show_main_menu(update, context)
        return ConversationHandler.END
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∏–ª—å
    style_key = query.data.replace("style_", "")
    style_name = LETTER_STYLES.get(style_key, "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π")
    
    logger.info(f"üé® –í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å: {style_name}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if not context.user_data:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_main_menu()
        )
        return ConversationHandler.END
    
    vacancy_text = context.user_data.get('vacancy_text')
    resume_text = context.user_data.get('resume_text')
    
    if not vacancy_text or not resume_text:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_main_menu()
        )
        return ConversationHandler.END
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º
    processing_msg = await query.edit_message_text(
        f"üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–∏—Å—å–º–æ –≤ —Å—Ç–∏–ª–µ '{style_name}'...\n\n"
        "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 15-30 —Å–µ–∫—É–Ω–¥\n"
        "üß† –ü—Ä–æ–≤–æ–∂—É –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ GPT\n"
        "‚úçÔ∏è –°–æ–∑–¥–∞—é —á–µ–ª–æ–≤–µ—á–Ω—ã–π —Ç–µ–∫—Å—Ç\n"
        "üîß –£–±–∏—Ä–∞—é –ò–ò-—à—Ç–∞–º–ø—ã"
    )
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π —Ñ–ª–æ—É v3.0
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é analyze_and_generate...")
        
        cover_letter = await analyze_and_generate(
            vacancy_text=vacancy_text,
            resume_text=resume_text,
            style=style_key
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_message = (
            f"üéâ <b>–ì–æ—Ç–æ–≤–æ!</b> –ü–∏—Å—å–º–æ –≤ —Å—Ç–∏–ª–µ '{style_name}':\n\n"
            f"<code>{cover_letter}</code>\n\n"
            "üí° <i>–ü–∏—Å—å–º–æ —Å–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é —É–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ v3.0</i>"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (–ª–∏–º–∏—Ç –¢–µ–ª–µ–≥—Ä–∞–º ~4096 —Å–∏–º–≤–æ–ª–æ–≤)
        if len(result_message) > 4000:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            await query.edit_message_text(
                f"üéâ <b>–ì–æ—Ç–æ–≤–æ!</b> –ü–∏—Å—å–º–æ –≤ —Å—Ç–∏–ª–µ '{style_name}':",
                parse_mode='HTML'
            )
            
            if update.effective_chat:
                await update.effective_chat.send_message(
                    text=f"<code>{cover_letter}</code>",
                    parse_mode='HTML'
                )
                
                await update.effective_chat.send_message(
                    text="üí° <i>–ü–∏—Å—å–º–æ —Å–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é —É–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ v3.0</i>",
                    parse_mode='HTML',
                    reply_markup=get_main_menu()
                )
        else:
            await query.edit_message_text(
                text=result_message,
                parse_mode='HTML',
                reply_markup=get_main_menu()
            )
        
        logger.info("‚úÖ –ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Å—å–º–∞: {e}")
        
        await query.edit_message_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</b>\n\n"
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n"
            f"–û—à–∏–±–∫–∞: {str(e)[:100]}...",
            parse_mode='HTML',
            reply_markup=get_main_menu()
        )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if context.user_data:
        context.user_data.clear()
    
    return ConversationHandler.END


async def cancel_v3_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞ v3.0"""
    logger.info("‚ùå –î–∏–∞–ª–æ–≥ v3.0 –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    
    if context.user_data:
        context.user_data.clear()
    
    from handlers.start import show_main_menu
    await show_main_menu(update, context)
    
    return ConversationHandler.END


def get_v3_conversation_handler():
    """–°–æ–∑–¥–∞–µ—Ç ConversationHandler –¥–ª—è v3.0"""
    from telegram.ext import CommandHandler, MessageHandler, CallbackQueryHandler, filters
    
    return ConversationHandler(
        entry_points=[
            CallbackQueryHandler(start_v3_conversation, pattern='^mode_v3$')
        ],
        states={
            V3_VACANCY_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_vacancy_input)
            ],
            V3_RESUME_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_resume_input)
            ],
            V3_STYLE_SELECT: [
                CallbackQueryHandler(handle_style_selection, pattern='^style_'),
                CallbackQueryHandler(handle_style_selection, pattern='^back_to_main$')
            ]
        },
        fallbacks=[
            CommandHandler('cancel', cancel_v3_conversation),
            CommandHandler('start', cancel_v3_conversation)
        ],
        name="v3_conversation",
        persistent=False,
        per_message=False,  # False –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å MessageHandler
        per_chat=True,
        per_user=True
    ) 