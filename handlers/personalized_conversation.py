"""
–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º —Å—Ç–∏–ª—è
"""
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler

from services.profile_analyzer import analyze_profile
from services.personalized_prompt import generate_personalized_prompt
from services.openai_service import generate_letter_with_retry
from models.style_definitions import DEFAULT_STYLES

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
WAITING_JOB_DESCRIPTION = 10
WAITING_RESUME = 11
ANALYZING_AND_SUGGESTING = 12
WAITING_STYLE_CONFIRMATION = 13
GENERATING_LETTER = 14


async def start_personalized(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞"""
    if not update.effective_user or not update.message:
        return ConversationHandler.END
        
    logger.info(f"User {update.effective_user.id} started personalized flow")
    
    message = """üéØ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∏—Å–µ–º</b>

–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à—É –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –∏ —É—Ä–æ–≤–µ–Ω—å, —á—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –ø–∏—Å—å–º–∞!

<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
1Ô∏è‚É£ –í—ã –ø—Ä–∏—Å—ã–ª–∞–µ—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
2Ô∏è‚É£ –ó–∞—Ç–µ–º –≤–∞—à–µ —Ä–µ–∑—é–º–µ  
3Ô∏è‚É£ –Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—é —Å—Ç–∏–ª—å
4Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ

–ì–æ—Ç–æ–≤—ã? –ü—Ä–∏—à–ª–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ üëá"""

    await update.message.reply_text(message, parse_mode='HTML')
    return WAITING_JOB_DESCRIPTION


async def receive_job_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏"""
    logger.info(f"üî• receive_job_description –≤—ã–∑–≤–∞–Ω–∞! User: {update.effective_user.id if update.effective_user else None}")
    
    if not update.effective_user or not update.message:
        logger.error(f"‚ùå Missing data: user={update.effective_user}, message={update.message}")
        return ConversationHandler.END
        
    job_description = update.message.text.strip() if update.message.text else ""
    logger.info(f"üî• –ü–æ–ª—É—á–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª–∏–Ω–æ–π {len(job_description)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if len(job_description) < 50:
        await update.message.reply_text(
            "‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö –∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—è—Ö."
        )
        return WAITING_JOB_DESCRIPTION
    
    if len(job_description) > 4000:
        await update.message.reply_text(
            "‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return WAITING_JOB_DESCRIPTION
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data['job_description'] = job_description
    
    logger.info(f"User {update.effective_user.id} provided job description ({len(job_description)} chars)")
    
    await update.message.reply_text(
        "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à–µ —Ä–µ–∑—é–º–µ —Ç–µ–∫—Å—Ç–æ–º.\n\n"
        "üí° –ú–æ–∂–µ—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ —Å—é–¥–∞ —Ü–µ–ª–∏–∫–æ–º."
    )
    
    return WAITING_RESUME


async def receive_resume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ –∏ –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è"""
    if not update.effective_user or not update.message:
        return ConversationHandler.END
        
    resume = update.message.text.strip() if update.message.text else ""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if len(resume) < 100:
        await update.message.reply_text(
            "‚ö†Ô∏è –†–µ–∑—é–º–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ –∏ –Ω–∞–≤—ã–∫–∞—Ö."
        )
        return WAITING_RESUME
    
    if len(resume) > 6000:
        await update.message.reply_text(
            "‚ö†Ô∏è –†–µ–∑—é–º–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ 6000 —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return WAITING_RESUME
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data['resume'] = resume
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞
    analyzing_message = await update.message.reply_text(
        "üîç <b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å...</b>\n\n"
        "‚è≥ –û–ø—Ä–µ–¥–µ–ª—è—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –∏ —É—Ä–æ–≤–µ–Ω—å...",
        parse_mode='HTML'
    )
    
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        job_description = context.user_data['job_description']
        profile = analyze_profile(job_description, resume)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        context.user_data['analyzed_profile'] = profile
        
        logger.info(f"Profile analyzed for user {update.effective_user.id}: {profile.profession}/{profile.level}, confidence: {profile.confidence_score:.2f}")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
        await analyzing_message.delete()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
        await send_analysis_results(update, context, profile)
        
        return WAITING_STYLE_CONFIRMATION
        
    except Exception as e:
        logger.error(f"Error analyzing profile for user {update.effective_user.id}: {e}")
        
        await analyzing_message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start"
        )
        return ConversationHandler.END


async def send_analysis_results(update: Update, context: ContextTypes.DEFAULT_TYPE, profile):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç–∏–ª—è"""
    if not update.message:
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏  
    profession_emoji = get_profession_emoji(profile.profession)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    level_ru = get_level_russian(profile.level)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if profile.confidence_score >= 0.7:
        # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å
        message = f"""üéØ <b>–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>

{profession_emoji} <b>–ü—Ä–æ—Ñ–µ—Å—Å–∏—è:</b> {profile.profession.title()}
üìä <b>–£—Ä–æ–≤–µ–Ω—å:</b> {level_ru}
üìà <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {profile.confidence_score:.0%}

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å—Ç–∏–ª—å:</b> 
<i>"{profile.suggested_style.tone_description}"</i>

–ö–∞–∫ –ø–æ—Å—Ç—É–ø–∏–º?"""
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton("‚úÖ –û–∫–µ–π, –ø–æ–¥—Ö–æ–¥–∏—Ç", callback_data="style_accept")],
            [InlineKeyboardButton("üé® –•–æ—á—É –∫—Ä–µ–∞—Ç–∏–≤–Ω–µ–µ", callback_data="style_creative")],
            [InlineKeyboardButton("üìò –°—Ç—Ä–æ–∂–µ, —Ñ–æ—Ä–º–∞–ª—å–Ω–æ", callback_data="style_formal")]
        ]
        
    else:
        # –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å –≤—Ä—É—á–Ω—É—é
        message = f"""ü§î <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∏–ª—å</b>

{profession_emoji} <b>–ü—Ä–æ—Ñ–µ—Å—Å–∏—è:</b> {profile.profession.title() if profile.profession != 'unknown' else '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}
üìä <b>–£—Ä–æ–≤–µ–Ω—å:</b> {level_ru}

–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ç–∏–ª—å –ø–∏—Å—å–º–∞:"""
        
        keyboard = [
            [InlineKeyboardButton("‚öñÔ∏è –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å", callback_data="style_neutral")],
            [InlineKeyboardButton("üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å", callback_data="style_creative")], 
            [InlineKeyboardButton("üìò –§–æ—Ä–º–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å", callback_data="style_formal")]
        ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='HTML')


def get_profession_emoji(profession: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"""
    emoji_map = {
        "product manager": "üì±",
        "ux/ui designer": "üé®", 
        "frontend developer": "üíª",
        "backend developer": "‚öôÔ∏è",
        "qa engineer": "üîç",
        "product analyst": "üìä",
        "business analyst": "üìà",
        "marketing specialist": "üì¢",
        "cto": "üèóÔ∏è",
        "head of design": "üé®",
        "cpo": "üöÄ",
        "unknown": "ü§∑‚Äç‚ôÇÔ∏è"
    }
    return emoji_map.get(profession, "üíº")


def get_level_russian(level: str) -> str:
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —É—Ä–æ–≤–µ–Ω—å –Ω–∞ —Ä—É—Å—Å–∫–∏–π"""
    level_map = {
        "junior": "Junior",
        "middle": "Middle", 
        "senior": "Senior",
        "lead": "Lead",
        "c-level": "C-Level"
    }
    return level_map.get(level, level.title())


def get_style_name(style: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∏–ª—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º"""
    style_names = {
        "neutral": "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π",
        "creative": "–∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π",
        "confident": "—É–≤–µ—Ä–µ–Ω–Ω—ã–π",
        "formal": "—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π"
    }
    return style_names.get(style, style)


def get_profession_display(profession: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"""
    if profession == "unknown":
        return "—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å"
    
    profession_map = {
        "product manager": "Product Manager",
        "ux/ui designer": "UX/UI Designer",
        "frontend developer": "Frontend Developer",
        "backend developer": "Backend Developer",
        "qa engineer": "QA Engineer",
        "product analyst": "Product Analyst",
        "business analyst": "Business Analyst",
        "marketing specialist": "Marketing Specialist",
        "cto": "CTO",
        "head of design": "Head of Design",
        "cpo": "CPO"
    }
    return profession_map.get(profession, profession.title())


async def handle_style_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è"""
    if not update.callback_query or not update.effective_user or not update.effective_chat or not context.user_data:
        return ConversationHandler.END
        
    query = update.callback_query
    await query.answer()
    
    choice = query.data
    profile = context.user_data.get('analyzed_profile')
    
    if not profile:
        await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
        return ConversationHandler.END
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å
    if choice == "style_accept":
        final_style = profile.suggested_style
        style_name = get_style_name(profile.suggested_style.style)
    elif choice == "style_creative":
        final_style = DEFAULT_STYLES["creative"] 
        style_name = "–∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π"
    elif choice == "style_formal":
        final_style = DEFAULT_STYLES["formal"]
        style_name = "—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π"  
    elif choice == "style_neutral":
        final_style = DEFAULT_STYLES["neutral"]
        style_name = "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"
    else:
        await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return WAITING_STYLE_CONFIRMATION
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º
    profile.suggested_style = final_style
    context.user_data['analyzed_profile'] = profile
    
    logger.info(f"User {update.effective_user.id} chose {style_name} style")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await query.edit_message_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω {style_name} —Å—Ç–∏–ª—å!\n\n"
        "‚è≥ <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ...</b>",
        parse_mode='HTML'
    )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∏—Å—å–º–æ
    try:
        job_description = context.user_data['job_description']
        resume = context.user_data['resume']
        
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        personalized_prompt = generate_personalized_prompt(job_description, resume, profile)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∏—Å—å–º–æ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∏–∑ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ–º–ø—Ç–æ–≤
        from services.personalized_prompt import prompt_generator
        temperature = prompt_generator._get_temperature(profile.suggested_style)
        
        letter = await generate_letter_with_retry(
            prompt=personalized_prompt, 
            temperature=temperature
        )
        
        if letter:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_message = f"""‚úÖ <b>–í–∞—à–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –≥–æ—Ç–æ–≤–æ!</b>

<i>–°—Ç–∏–ª—å: {style_name}</i>

{letter}

üí° –ü–∏—Å—å–º–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ {get_profession_display(profile.profession)} —É—Ä–æ–≤–Ω—è {get_level_russian(profile.level)}."""

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, Telegram —Å–∞–º –æ–±—Ä–µ–∂–µ—Ç)
            try:
                await query.edit_message_text(result_message, parse_mode='HTML')
            except Exception as e:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —á–∞—Å—Ç—è–º
                logger.warning(f"Failed to send long message, splitting: {e}")
                header = f"‚úÖ <b>–í–∞—à–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –≥–æ—Ç–æ–≤–æ!</b>\n\n<i>–°—Ç–∏–ª—å: {style_name}</i>"
                await query.edit_message_text(header, parse_mode='HTML')
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ —á–µ—Ä–µ–∑ context.bot
                await context.bot.send_message(chat_id=update.effective_chat.id, text=letter)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
                footer = f"üí° –ü–∏—Å—å–º–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ {get_profession_display(profile.profession)} —É—Ä–æ–≤–Ω—è {get_level_russian(profile.level)}."
                await context.bot.send_message(chat_id=update.effective_chat.id, text=footer)
            
            logger.info(f"Personalized letter generated successfully for user {update.effective_user.id}")
            
        else:
            await query.edit_message_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Å—å–º–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start"
            )
            
    except Exception as e:
        logger.error(f"Error generating personalized letter for user {update.effective_user.id}: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Å—å–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start"
        )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    return ConversationHandler.END


async def cancel_personalized(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞"""
    if not update.effective_user or not update.message or not context.user_data:
        return ConversationHandler.END
        
    context.user_data.clear()
    await update.message.reply_text(
        "‚ùå –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
        "–î–ª—è –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
    )
    logger.info(f"User {update.effective_user.id} canceled personalized flow")
    return ConversationHandler.END 