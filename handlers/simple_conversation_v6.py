"""
Simple Conversation Handler v7.2
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: —Ç–æ–ª—å–∫–æ –ª–∞–π–∫–∏/–¥–∏–∑–ª–∞–π–∫–∏ –ë–ï–ó –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
–†–µ–ª–∏–∑–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UX
"""
import logging
import time
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery
from telegram.ext import ContextTypes, ConversationHandler
from services.smart_analyzer import generate_simple_letter, generate_improved_letter
from services.analytics_service import analytics
from services.subscription_service import subscription_service
from services.feedback_service import feedback_service
from services.acquisition_service import acquisition_service
from models.analytics_models import UserData, LetterSessionData
from models.feedback_models import LetterFeedbackData, LetterIterationImprovement
from utils.validators import InputValidator, ValidationMiddleware
from utils.keyboards import get_feedback_keyboard, get_iteration_keyboard, get_final_letter_keyboard, get_retry_keyboard, get_start_work_keyboard, get_premium_info_keyboard, get_post_generation_keyboard, get_limit_reached_keyboard, get_iteration_upsell_keyboard
from utils.database import save_user_consent, get_user_consent_status
from utils.rate_limiter import rate_limit, rate_limiter
from config import RATE_LIMITING_ENABLED, ADMIN_TELEGRAM_IDS
import asyncio

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è rate limiter (v9.2 Security)
if RATE_LIMITING_ENABLED:
    rate_limiter.set_admin_ids(ADMIN_TELEGRAM_IDS)
    logger.info(f"üîí Rate limiting enabled with {len(ADMIN_TELEGRAM_IDS)} admins")
else:
    logger.info("üîí Rate limiting disabled")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è v7.2 —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –æ—Ü–µ–Ω–æ–∫
WAITING_VACANCY, WAITING_RESUME, WAITING_IMPROVEMENT_REQUEST, WAITING_FEEDBACK = range(300, 304)

# ============================================================================
# –†–ï–õ–ò–ó–ù–ê–Ø –í–ï–†–°–ò–Ø 6.0 - –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£
# 
# ‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è —Ä–µ–ª–∏–∑–∞:
# ‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π
# ‚Ä¢ –ö–æ–º–∞–Ω–¥—ã: /help, /about, /support, /cancel, /start
# ‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ
# ‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
# ‚Ä¢ –í—Ä–µ–º—è–∑–∞–≤–∏—Å–∏–º—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
# ‚Ä¢ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
# ‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
# ‚Ä¢ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞
# ‚Ä¢ –£–±—Ä–∞–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ (/new —É–¥–∞–ª–µ–Ω)
# ============================================================================


@rate_limit('commands')
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    if update.message:
        await update.message.reply_text(
            """üöÄ <b>–ö–ê–ö –ü–û–õ–£–ß–ò–¢–¨ –†–ê–ë–û–¢–£ –ë–´–°–¢–†–ï–ï?</b>

‚ùå <b>–ü—Ä–æ–±–ª–µ–º–∞:</b> –®–∞–±–ª–æ–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç.
‚úÖ <b>–†–µ—à–µ–Ω–∏–µ:</b> –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∏—Å—å–º–∞ –ø–æ–ª—É—á–∞—é—Ç –æ—Ç–≤–µ—Ç—ã.

üéØ <b>/start</b> - –°–æ–∑–¥–∞—Ç—å –ø–∏—Å—å–º–æ-–º–∞–≥–Ω–∏—Ç –¥–ª—è HR.
üíé <b>/premium</b> - –ü–æ–ª—É—á–∏—Ç—å –≤ 7 —Ä–∞–∑ –±–æ–ª—å—à–µ –ø–∏—Å–µ–º –∏ –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ.
üìû <b>/support</b> - –°–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ–∑–¥–∞—Ç–µ–ª—è–º–∏.

‚ö° <b>–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ—Å—Ç–æ–π:</b>
1. –°–∫–∏–¥—ã–≤–∞–µ—à—å –≤–∞–∫–∞–Ω—Å–∏—é.
2. –°–∫–∏–¥—ã–≤–∞–µ—à—å —Ä–µ–∑—é–º–µ.
3. –ß–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –ø–æ–ª—É—á–∞–µ—à—å –ø–∏—Å—å–º–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ü–µ–ø–ª—è–µ—Ç.""",
            parse_mode='HTML'
        )
        

@rate_limit('commands')
async def about_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"""
    if update.message:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–∞—Å—Ç—è–º–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        await update.message.reply_text(
            """ü§ñ <b>–°–ï–ö–†–ï–¢ –ü–ò–°–ï–ú, –ö–û–¢–û–†–´–ï –ß–ò–¢–ê–Æ–¢ –î–û –ö–û–ù–¶–ê</b>

‚ùå <b>99% —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π –ø–∏—à—É—Ç —Ç–∞–∫:</b>
"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞ –≤–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è..."
(HR –∑–∞—Å—ã–ø–∞–µ—Ç –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ—á–∫–µ)

‚úÖ <b>–ú—ã –ø–∏—à–µ–º —Ç–∞–∫:</b>
"–í –≤–∞—à–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏ Junior —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –º–µ–Ω—è –∑–∞—Ü–µ–ø–∏–ª–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∑–Ω–∞–Ω–∏—è Python. –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥ —è –∫–∞–∫ —Ä–∞–∑ —Å–æ–∑–¥–∞–ª 3 –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ —ç—Ç–æ–º —Å—Ç–µ–∫–µ..."
(HR —á–∏—Ç–∞–µ—Ç –¥–∞–ª—å—à–µ!)

üî• <b>–ü–û–ß–ï–ú–£ –≠–¢–û –†–ê–ë–û–¢–ê–ï–¢:</b>
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –≤–∞–∫–∞–Ω—Å–∏–∏.
‚Ä¢ –ù–∞—Ö–æ–¥–∏–º "–∫—Ä—é—á–∫–∏", –≤–∞–∂–Ω—ã–µ –¥–ª—è HR.
‚Ä¢ –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤–∞—à–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫—É.
‚Ä¢ –†–∞–±–æ—Ç–∞–µ–º –Ω–∞ GPT-4o + Claude-3.5 –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞.

üéØ <b>–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b> —ç–∫–æ–Ω–æ–º–∏—è 2 —á–∞—Å–æ–≤ –Ω–∞ –∫–∞–∂–¥–æ–º –ø–∏—Å—å–º–µ –∏ –±–æ–ª—å—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è.""",
            parse_mode='HTML'
        )
        

@rate_limit('commands')
async def support_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    if update.message:
        await update.message.reply_text(
            """üìû <b>–ï–°–¢–¨ –í–û–ü–†–û–°? –ù–£–ñ–ù–ê –ü–û–ú–û–©–¨?</b>

üíé –•–æ—Ç–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å Premium?
üí° –ï—Å—Ç—å –∏–¥–µ—è, –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ –ª—É—á—à–µ?
üêõ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫?

‚úâÔ∏è <b>–ü–∏—à–∏—Ç–µ –Ω–∞–ø—Ä—è–º—É—é —Å–æ–∑–¥–∞—Ç–µ–ª—é:</b> @shoodyakoff

‚ö° –û—Ç–≤–µ—á–∞—é –±—ã—Å—Ç—Ä–æ –∏ –ø–æ–º–æ–≥–∞—é —Ä–µ—à–∏—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ö–∞–∂–¥–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –¥–µ–ª–∞–µ—Ç –±–æ—Ç –ª—É—á—à–µ!""",
            parse_mode='HTML'
        )


@rate_limit('commands')
async def start_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ v6.0"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥ v6.0")
    
    # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
    saved_improvement_session_id = None
    if context.user_data is not None:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–µ—Å—Å–∏–∏ —É–ª—É—á—à–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
        saved_improvement_session_id = context.user_data.get('improvement_session_id')
        
        context.user_data.clear()
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        context.user_data['conversation_state'] = 'active'
        context.user_data['initialized'] = True  # –í–°–ï–ì–î–ê —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è ConversationHandler
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID —Å–µ—Å—Å–∏–∏ —É–ª—É—á—à–µ–Ω–∏—è –µ—Å–ª–∏ –±—ã–ª, –Ω–æ –ë–ï–ó –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        if saved_improvement_session_id:
            context.user_data['improvement_session_id'] = saved_improvement_session_id
            # –ù–ï –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º in_improvement_mode - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
            logger.info(f"üîÑ Restored improvement_session_id: {saved_improvement_session_id} (without active mode)")
    
    # –¢—Ä–µ–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
    user = update.effective_user
    user_id = None
    if user:
        user_data = UserData(
            telegram_user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            language_code=user.language_code
        )
        user_id = await analytics.track_user(user_data)
        if user_id and context.user_data is not None:
            context.user_data['analytics_user_id'] = user_id
            await analytics.track_start_command(user_id)
            
            # –¢—Ä–µ–∫–∞–µ–º –∫–∞–Ω–∞–ª –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
            start_param = ' '.join(context.args) if context.args else None
            if start_param:
                await acquisition_service.track_user_acquisition(
                    user_id=user_id,
                    start_param=start_param
                )
    
    # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏
    user_name = ""
    if user and user.first_name:
        user_name = f", {user.first_name}"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    current_hour = datetime.now().hour
    if 6 <= current_hour < 12:
        time_greeting = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
    elif 12 <= current_hour < 18:
        time_greeting = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å"
    elif 18 <= current_hour < 23:
        time_greeting = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
    else:
        time_greeting = "–î–æ–±—Ä–æ–π –Ω–æ—á–∏"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏ –ª–∏ —É–∂–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
    show_full_intro = context.user_data.get('shown_full_intro', False) if context.user_data else False
    
    if not show_full_intro:
        # –ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        message = f"""
{time_greeting}, {user_name}! –£—Å—Ç–∞–ª –æ—Ç –æ—Ç–∫–∞–∑–æ–≤ –∏ —à–∞–±–ª–æ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º?

–Ø –ø–∏—à—É —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ, –æ—Ç –∫–æ—Ç–æ—Ä—ã—Ö HR –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–æ—Ä–≤–∞—Ç—å—Å—è. –Ø –∑–Ω–∞—é, —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ—Ç–æ–º—É —á—Ç–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª —Ç—ã—Å—è—á–∏ —É—Å–ø–µ—à–Ω—ã—Ö –∫–µ–π—Å–æ–≤.

<b>–ß—Ç–æ –æ—Ç —Ç–µ–±—è –Ω—É–∂–Ω–æ:</b>
1. –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏.
2. –¢–≤–æ—ë —Ä–µ–∑—é–º–µ.

–ß–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ —É —Ç–µ–±—è –±—É–¥–µ—Ç –ø–∏—Å—å–º–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–¥–µ–ª–∏—Ç —Ç–µ–±—è —Å—Ä–µ–¥–∏ —Å–æ—Ç–µ–Ω –¥—Ä—É–≥–∏—Ö.

<b>–ù–∞—á–Ω—ë–º —Å –≤–∞–∫–∞–Ω—Å–∏–∏.</b> –ü—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π —Ç–µ–∫—Å—Ç —Å HeadHunter –∏–ª–∏ —Å–∞–π—Ç–∞ –∫–æ–º–ø–∞–Ω–∏–∏.
"""
        # –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ –ø–æ–∫–∞–∑–∞–ª–∏ –ø–æ–ª–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
        if context.user_data is not None:
            context.user_data['shown_full_intro'] = True
    else:
        # –°–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
        message = f"""
{time_greeting}, {user_name}! –°–Ω–æ–≤–∞ –∑–∞ –¥–µ–ª–æ?

–î–∞–≤–∞–π –Ω–∞–ø–∏—à–µ–º –µ—â–µ –æ–¥–Ω–æ –ø–∏—Å—å–º–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏–Ω–µ—Å–µ—Ç —Ç–µ–±–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ.

<b>–ù–∞—á–Ω—ë–º —Å –≤–∞–∫–∞–Ω—Å–∏–∏.</b> –ü—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π —Ç–µ–∫—Å—Ç.
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –∏ –ª–∏–º–∏—Ç–∞—Ö
    if user_id:
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã 3)
        subscription = await analytics.get_or_create_subscription(user_id)
        if not subscription:
            logger.error(f"‚ùå Critical: Failed to create subscription for user {user_id}")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–∏–º–∏—Ç—ã –µ—Å–ª–∏ –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–µ–∫
        await subscription_service._check_and_reset_period(user_id)
        
        limits = await subscription_service.check_user_limits(user_id, force_refresh=True)
        subscription_info = subscription_service.format_subscription_info(limits)
        message += f"\n{subscription_info}\n"
    
    message += (
        "üìù <b>–®–∞–≥ 1/3:</b> –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏\n\n"
        "üí° <i>–°–æ–≤–µ—Ç: –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å —Å–∞–π—Ç–∞ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è</i>"
    )
    
    if update.callback_query:
        await update.callback_query.edit_message_text(text=message, parse_mode='HTML')
    elif update.message:
        await update.message.reply_text(text=message, parse_mode='HTML')
    
    logger.info("üîç START_CONVERSATION: –í–æ–∑–≤—Ä–∞—â–∞–µ–º WAITING_VACANCY")
    return WAITING_VACANCY


@rate_limit('commands', check_text_size=True)
@ValidationMiddleware.require_initialization
@ValidationMiddleware.require_text_message
async def handle_vacancy(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏"""
    logger.info(f"üîç HANDLE_VACANCY CALLED! Message: {update.message.text[:50] if update.message and update.message.text else 'None'}...")
    logger.info(f"üîç context.user_data keys: {list(context.user_data.keys()) if context.user_data else 'None'}")
    
    if not update.message or not update.message.text:
        logger.error("‚ùå No message or text in handle_vacancy")
        return WAITING_VACANCY
        
    vacancy_text = update.message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
    is_valid, error_msg = InputValidator.validate_vacancy_text(vacancy_text)
    if not is_valid:
        await update.message.reply_text(error_msg, parse_mode='HTML')
        return WAITING_VACANCY
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∫–∞–Ω—Å–∏—é
    if context.user_data is not None:
        context.user_data['vacancy_text'] = vacancy_text
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        user_id = context.user_data.get('analytics_user_id')
        logger.info(f"üîç RAILWAY DEBUG: handle_vacancy analytics_user_id: {user_id}")
        
        if user_id:
            logger.info(f"üîç RAILWAY DEBUG: Creating LetterSessionData for user {user_id}")
            
            try:
                session_data = LetterSessionData(
                    user_id=user_id,
                    mode="v6.0",
                    job_description=vacancy_text[:1000],  # –ü–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤
                    job_description_length=len(vacancy_text),
                    selected_style="professional"
                )
                logger.info(f"üîç RAILWAY DEBUG: LetterSessionData created successfully")
                
                session_id = await analytics.create_letter_session(session_data)
                logger.info(f"üîç RAILWAY DEBUG: create_letter_session returned: {session_id}")
                
                if session_id:
                    context.user_data['analytics_session_id'] = session_id
                    logger.info(f"üîç RAILWAY DEBUG: Calling track_vacancy_sent...")
                    await analytics.track_vacancy_sent(user_id, session_id, len(vacancy_text))
                    logger.info(f"üîç RAILWAY DEBUG: track_vacancy_sent completed")
                else:
                    logger.error(f"‚ùå RAILWAY DEBUG: create_letter_session returned None!")
                    
            except Exception as e:
                logger.error(f"‚ùå RAILWAY DEBUG: Exception in vacancy analytics: {e}")
                import traceback
                logger.error(f"‚ùå RAILWAY DEBUG: Traceback: {traceback.format_exc()}")
        else:
            logger.error(f"‚ùå RAILWAY DEBUG: No analytics_user_id found!")
    else:
        logger.error(f"‚ùå RAILWAY DEBUG: context.user_data is None!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
    user_id = None
    if context.user_data is not None:
        user_id = context.user_data.get('analytics_user_id')
    
    logger.info(f"üîç RAILWAY DEBUG: Checking consent for user_id: {user_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ —Å–æ–≥–ª–∞—Å–∏—è –≤ –ë–î
    consent_given = False
    if user_id:
        try:
            logger.info(f"üîç RAILWAY DEBUG: Calling get_user_consent_status...")
            consent_status = await get_user_consent_status(user_id)
            logger.info(f"üîç RAILWAY DEBUG: consent_status result: {consent_status}")
            if consent_status and consent_status.get('consent_given'):
                consent_given = True
                logger.info(f"üîç RAILWAY DEBUG: consent_given = True")
            else:
                logger.info(f"üîç RAILWAY DEBUG: consent_given = False")
        except Exception as e:
            logger.error(f"‚ùå Error checking consent status: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
    
    logger.info(f"üîç RAILWAY DEBUG: Final consent_given: {consent_given}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–≥–ª–∞—Å–∏—è
    if consent_given:
        # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–æ–≥–ª–∞—Å–∏–µ–º
        message_text = (
            """‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ! –í–∞–∫–∞–Ω—Å–∏—é –∏–∑—É—á–∏–ª.</b>

–£–∂–µ –≤–∏–∂—É, –Ω–∞ –∫–∞–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è HR –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∞–∫—Ü–µ–Ω—Ç –≤ –ø–∏—Å—å–º–µ.

<b>–®–∞–≥ 2 –∏–∑ 2:</b> –¢–µ–ø–µ—Ä—å —Å–∫–∏–Ω—å —Å–≤–æ—ë —Ä–µ–∑—é–º–µ.

–ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å HeadHunter –∏–ª–∏ –∏–∑ —Ñ–∞–π–ª–∞. –ß–µ–º –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π, —Ç–µ–º —Ç–æ—á–Ω–µ–µ "–≤—ã—Å—Ç—Ä–µ–ª–∏–º" –≤ —Å–µ—Ä–¥—Ü–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è."""
        )
    else:
        # –¢–µ–∫—Å—Ç —Å —Å–æ–≥–ª–∞—Å–∏–µ–º –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        message_text = (
            """‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ! –í–∞–∫–∞–Ω—Å–∏—é –∏–∑—É—á–∏–ª.</b>

–£–∂–µ –≤–∏–∂—É, –Ω–∞ –∫–∞–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è HR –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∞–∫—Ü–µ–Ω—Ç –≤ –ø–∏—Å—å–º–µ.

<b>–®–∞–≥ 2 –∏–∑ 2:</b> –¢–µ–ø–µ—Ä—å —Å–∫–∏–Ω—å —Å–≤–æ—ë —Ä–µ–∑—é–º–µ.

–ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å HeadHunter –∏–ª–∏ –∏–∑ —Ñ–∞–π–ª–∞. –ß–µ–º –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π, —Ç–µ–º —Ç–æ—á–Ω–µ–µ "–≤—ã—Å—Ç—Ä–µ–ª–∏–º" –≤ —Å–µ—Ä–¥—Ü–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è.

üí° <b>–ü—Ä–æ–¥–æ–ª–∂–∞—è —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å:</b>
‚Ä¢ üìÑ –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: https://clck.ru/3Mnzwf
‚Ä¢ üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ: https://clck.ru/3MnztY

üîí <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ù–ï —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Å—å–º–∞</b>"""
        )
    
    logger.info(f"üîç RAILWAY DEBUG: Sending message and returning WAITING_RESUME")
    await update.message.reply_text(message_text, parse_mode='HTML')
    
    logger.info(f"üîç RAILWAY DEBUG: handle_vacancy completed successfully, returning WAITING_RESUME")
    return WAITING_RESUME


@rate_limit('ai_requests', check_text_size=True)
@ValidationMiddleware.require_initialization
@ValidationMiddleware.require_text_message
async def handle_resume(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—é–º–µ –∏ –∑–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Å—å–º–∞"""
    if not update.message or not update.message.text or not update.message.from_user:
        return WAITING_RESUME

    telegram_user_id = update.message.from_user.id
    resume_text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Ä–µ–∑—é–º–µ
    is_valid, error_msg = InputValidator.validate_resume_text(resume_text)
    if not is_valid:
        await update.message.reply_text(error_msg, parse_mode='HTML')
        return WAITING_RESUME

    if context.user_data is not None:
        context.user_data['resume'] = resume_text

    # –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π user_id –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤
    analytics_user_id = context.user_data.get('analytics_user_id') if context.user_data else None
    if not analytics_user_id:
        logger.error(f"‚ùå No analytics_user_id found for telegram_user {telegram_user_id}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
        return WAITING_RESUME

    # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å max_iterations
    limits = await subscription_service.check_user_limits(analytics_user_id)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –∏—Ç–µ—Ä–∞—Ü–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞—Ä–∏—Ñ–∞
    if limits and limits.get('plan_type') == 'premium':
        max_iterations = 3  # Premium: 1 –æ—Å–Ω–æ–≤–Ω–∞—è + 2 –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∞–≤–æ–∫
    else:
        max_iterations = 2  # Free: 1 –æ—Å–Ω–æ–≤–Ω–∞—è + 1 –∏—Ç–µ—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–æ–∫

    processing_msg = await update.message.reply_text(
        """üöÄ <b>–ú–ê–ì–ò–Ø –ù–ê–ß–ê–õ–ê–°–¨!</b>

‚ö° <b>–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:</b>
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è.
- –ù–∞—Ö–æ–∂—É –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å —Ç–≤–æ–∏–º –æ–ø—ã—Ç–æ–º.
- –§–æ—Ä–º–∏—Ä—É—é —Ü–µ–ø–ª—è—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É.
- –î–æ–±–∞–≤–ª—è—é —ç–º–æ—Ü–∏—é –∏ —Ñ–∞–∫—Ç—ã.

‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å 30 —Å–µ–∫—É–Ω–¥...</b>

üíé *–°–æ–∑–¥–∞—é —Ç–æ —Å–∞–º–æ–µ –ø–∏—Å—å–º–æ, –∫–æ—Ç–æ—Ä–æ–µ HR –ø—Ä–æ—á–∏—Ç–∞–µ—Ç –¥–æ –∫–æ–Ω—Ü–∞.*""",
        parse_mode='HTML'
    )
    
    if context.user_data:
        vacancy_text = context.user_data.get('vacancy_text', '')
        asyncio.create_task(
            _process_and_respond(
                update, 
                context, 
                processing_msg, 
                analytics_user_id, 
                vacancy_text, 
                resume_text,
                max_iterations=max_iterations
            )
        )

    return WAITING_FEEDBACK

def _is_error_response(generated_letter: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç Claude –æ—à–∏–±–∫–æ–π –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    if not generated_letter or len(generated_letter.strip()) < 50:
        return True
    
    generated_lower = generated_letter.lower()
    
    # –ü—Ä—è–º—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –æ—à–∏–±–∫–∏ (–≤—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å)
    error_indicators = [
        "–Ω–µ –≤–∏–∂—É –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
        "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏",
        "–º–Ω–µ –Ω—É–∂–Ω–æ:",
        "–ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞",
        "–∏–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –Ω–µ –≤–∏–∂—É",
        "—É –º–µ–Ω—è –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ",
        "–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å",
        "—á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ"
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä—è–º—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –æ—à–∏–±–æ–∫
    for indicator in error_indicators:
        if indicator.lower() in generated_lower:
            return True
    
    # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
    question_count = generated_letter.count('?')
    if len(generated_letter) < 200 and question_count >= 2:
        return True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–±–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è)
    request_phrases = ['–Ω—É–∂–Ω–æ', '—Ç—Ä–µ–±—É–µ—Ç—Å—è', '–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ']
    request_count = sum(1 for phrase in request_phrases if phrase in generated_lower)
    if len(generated_letter) < 300 and request_count >= 2:
        return True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∏—Å—å–º–∞
    if len(generated_letter) < 150 and not any(word in generated_lower for word in ['—É–≤–∞–∂–µ–Ω–∏–µ–º', '–æ–ø—ã—Ç', '–∫–æ–º–ø–∞–Ω–∏—è', '–ø–æ–∑–∏—Ü–∏—è']):
        return True
    
    return False


async def _process_and_respond(
    update: Update, 
    context: ContextTypes.DEFAULT_TYPE, 
    processing_msg: Message, 
    user_id: int, 
    vacancy_text: str, 
    resume_text: str,
    max_iterations: int
):
    """–ü—Ä–∏–≤–∞—Ç–Ω–∞—è –∫–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    if not update.effective_user:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å effective_user –≤ _process_and_respond")
        return

    is_generation_successful = False
    generated_letter = None
    session_id = None
    iteration_status = None
    
    try:
        start_time = time.time()
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        session_data = LetterSessionData(
            user_id=user_id,
            mode="v6.0",
            job_description=vacancy_text,
            job_description_length=len(vacancy_text),
            resume_text=resume_text,
            resume_length=len(resume_text),
            max_iterations=max_iterations
        )
        session_id = await analytics.create_letter_session(session_data)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        limits = await subscription_service.check_user_limits(user_id)
        if limits and not limits.get('can_generate'):
            await processing_msg.edit_text(
                subscription_service.format_limit_message(limits),
                reply_markup=get_premium_info_keyboard()
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ session_id –Ω–µ None
        if not session_id:
            logger.error("‚ùå session_id is None, cannot proceed")
            await processing_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
            return

        generated_letter = await generate_simple_letter(vacancy_text, resume_text, user_id=user_id, session_id=session_id)
        generation_time = int(time.time() - start_time)
        
        await processing_msg.delete()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞ - –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞, –Ω–æ –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—à–∏–±–æ–∫
        is_generation_successful = bool(generated_letter) and not _is_error_response(generated_letter)

        if is_generation_successful:
            await update.effective_user.send_message(
                f"‚úçÔ∏è <b>–ü–ò–°–¨–ú–û:</b>\n\n{generated_letter}",
                parse_mode='HTML'
            )
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            await subscription_service.increment_usage(user_id)
            await analytics.update_letter_session(session_id, {
                'generated_letter': generated_letter[:2000],
                'generated_letter_length': len(generated_letter),
                'generation_time_seconds': generation_time,
                'status': 'completed'
            })
        else:
            # –î–ª—è –æ—à–∏–±–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º –æ—Ç–≤–µ—Ç Claude (—Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã)
            if generated_letter:
                await update.effective_user.send_message(
                    f"‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï:</b>\n\n{generated_letter}",
                    parse_mode='HTML'
                )
            await analytics.update_letter_session(session_id, {'status': 'failed'})

        iteration_status = await feedback_service.get_session_iteration_status(session_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏
        if is_generation_successful:
            feedback_message = f"""üéâ <b>–ü–ò–°–¨–ú–û-–ú–ê–ì–ù–ò–¢ –ì–û–¢–û–í–û! ({generation_time} —Å–µ–∫)</b>

üéØ <b>–ß—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å:</b>
- –ü–∏—Å—å–º–æ –∑–∞—Ç–æ—á–µ–Ω–æ –ø–æ–¥ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é.
- –ü–æ–¥—Å–≤–µ—á–µ–Ω—ã —Ç–≤–æ–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã.
- –î–æ–±–∞–≤–ª–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –∏—â–µ—Ç HR.

üí° <b>–ö–∞–∫ —Ç–µ–±–µ?</b>
‚Ä¢ ‚ù§Ô∏è <b>–°—É–ø–µ—Ä!</b> - –ì–æ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å.
‚Ä¢ üëé <b>–ù—É–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å</b> - –î–∞–≤–∞–π —É–ª—É—á—à–∏–º.

üöÄ *–¢–≤–æ—è –æ—Ü–µ–Ω–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ –ø–∏—Å–∞—Ç—å –µ—â–µ –∫—Ä—É—á–µ!*"""
            keyboard = get_post_generation_keyboard(session_id, iteration_status.current_iteration if iteration_status else 1)
        else:
            feedback_message = """‚ùå <b>–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫</b>

üîß <b>–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, —Ç–∞–∫–æ–µ –∏–Ω–æ–≥–¥–∞ –±—ã–≤–∞–µ—Ç:</b>
‚Ä¢ üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É - —á–∞—Å—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç
‚Ä¢ üÜï –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ - —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

üí™ <b>–ö–∞–∂–¥–∞—è –ø–æ–ø—ã—Ç–∫–∞ —É–ª—É—á—à–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç!</b>

üí° <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ —Ä–µ–∑—é–º–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏</i>"""
            keyboard = get_retry_keyboard(session_id)

        await update.effective_user.send_message(
            feedback_message,
            parse_mode='HTML',
            reply_markup=keyboard
        )

        if context.user_data:
            context.user_data['session_id_for_feedback'] = session_id
            context.user_data['session_id_for_improvement'] = session_id
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï v9.10: –°–æ—Ö—Ä–∞–Ω—è–µ–º session_id –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–∏—è
            if is_generation_successful:
                context.user_data['improvement_session_id'] = session_id
                logger.info(f"üíæ Saved improvement_session_id: {session_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ _process_and_respond: {e}", exc_info=True)
        try:
            await processing_msg.delete()
            await update.effective_user.send_message(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start —Å–Ω–æ–≤–∞."
            )
        except Exception as e_inner:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e_inner}")

    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    # return WAITING_FEEDBACK # –≠—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ create_task, —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏


async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞"""
    if context.user_data is not None:
        context.user_data.clear()
    
    if update.message:
        await update.message.reply_text(
            """‚ùå <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø–∏—Å—å–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.</b>

–ñ–∞–ª—å, —á—Ç–æ –º—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏.

–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, —è –≤—Å–µ–≥–¥–∞ –∑–¥–µ—Å—å. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ /start.

üöÄ *–ü–æ–º–Ω–∏: –∫–∞–∂–¥–æ–µ —Ö–æ—Ä–æ—à–µ–µ –ø–∏—Å—å–º–æ ‚Äî —ç—Ç–æ —à–∞–≥ –∫ —Ä–∞–±–æ—Ç–µ –º–µ—á—Ç—ã!*""",
            parse_mode='HTML'
        )
    
    return ConversationHandler.END


# ============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–ò–°–¢–ï–ú–´ –û–¶–ï–ù–û–ö –ò –ò–¢–ï–†–ê–¶–ò–ô V7.2
# –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: —Ç–æ–ª—å–∫–æ –ª–∞–π–∫–∏/–¥–∏–∑–ª–∞–π–∫–∏ –ë–ï–ó –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
# ============================================================================

async def handle_feedback_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –æ—Ü–µ–Ω–∫–∏ - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    query = update.callback_query
    if not query or not query.data:
        logger.error("‚ùå Feedback button: no query or data")
        return ConversationHandler.END
    
    logger.info(f"üîç Feedback button pressed: {query.data}")
    await query.answer()
    
    # –ü–∞—Ä—Å–∏–º callback_data: feedback_{type}_{session_id}_{iteration}
    parts = query.data.split('_')
    if len(parts) < 4:
        logger.error(f"‚ùå Invalid callback data format: {query.data}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏")
        return ConversationHandler.END
    
    feedback_type = parts[1]  # like, dislike
    session_id = parts[2]
    iteration = int(parts[3])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = None
    if context.user_data:
        user_id = context.user_data.get('analytics_user_id')
    
    if not user_id:
        logger.error("‚ùå No user_id in context.user_data")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏—Ç–µ—Ä–∞—Ü–∏–π
    iteration_status = await feedback_service.get_session_iteration_status(session_id)
    if not iteration_status:
        logger.error(f"‚ùå No iteration status for session {session_id}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return ConversationHandler.END
    
    # –°–†–ê–ó–£ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É –≤ –ë–î (–ë–ï–ó –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è)
    feedback_data = LetterFeedbackData(
        session_id=session_id,
        user_id=user_id,
        iteration_number=iteration,
        feedback_type=feedback_type
    )
    await feedback_service.save_feedback(feedback_data)
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï v9.10: –°–æ—Ö—Ä–∞–Ω—è–µ–º session_id –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–∏—è
    if context.user_data and iteration_status.can_iterate:
        context.user_data['improvement_session_id'] = session_id
        logger.info(f"üíæ Saved improvement_session_id from feedback: {session_id}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ü–µ–Ω–∫–∏
    if feedback_type == "like":
        response_text = (
            "‚ù§Ô∏è <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!</b>\n\n"
            "üôè –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à –æ—Ç–∑—ã–≤! –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –ª—É—á—à–∏–µ –ø–∏—Å—å–º–∞.\n\n"
            f"üîÑ <b>–£ –≤–∞—Å –µ—Å—Ç—å –µ—â—ë {iteration_status.remaining_iterations} –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∞–≤–æ–∫</b> "
            "–¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã –≤–∞–∫–∞–Ω—Å–∏—è-—Ä–µ–∑—é–º–µ, –∏–ª–∏ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ –¥–ª—è –¥—Ä—É–≥–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏.\n\n"
            "üí° <b>–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?</b>"
        )
    else:  # dislike
        response_text = (
            "üëé <b>–ü–æ–Ω—è—Ç–Ω–æ, –ø–∏—Å—å–º–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ.</b>\n\n"
            "üîß <b>–ú—ã –ø–æ–º–æ–∂–µ–º —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å!</b>\n\n"
            f"üîÑ <b>–û—Å—Ç–∞–ª–æ—Å—å {iteration_status.remaining_iterations} –ø–æ–ø—ã—Ç–æ–∫</b> –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —ç—Ç–æ–≥–æ –ø–∏—Å—å–º–∞.\n\n"
            "üí° <b>–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?</b>"
        )
    
    # UPSELL TOUCHPOINT - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º premium –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
    keyboard = get_iteration_upsell_keyboard(session_id, iteration_status.remaining_iterations)
    
    # –¢—Ä–µ–∫–∞–µ–º –ø–æ–∫–∞–∑ premium –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    if user_id:
        await analytics.track_premium_offer_shown(user_id, 'iteration')
    
    await query.edit_message_text(
        response_text,
        parse_mode='HTML',
        reply_markup=keyboard
    )
    
    return WAITING_FEEDBACK


async def handle_improve_letter(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–µ –ø–∏—Å—å–º–∞ - –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê"""
    query = update.callback_query
    if not query or not query.data:
        logger.error("‚ùå Improve letter: no query or data")
        return ConversationHandler.END
    
    logger.info(f"üîÑ Improve letter button pressed: {query.data}")
    
    # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
    await query.answer("üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É–ª—É—á—à–µ–Ω–∏—é...")
    
    # –ü–∞—Ä—Å–∏–º callback_data: improve_letter_{session_id}
    parts = query.data.split('_')
    if len(parts) < 3:
        logger.error(f"‚ùå Invalid improve letter callback data: {query.data}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏")
        return ConversationHandler.END
    
    session_id = parts[2]
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏—Ç–µ—Ä–∞—Ü–∏–π
    iteration_status = await feedback_service.get_session_iteration_status(session_id)
    if not iteration_status:
        logger.error(f"‚ùå No iteration status for session {session_id}")
        await query.edit_message_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ: /start",
            parse_mode='HTML'
        )
        return ConversationHandler.END
    
    if not iteration_status.can_iterate:
        logger.warning(f"‚ö†Ô∏è Cannot iterate: max iterations reached")
        await query.edit_message_text(
            "‚ùå <b>–£–ª—É—á—à–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</b>\n\n"
            f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π ({iteration_status.max_iterations})\n\n"
            "‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –ø–∏—Å—å–º–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ: /start",
            parse_mode='HTML'
        )
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º session_id –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if context.user_data:
        context.user_data['improvement_session_id'] = session_id
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï v9.10: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —É–ª—É—á—à–µ–Ω–∏—è
        context.user_data['in_improvement_mode'] = True
        logger.info(f"üîÑ Entered improvement mode for session {session_id}")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ context
        if not context.user_data.get('vacancy_text') or not context.user_data.get('resume_text'):
            logger.info("üîç –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–∏...")
            try:
                session_response = await analytics.get_letter_session_by_id(session_id)
                if session_response:
                    context.user_data['vacancy_text'] = session_response.get('job_description', '')
                    context.user_data['resume_text'] = session_response.get('resume_text', '')
                    logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Å–µ—Å—Å–∏–∏")
                else:
                    logger.error("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")
                    await query.edit_message_text(
                        "‚ùå <b>–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>\n\n"
                        "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ: /start",
                        parse_mode='HTML'
                    )
                    return ConversationHandler.END
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
                await query.edit_message_text(
                    "‚ùå <b>–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
                    "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ: /start",
                    parse_mode='HTML'
                )
                return ConversationHandler.END
    
    # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –ë–ï–ó –∫–Ω–æ–ø–æ–∫
    prompt_text = feedback_service.get_improvement_prompt_text(iteration_status.remaining_iterations)
    
    await query.edit_message_text(
        """üîÑ <b>–ü–û–ù–Ø–õ. –î–ê–í–ê–ô –°–î–ï–õ–ê–ï–ú –ï–ì–û –ò–î–ï–ê–õ–¨–ù–´–ú.</b>

–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –ø–æ–ø—Ä–∞–≤–∏—Ç—å? –ß–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ, —Ç–µ–º –ª—É—á—à–µ.

<b>–ù–∞–ø—Ä–∏–º–µ—Ä:</b>
- "–ë–æ–ª—å—à–µ –ø—Ä–æ –º–æ–π –æ–ø—ã—Ç —Å Python"
- "–°–¥–µ–ª–∞–π —Ç–æ–Ω –±–æ–ª–µ–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º"
- "–£–±–µ—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ —Ñ—Ä–∏–ª–∞–Ω—Å"

‚úçÔ∏è *–ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º...*""",
        parse_mode='HTML'
        # –ë–ï–ó reply_markup - –Ω–∏–∫–∞–∫–∏—Ö –∫–Ω–æ–ø–æ–∫!
    )
    
    return WAITING_IMPROVEMENT_REQUEST


@rate_limit('ai_requests')
async def handle_retry_generation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∏—Å—å–º–∞ —Å —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    query = update.callback_query
    if not query:
        return ConversationHandler.END
    
    await query.answer("üîÑ –ü–æ–≤—Ç–æ—Ä—è—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not context.user_data:
        await query.edit_message_text(
            "‚ùå –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Ç–µ—Ä—è–Ω—ã\n\n"
            "üîÑ –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start"
        )
        return ConversationHandler.END
    
    vacancy_text = context.user_data.get('vacancy_text')
    resume_text = context.user_data.get('resume_text')
    
    if not vacancy_text or not resume_text:
        await query.edit_message_text(
            "‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞\n\n"
            "üîÑ –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start"
        )
        return ConversationHandler.END
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await query.edit_message_text(
        "üîÑ <b>–ü–æ–≤—Ç–æ—Ä—è—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–∏—Å—å–º–∞...</b>\n\n"
        "‚è≥ –ò—Å–ø–æ–ª—å–∑—É—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
        "üéØ –°–æ–∑–¥–∞—é –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ",
        parse_mode='HTML'
    )
    
    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        from services.smart_analyzer import generate_simple_letter
        from services.analytics_service import analytics
        from services.subscription_service import subscription_service  
        from services.feedback_service import feedback_service
        from models.analytics_models import LetterSessionData
        import time
        
        # –ü–æ–ª—É—á–∞–µ–º user_id
        user_id = context.user_data.get('analytics_user_id')
        if not user_id:
            if query.message:
                await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
        session_data = LetterSessionData(
            user_id=user_id,
            job_description=vacancy_text,
            job_description_length=len(vacancy_text),
            resume_text=resume_text,
            resume_length=len(resume_text)
        )
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        session_id = await analytics.create_letter_session(session_data)
        if not session_id:
            if query.message:
                await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏")
            return ConversationHandler.END
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∏—Å—å–º–æ
        start_time = time.time()
        letter = await generate_simple_letter(
            vacancy_text=vacancy_text,
            resume_text=resume_text,
            user_id=user_id,
            session_id=session_id
        )
        generation_time = int(time.time() - start_time)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if query.message:
            await query.message.reply_text(
                f"‚úçÔ∏è <b>–ü–ò–°–¨–ú–û:</b>\n\n{letter}",
                parse_mode='HTML'
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
        is_generation_successful = (
            letter and 
            letter.strip() and 
            letter != "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Å—å–º–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑." and
            letter != "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Å—å–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑." and
            len(letter.strip()) > 50
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ context
        context.user_data['current_session_id'] = session_id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏—Ç–µ—Ä–∞—Ü–∏–π
        iteration_status = await feedback_service.get_session_iteration_status(session_id)
        
        if is_generation_successful:
            # –£—Å–ø–µ—à–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
            feedback_message = f"üéâ <b>–ü–∏—Å—å–º–æ –≥–æ—Ç–æ–≤–æ –∑–∞ {generation_time} —Å–µ–∫—É–Ω–¥!</b>\n\n"
            
            if iteration_status:
                counter_text = feedback_service.format_iteration_counter(iteration_status)
                feedback_message += f"{counter_text}\n\n"
            
            feedback_message += (
                "üí° <b>–û—Ü–µ–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n"
                "‚Ä¢ ‚ù§Ô∏è –ù—Ä–∞–≤–∏—Ç—Å—è - –æ—Ç–ª–∏—á–Ω–æ!\n"
                "‚Ä¢ üëé –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç - –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑\n\n"
                "üçÄ <i>–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –ø–∏—Å–µ–º!</i>"
            )
            
            # SOFT SELL TOUCHPOINT - –ø–æ—Å–ª–µ retry –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        keyboard = get_post_generation_keyboard(session_id, iteration_status.current_iteration if iteration_status else 1)
        
        # –¢—Ä–µ–∫–∞–µ–º –ø–æ–∫–∞–∑ premium –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if user_id:
            await analytics.track_premium_offer_shown(user_id, 'post_generation')
        else:
            # –ù–µ—É—Å–ø–µ—à–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
            feedback_message = f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∏—Å—å–º–æ</b>\n\n"
            
            if iteration_status:
                counter_text = feedback_service.format_iteration_counter(iteration_status)
                feedback_message += f"{counter_text}\n\n"
            
            feedback_message += (
                "üîß <b>–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:</b>\n"
                "‚Ä¢ üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é - –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑\n"
                "‚Ä¢ üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n\n"
                "üí° <i>–ò–Ω–æ–≥–¥–∞ –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞!</i>"
            )
            
            keyboard = get_retry_keyboard(session_id)
        
        if query.message:
            await query.message.reply_text(
                feedback_message,
                parse_mode='HTML',
                reply_markup=keyboard
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        if is_generation_successful:
            # –ù–ï —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ - —ç—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –Ω–µ –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ
            await analytics.update_letter_session(session_id, {
                'generated_letter': letter[:2000],
                'generated_letter_length': len(letter),
                'generation_time_seconds': generation_time,
                'status': 'completed'
            })
            await analytics.track_letter_generated(user_id, session_id, len(letter), generation_time)
        
        return WAITING_FEEDBACK
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        if query.message:
            await query.message.reply_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</b>\n\n"
                "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /start",
                parse_mode='HTML'
            )
        return ConversationHandler.END


@rate_limit('ai_requests', check_text_size=True)
async def handle_improvement_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–µ –ø–∏—Å—å–º–∞"""
    if not update.message or not update.message.text or not context.user_data or not update.message.from_user:
        return WAITING_IMPROVEMENT_REQUEST

    # –ü–æ–ª—É—á–∞–µ–º internal_user_id –∏–∑ context, –∞ –Ω–µ telegram_user_id –∏–∑ update
    user_id = context.user_data.get('analytics_user_id')
    if not user_id:
        logger.error("‚ùå No analytics_user_id in context for improvement request")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start")
        return ConversationHandler.END
        
    session_id = context.user_data.get('improvement_session_id')
    improvement_request = update.message.text
    
    if not session_id:
        await update.message.reply_text("‚ùå –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–∏—Å—å–º–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
        context.user_data.clear()
        return ConversationHandler.END

    iteration_status = await feedback_service.get_session_iteration_status(session_id)
    if not iteration_status or not iteration_status.can_iterate:
        await update.message.reply_text(
            "‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–∏—Å—å–º–∞. "
            "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –ø—Ä–∞–≤–æ–∫, —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ /premium –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ —á–µ—Ä–µ–∑ /start."
        )
        context.user_data.clear()
        return ConversationHandler.END

    processing_msg = await update.message.reply_text(
        "üîÑ <b>–£–ª—É—á—à–∞—é –ø–∏—Å—å–º–æ —Å —É—á–µ—Ç–æ–º –≤–∞—à–∏—Ö –ø–æ–∂–µ–ª–∞–Ω–∏–π...</b>\n\n"
        "–≠—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 20-30 —Å–µ–∫—É–Ω–¥.",
        parse_mode='HTML'
    )
    
    try:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä –∏—Ç–µ—Ä–∞—Ü–∏–∏
        await feedback_service.increment_session_iteration(session_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        iteration_status = await feedback_service.get_session_iteration_status(session_id)
        if not iteration_status:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏—Ç–µ—Ä–∞—Ü–∏–∏")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ
        start_time = time.time()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø–∏—Å—å–º–æ –∏–∑ —Å–µ—Å—Å–∏–∏
        session_response = await analytics.get_letter_session_by_id(session_id)
        previous_letter = ""
        if session_response:
            previous_letter = session_response.get('generated_letter', '')
        
        # –ü–æ–ª—É—á–∞–µ–º vacancy_text –∏–∑ context
        vacancy_text = context.user_data.get('vacancy_text', '')
        if not vacancy_text:
            logger.error("‚ùå vacancy_text not found in context")
            await processing_msg.edit_text("‚ùå –î–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start")
            return WAITING_IMPROVEMENT_REQUEST

        # Fallback –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø–∏—Å—å–º–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        if not previous_letter:
            logger.warning(f"‚ö†Ô∏è Previous letter not found for session {session_id}, using simple generation")
            improved_letter = await generate_simple_letter(
                vacancy_text=vacancy_text,
                resume_text=context.user_data.get('resume_text', ''),
                user_id=user_id,
                session_id=session_id
            )
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ —Å —É—á–µ—Ç–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            logger.info(f"üîÑ Improving letter with previous version ({len(previous_letter)} chars)")
            improved_letter = await generate_improved_letter(
                vacancy_text=vacancy_text,
                resume_text=context.user_data.get('resume_text', ''),
                previous_letter=previous_letter,
                user_feedback=improvement_request,
                improvement_request=improvement_request,
                user_id=user_id,
                session_id=session_id
            )
        
        generation_time = int(time.time() - start_time)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é
        iteration_data = LetterIterationImprovement(
            session_id=session_id,
            user_id=user_id,
            iteration_number=iteration_status.current_iteration,
            user_feedback=improvement_request,
            improvement_request=improvement_request,
            previous_letter=previous_letter[:1000] if previous_letter else ""  # –ü–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤
        )
        
        await feedback_service.save_letter_iteration(
            iteration_data, improved_letter, generation_time
        )
        
        # üìä –ê–ù–ê–õ–ò–¢–ò–ö–ê: –¢—Ä–µ–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–µ —É–ª—É—á—à–µ–Ω–∏—è –ø–∏—Å—å–º–∞
        from models.analytics_models import EventData
        
        event_data = EventData(
            user_id=user_id,
            event_type='letter_improved',
            session_id=session_id,
            event_data={
                'iteration_number': iteration_status.current_iteration,
                'improvement_length': len(improvement_request),
                'generation_time_seconds': generation_time,
                'has_previous_letter': bool(previous_letter)
            }
        )
        await analytics.track_event(event_data)
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        await processing_msg.delete()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ
        await update.message.reply_text(
            f"‚úçÔ∏è <b>–£–õ–£–ß–®–ï–ù–ù–û–ï –ü–ò–°–¨–ú–û:</b>\n\n{improved_letter}",
            parse_mode='HTML'
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–æ–≤–æ–π –æ—Ü–µ–Ω–∫–∏
        counter_text = feedback_service.format_iteration_counter(iteration_status)
        feedback_message = f"üéâ <b>–ü–∏—Å—å–º–æ —É–ª—É—á—à–µ–Ω–æ –∑–∞ {generation_time} —Å–µ–∫—É–Ω–¥!</b>\n\n{counter_text}\n\n"
        
        if iteration_status.remaining_iterations > 0:
            feedback_message += (
                "üí° <b>–û—Ü–µ–Ω–∏—Ç–µ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é:</b>\n"
                "‚Ä¢ ‚ù§Ô∏è –ù—Ä–∞–≤–∏—Ç—Å—è - –æ—Ç–ª–∏—á–Ω–æ!\n"
                "‚Ä¢ üëé –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç - –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑\n\n"
                "<b>Premium:</b> 20 –ø–∏—Å–µ–º –≤ –¥–µ–Ω—å, GPT-4o + Claude-3.5 —Ä–∞–±–æ—Ç–∞—é—Ç –≤–º–µ—Å—Ç–µ\n\n"
            )
            # SOFT SELL TOUCHPOINT - –ø–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏—è
            keyboard = get_post_generation_keyboard(session_id, iteration_status.current_iteration)
            
            # –¢—Ä–µ–∫–∞–µ–º –ø–æ–∫–∞–∑ premium –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            if user_id:
                await analytics.track_premium_offer_shown(user_id, 'post_generation')
        else:
            feedback_message += "‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ"
            keyboard = get_final_letter_keyboard()
        
        await update.message.reply_text(
            feedback_message,
            parse_mode='HTML',
            reply_markup=keyboard
        )
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï v9.10: –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —É–ª—É—á—à–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if context.user_data:
            context.user_data.pop('in_improvement_mode', None)
            logger.info("üîÑ Cleared in_improvement_mode flag after improvement completion")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –ø–∏—Å—å–º–∞: {e}")
        
        try:
            await processing_msg.delete()
        except:
            pass
        
        await update.message.reply_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –ø–∏—Å—å–º–∞</b>\n\n"
            "üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ: /start",
            parse_mode='HTML'
        )
    
    return WAITING_FEEDBACK


async def handle_accept_letter(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–∏—Å—å–º–∞"""
    query = update.callback_query
    if not query:
        logger.error("‚ùå Accept letter: no query")
        return ConversationHandler.END
    
    logger.info(f"‚úÖ Letter accepted by user: {query.data}")
    logger.info(f"üîç User ID: {query.from_user.id}")
    logger.info(f"üîç Chat ID: {query.message.chat_id if query.message else 'None'}")
    
    await query.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –£–¥–∞—á–∏ —Å —ç—Ç–∏–º –ø–∏—Å—å–º–æ–º!")
    
    await query.edit_message_text(
        "‚úÖ <b>–ü–∏—Å—å–º–æ –ø—Ä–∏–Ω—è—Ç–æ!</b>\n\n"
        "üéØ <b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b>\n"
        "‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–∏—Å—å–º–æ\n"
        "‚Ä¢ –ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é\n\n"
        "üîÑ <b>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ:</b> /start\n"
        "üí¨ <b>–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã:</b> /support\n\n"
        "üçÄ <b>–£–¥–∞—á–∏ –≤ –ø–æ–∏—Å–∫–µ —Ä–∞–±–æ—Ç—ã!</b>",
        parse_mode='HTML'
    )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if context.user_data:
        logger.info(f"üîç Clearing context.user_data with keys: {list(context.user_data.keys())}")
        context.user_data.clear()
    else:
        logger.warning("‚ö†Ô∏è context.user_data is None when accepting letter")
    
    return ConversationHandler.END


async def handle_waiting_feedback_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    if update.message:
        await update.message.reply_text(
            """üí° <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø–∏—Å—å–º–∞</b>

üëÜ <b>–ù–∞–∂–º–∏—Ç–µ:</b>
‚Ä¢ ‚ù§Ô∏è –µ—Å–ª–∏ –ø–∏—Å—å–º–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å
‚Ä¢ üëé –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å
‚Ä¢ üîÑ —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑

üÜï <b>–ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ: /start</b>

‚ö° <i>–ö–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –±—ã—Å—Ç—Ä–µ–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥!</i>""",
            parse_mode='HTML'
        )
    return WAITING_FEEDBACK


# ========================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ì–õ–ê–°–ò–Ø –ù–ê –û–ë–†–ê–ë–û–¢–ö–£ –ü–î - –£–î–ê–õ–ï–ù–´
# –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ—è–≤–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ —á–µ—Ä–µ–∑ –¥–µ–π—Å—Ç–≤–∏–µ
# ========================================


def get_conversation_handler():
    """–°–æ–∑–¥–∞–µ—Ç ConversationHandler –¥–ª—è v7.2 —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –æ—Ü–µ–Ω–æ–∫"""
    from telegram.ext import CommandHandler, MessageHandler, CallbackQueryHandler, filters
    
    return ConversationHandler(
        entry_points=[
            CommandHandler("start", start_conversation),
            CallbackQueryHandler(handle_start_work_callback, pattern=r'^start_work$')
        ],
        states={
            WAITING_VACANCY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_vacancy)
            ],
            WAITING_RESUME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_resume)
            ],
            WAITING_IMPROVEMENT_REQUEST: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_improvement_request)
            ],
            WAITING_FEEDBACK: [
                # Callback handlers –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (—Ç–æ–ª—å–∫–æ –ª–∞–π–∫–∏/–¥–∏–∑–ª–∞–π–∫–∏)
                CallbackQueryHandler(handle_feedback_button, pattern=r'^feedback_(like|dislike)_'),
                CallbackQueryHandler(handle_improve_letter, pattern=r'^improve_letter_'),
                CallbackQueryHandler(handle_retry_generation, pattern=r'^retry_generation_'),
                CallbackQueryHandler(start_conversation, pattern=r'^restart$'),
                # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_waiting_feedback_message)
            ]
        },
        fallbacks=[
            CommandHandler('cancel', cancel_conversation),
            CommandHandler('start', start_conversation)
        ],
        name="conversation_v7_2",
        persistent=False,
        per_message=False,  # False –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å MessageHandler –∏ CallbackQueryHandler
        per_chat=True,
        per_user=True
    )


def get_command_handlers():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
    from telegram.ext import CommandHandler, MessageHandler, CallbackQueryHandler, filters
    
    return [
        CommandHandler("help", help_command),
        CommandHandler("about", about_command),
        CommandHandler("support", support_command),
        # PREMIUM –∫–æ–º–∞–Ω–¥–∞ v9.3
        CommandHandler("premium", premium_command),
        # –°–ö–†–´–¢–´–ï –∫–æ–º–∞–Ω–¥—ã (–ù–ï –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –º–µ–Ω—é)
        CommandHandler("privacy", privacy_command),
        CommandHandler("terms", terms_command),
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Å—å–º–∞ –≤–Ω–µ —Å–µ—Å—Å–∏–∏
        CallbackQueryHandler(handle_start_work_callback, pattern=r'^start_work$'),
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–æ—Ç—É"
        CallbackQueryHandler(handle_back_to_bot, pattern=r'^back_to_bot$'),
        # PREMIUM CALLBACK HANDLERS v9.3
        CallbackQueryHandler(handle_premium_inquiry, pattern=r'^premium_inquiry$'),
        CallbackQueryHandler(handle_contact_support, pattern=r'^contact_support$'),
        CallbackQueryHandler(handle_premium_info, pattern=r'^premium_info$'),
        CallbackQueryHandler(handle_unlock_limits, pattern=r'^unlock_limits$'),
        CallbackQueryHandler(handle_back_to_premium, pattern=r'^back_to_premium$'),
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º!)
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message_outside_session)
    ]


# ============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô –í–ù–ï –ê–ö–¢–ò–í–ù–û–ô –°–ï–°–°–ò–ò
# ============================================================================

async def handle_message_outside_session(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Å—å–º–∞
    """
    if not update.message or not update.message.text:
        return
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ ConversationHandler
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Å—å–º–∞ - –ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if context.user_data and context.user_data.get('conversation_state'):
        logger.info(f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º outside_session handler")
        return
    
    user = update.effective_user
    user_name = f", {user.first_name}" if user and user.first_name else ""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    current_hour = datetime.now().hour
    if 6 <= current_hour < 12:
        time_greeting = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
    elif 12 <= current_hour < 18:
        time_greeting = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å"
    elif 18 <= current_hour < 23:
        time_greeting = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
    else:
        time_greeting = "–î–æ–±—Ä–æ–π –Ω–æ—á–∏"
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª
    message_text = update.message.text.lower().strip()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    if any(word in message_text for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–¥–æ–±—Ä–æ', 'hi', 'hello']):
        response_type = "greeting"
    elif any(word in message_text for word in ['–ø–æ–º–æ—â—å', 'help', '—á—Ç–æ –¥–µ–ª–∞—Ç—å', '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç']):
        response_type = "help"
    elif any(word in message_text for word in ['–ø–∏—Å—å–º–æ', '—Ä–µ–∑—é–º–µ', '–≤–∞–∫–∞–Ω—Å–∏—è', '—Å–æ–ø—Ä–æ–≤–æ–¥', '—Ä–∞–±–æ—Ç–∞']):
        response_type = "work_related"
    elif any(word in message_text for word in ['—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é', 'thanks']):
        response_type = "thanks"
    else:
        response_type = "general"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    if response_type == "greeting":
        main_text = f"{time_greeting}{user_name}! üëã\n\n–†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å!"
    elif response_type == "help":
        main_text = f"{time_greeting}{user_name}! ü§ù\n\n–ü–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –æ—Ç–ª–∏—á–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ!"
    elif response_type == "work_related":
        main_text = f"{time_greeting}{user_name}! üíº\n\n–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–±–æ—Ç—É –º–µ—á—Ç—ã!"
    elif response_type == "thanks":
        main_text = f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞{user_name}! üòä\n\n–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å!"
    else:
        main_text = f"{time_greeting}{user_name}! ü§ñ\n\n–Ø –ø–æ–º–æ–≥–∞—é —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∏—Å—å–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∏ –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –æ–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω)
    limit_info = ""
    if context.user_data and context.user_data.get('analytics_user_id'):
        user_id = context.user_data['analytics_user_id']
        try:
            limits = await subscription_service.check_user_limits(user_id)
            subscription_info = subscription_service.format_subscription_info(limits)
            limit_info = f"\n{subscription_info}"
            
            if not limits['can_generate']:
                limit_info += f"\nüö´ <b>–õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–∏—Å–µ–º –∏—Å—á–µ—Ä–ø–∞–Ω</b> ({limits['used']}/{limits['limit']})\nüíé Premium –¥–∞–µ—Ç 20 –ø–∏—Å–µ–º –≤ –¥–µ–Ω—å + –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ"
        except Exception as e:
            logger.error(f"Error checking limits in outside session: {e}")
    
    response_message = f"""
{main_text}

üéØ <b>–ß—Ç–æ —è —É–º–µ—é:</b>
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∏—Å—å–º–∞
‚Ä¢ –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Å—å–º–∞ –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
‚Ä¢ –†–∞–±–æ—Ç–∞—Ç—å –±—ã—Å—Ç—Ä–æ (30-45 —Å–µ–∫—É–Ω–¥)

üí° <b>–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:</b>
–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start{limit_info}

üöÄ <b>–ì–æ—Ç–æ–≤—ã —Å–æ–∑–¥–∞—Ç—å –ø–∏—Å—å–º–æ, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–º–µ—Ç—è—Ç?</b>
"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º premium –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω
    if context.user_data and context.user_data.get('analytics_user_id'):
        user_id = context.user_data['analytics_user_id']
        try:
            limits = await subscription_service.check_user_limits(user_id)
            if not limits['can_generate']:
                # –ì–õ–ê–í–ù–´–ô TOUCHPOINT - –ø—Ä–∏ –∏—Å—á–µ—Ä–ø–∞–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
                from utils.keyboards import get_limit_reached_keyboard
                keyboard = get_limit_reached_keyboard()
                
                # –¢—Ä–µ–∫–∞–µ–º –ø–æ–∫–∞–∑ premium –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                await analytics.track_premium_offer_shown(user_id, 'limit_reached')
            else:
                keyboard = get_start_work_keyboard()
        except Exception as e:
            logger.error(f"Error checking limits for keyboard: {e}")
            keyboard = get_start_work_keyboard()
    else:
        keyboard = get_start_work_keyboard()
    
    await update.message.reply_text(
        response_message,
        parse_mode='HTML',
        reply_markup=keyboard
    )


# ============================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ============================================================================

@rate_limit('commands')
async def handle_start_work_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–æ–∑–¥–∞—Ç—å –ø–∏—Å—å–º–æ' –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–Ω–µ —Å–µ—Å—Å–∏–∏"""
    query = update.callback_query
    if not query:
        return ConversationHandler.END
    
    await query.answer("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∏—Å—å–º–∞!")
    
    logger.info("üîç START_WORK_CALLBACK: –í—ã–∑—ã–≤–∞–µ–º start_conversation...")
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–ª–æ—É —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Å—å–º–∞
    result = await start_conversation(update, context)
    logger.info(f"üîç START_WORK_CALLBACK: start_conversation returned {result}")
    return result


# ========================================
# –°–ö–†–´–¢–´–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –Æ–†–ò–î–ò–ß–ï–°–ö–ò–• –î–û–ö–£–ú–ï–ù–¢–û–í
# ========================================

async def privacy_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–∫—Ä—ã—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"""
    if not update.message:
        return
    
    try:
        # –ß–∏—Ç–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ —Ñ–∞–π–ª–∞
        with open('docs/legal/privacy_policy.md', 'r', encoding='utf-8') as f:
            privacy_content = f.read()
        
        # –£–±–∏—Ä–∞–µ–º markdown –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º–æ–≥–æ –≤–∏–¥–∞ –≤ Telegram
        privacy_text = privacy_content.replace('# ', '').replace('## ', '').replace('### ', '')
        
        # Telegram –ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤ - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        max_length = 4000  # –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        
        if len(privacy_text) <= max_length:
            # –¢–µ–∫—Å—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–æ—Ç—É", callback_data="back_to_bot")]
            ])
            
            await update.message.reply_text(
                f"üìÑ <b>–ü–û–õ–ò–¢–ò–ö–ê –ö–û–ù–§–ò–î–ï–ù–¶–ò–ê–õ–¨–ù–û–°–¢–ò</b>\n\n{privacy_text}",
                parse_mode='HTML',
                reply_markup=keyboard
            )
        else:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            parts = []
            current_part = ""
            
            for line in privacy_text.split('\n'):
                if len(current_part + line + '\n') <= max_length:
                    current_part += line + '\n'
                else:
                    if current_part:
                        parts.append(current_part.strip())
                    current_part = line + '\n'
            
            if current_part:
                parts.append(current_part.strip())
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–æ–π
            if parts:
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–æ—Ç—É", callback_data="back_to_bot")]
                ])
                
                await update.message.reply_text(
                    f"üìÑ <b>–ü–û–õ–ò–¢–ò–ö–ê –ö–û–ù–§–ò–î–ï–ù–¶–ò–ê–õ–¨–ù–û–°–¢–ò</b>\n<i>(—á–∞—Å—Ç—å 1 –∏–∑ {len(parts)})</i>\n\n{parts[0]}",
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                for i, part in enumerate(parts[1:], 2):
                    await update.message.reply_text(
                        f"üìÑ <b>–ü–û–õ–ò–¢–ò–ö–ê –ö–û–ù–§–ò–î–ï–ù–¶–ò–ê–õ–¨–ù–û–°–¢–ò</b>\n<i>(—á–∞—Å—Ç—å {i} –∏–∑ {len(parts)})</i>\n\n{part}",
                        parse_mode='HTML'
                    )
        
    except FileNotFoundError:
        await update.message.reply_text(
            "‚ùå <b>–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</b>\n\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: /support",
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"‚ùå Error showing privacy policy: {e}")
        await update.message.reply_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª–∏—Ç–∏–∫–∏</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: /support",
            parse_mode='HTML'
        )


async def terms_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–∫—Ä—ã—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è"""
    if not update.message:
        return
    
    try:
        # –ß–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞
        with open('docs/legal/terms_of_service.md', 'r', encoding='utf-8') as f:
            terms_content = f.read()
        
        # –£–±–∏—Ä–∞–µ–º markdown –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º–æ–≥–æ –≤–∏–¥–∞ –≤ Telegram
        terms_text = terms_content.replace('# ', '').replace('## ', '').replace('### ', '')
        
        # Telegram –ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤ - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏  
        max_length = 4000  # –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        
        if len(terms_text) <= max_length:
            # –¢–µ–∫—Å—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–æ—Ç—É", callback_data="back_to_bot")]
            ])
            
            await update.message.reply_text(
                f"üìã <b>–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ï –°–û–ì–õ–ê–®–ï–ù–ò–ï</b>\n\n{terms_text}",
                parse_mode='HTML',
                reply_markup=keyboard
            )
        else:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            parts = []
            current_part = ""
            
            for line in terms_text.split('\n'):
                if len(current_part + line + '\n') <= max_length:
                    current_part += line + '\n'
                else:
                    if current_part:
                        parts.append(current_part.strip())
                    current_part = line + '\n'
            
            if current_part:
                parts.append(current_part.strip())
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–æ–π
            if parts:
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–æ—Ç—É", callback_data="back_to_bot")]
                ])
                
                await update.message.reply_text(
                    f"üìã <b>–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ï –°–û–ì–õ–ê–®–ï–ù–ò–ï</b>\n<i>(—á–∞—Å—Ç—å 1 –∏–∑ {len(parts)})</i>\n\n{parts[0]}",
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                for i, part in enumerate(parts[1:], 2):
                    await update.message.reply_text(
                        f"üìã <b>–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ï –°–û–ì–õ–ê–®–ï–ù–ò–ï</b>\n<i>(—á–∞—Å—Ç—å {i} –∏–∑ {len(parts)})</i>\n\n{part}",
                        parse_mode='HTML'
                    )
        
    except FileNotFoundError:
        await update.message.reply_text(
            "‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</b>\n\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: /support",
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"‚ùå Error showing terms of service: {e}")
        await update.message.reply_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: /support",
            parse_mode='HTML'
        )


async def handle_back_to_bot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–æ—Ç—É' (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ v9.11)"""
    query = update.callback_query
    if not query:
        return
    
    await query.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –±–æ—Ç—É...")
    
    in_improvement_mode = context.user_data.get('in_improvement_mode') if context.user_data else False
    improvement_session_id = context.user_data.get('improvement_session_id') if context.user_data else None
    
    # –°–õ–£–ß–ê–ô 1: –ê–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —É–ª—É—á—à–µ–Ω–∏—è
    if in_improvement_mode and improvement_session_id:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —ç–∫—Ä–∞–Ω—É —É–ª—É—á—à–µ–Ω–∏—è –ø–∏—Å—å–º–∞
        from services.feedback_service import feedback_service
        
        try:
            iteration_status = await feedback_service.get_session_iteration_status(improvement_session_id)
            if iteration_status and iteration_status.can_iterate:
                await query.edit_message_text(
                    """üîÑ <b>–ü–û–ù–Ø–õ. –î–ê–í–ê–ô –°–î–ï–õ–ê–ï–ú –ï–ì–û –ò–î–ï–ê–õ–¨–ù–´–ú.</b>

–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –ø–æ–ø—Ä–∞–≤–∏—Ç—å? –ß–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ, —Ç–µ–º –ª—É—á—à–µ.

<b>–ù–∞–ø—Ä–∏–º–µ—Ä:</b>
- "–ë–æ–ª—å—à–µ –ø—Ä–æ –º–æ–π –æ–ø—ã—Ç —Å Python"
- "–°–¥–µ–ª–∞–π —Ç–æ–Ω –±–æ–ª–µ–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º"
- "–£–±–µ—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ —Ñ—Ä–∏–ª–∞–Ω—Å"

‚úçÔ∏è *–ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º...*""",
                    parse_mode='HTML'
                )
                logger.info(f"üîÑ Returned to improvement screen for session {improvement_session_id}")
                return
        except Exception as e:
            logger.error(f"Error returning to improvement screen: {e}")
    
    # –°–õ–£–ß–ê–ô 2: –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –ø–∏—Å—å–º–∞ (–ù–û –ù–ï –≤ —Ä–µ–∂–∏–º–µ —É–ª—É—á—à–µ–Ω–∏—è)
    if improvement_session_id:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —ç–∫—Ä–∞–Ω—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ü–µ–Ω–∫–∏ –ø–∏—Å—å–º–∞
        from services.feedback_service import feedback_service
        
        try:
            iteration_status = await feedback_service.get_session_iteration_status(improvement_session_id)
            if iteration_status:
                feedback_message = f"""‚ù§Ô∏è <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!</b>

üôè –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à –æ—Ç–∑—ã–≤! –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –ª—É—á—à–∏–µ –ø–∏—Å—å–º–∞.

üîÑ <b>–£ –≤–∞—Å –µ—Å—Ç—å –µ—â—ë {iteration_status.remaining_iterations} –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∞–≤–æ–∫</b> –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã –≤–∞–∫–∞–Ω—Å–∏—è-—Ä–µ–∑—é–º–µ, –∏–ª–∏ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ –¥–ª—è –¥—Ä—É–≥–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏.

üí° <b>–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?</b>"""
                
                keyboard = get_iteration_upsell_keyboard(improvement_session_id, iteration_status.remaining_iterations)
                
                await query.edit_message_text(
                    feedback_message,
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
                logger.info(f"üîÑ Returned to feedback screen for session {improvement_session_id}")
                return
        except Exception as e:
            logger.error(f"Error returning to feedback screen: {e}")
    
    # –°–õ–£–ß–ê–ô 3: –û–±—ã—á–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É —ç–∫—Ä–∞–Ω—É
    await query.edit_message_text(
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!</b>\n\n"
        "üéØ <b>–ì–æ—Ç–æ–≤—ã —Å–æ–∑–¥–∞—Ç—å —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ?</b>\n\n"
        "üí° –ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å",
        parse_mode='HTML'
    )


# ============================================================================
# MONETIZATION HANDLERS v9.3
# ============================================================================

async def premium_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /premium - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Premium –ø–æ–¥–ø–∏—Å–∫–µ"""
    if not update.message:
        return
    
    user = update.effective_user
    user_id = None
    if user:
        user_id = await analytics.get_user_id(user.id)
        if user_id:
            await analytics.track_premium_info_viewed(user_id, source='command')
    
    premium_text = """
<b>–ì–õ–ê–í–ù–´–ô –ó–ê–ö–û–ù –ù–ê–ô–ú–ê: –£–ù–ò–ö–ê–õ–¨–ù–´–ï –ü–ò–°–¨–ú–ê ‚Üí –ë–û–õ–¨–®–ï –°–û–ë–ï–°–ï–î–û–í–ê–ù–ò–ô</b>

–†–∞—Å—Å—ã–ª–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–∏—Å—å–º–∞ –≤ –∫–∞–∂–¥—É—é –∫–æ–º–ø–∞–Ω–∏—é –Ω–µ—Ä–µ–∞–ª—å–Ω–æ —Ç—è–∂–µ–ª–æ. –ï—â—ë —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–µ–ª–∞—Ç—å, —Å–æ–±–µ—Å–µ–¥–æ–≤–∞—Ç—å—Å—è. –ê –∂–∏—Ç—å –∫–æ–≥–¥–∞?

–ú—ã —Å–¥–µ–ª–∞–ª–∏ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–∏—à–µ—Ç —á–µ–ª–æ–≤–µ—á–Ω—ã–µ –ø–∏—Å—å–º–∞ –∑–∞ —Ç–µ–±—è. –û–±—É—á–µ–Ω –Ω–∞ –ø—Ä–æ–º–ø—Ç–∞—Ö –æ—Ç HR –∏ –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä–æ–≤: –∏–∑—É—á–∞–µ—Ç –≤–∞–∫–∞–Ω—Å–∏—é, —Ç–≤–æ–π –æ–ø—ã—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç –ø–∏—Å—å–º–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –æ—Ç–ª–∏—á–∏—Ç—å –æ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ.

<b>üÜì –ë–ï–°–ü–õ–ê–¢–ù–û</b>
3 –ø–∏—Å—å–º–∞ –≤ –º–µ—Å—è—Ü
–ë–∞–∑–æ–≤—ã–π GPT-4o

<b>üíé PREMIUM</b>
20 –ø–∏—Å–µ–º –≤ –¥–µ–Ω—å
GPT-4o + Claude-3.5 —Ä–∞–±–æ—Ç–∞—é—Ç –≤–º–µ—Å—Ç–µ
–î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ = –≤—ã—à–µ –∫–∞—á–µ—Å—Ç–≤–æ

<b>199 —Ä—É–±–ª–µ–π/–º–µ—Å—è—Ü</b>

–ú–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –º–æ–∂–µ—à—å –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Å–∫–æ—Ä–æ—Å—Ç—å. –ö–æ–≥–¥–∞ –Ω–∞–π–¥–µ—à—å —Ä–∞–±–æ—Ç—É –º–µ—á—Ç—ã ‚Äî –æ–∫—É–ø–∏—Ç—Å—è –≤ —Ç—ã—Å—è—á–∏ —Ä–∞–∑.

–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å Premium ‚Äî –ø–∏—à–∏ @shoodyakoff
"""
    
    keyboard = get_premium_info_keyboard()
    
    await update.message.reply_text(
        premium_text,
        parse_mode='HTML',
        reply_markup=keyboard
    )


async def handle_premium_inquiry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ª—É—á–∏—Ç—å Premium'"""
    query = update.callback_query
    if not query:
        return
    
    await query.answer("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é Premium...")
    
    user = update.effective_user
    user_id = None
    if user:
        user_id = await analytics.get_user_id(user.id)
        if user_id:
            await analytics.track_premium_button_clicked(user_id, 'premium_inquiry', 'button')
            await analytics.track_contact_initiated(user_id)
    
    await query.edit_message_text(
        "<b>–ü–æ–ª—É—á–∏—Ç—å Premium –∑–∞ 199‚ÇΩ/–º–µ—Å—è—Ü</b>\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ @shoodyakoff:\n"
        "\"–•–æ—á—É Premium –ø–æ–¥–ø–∏—Å–∫—É\"\n\n"
        "–ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã",
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_premium")]
        ])
    )


async def handle_contact_support(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏'"""
    query = update.callback_query
    if not query:
        return
    
    await query.answer("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º...")
    
    user = update.effective_user
    user_id = None
    if user:
        user_id = await analytics.get_user_id(user.id)
        if user_id:
            await analytics.track_premium_button_clicked(user_id, 'contact_support', 'button')
            await analytics.track_contact_initiated(user_id)
    
    await query.edit_message_text(
        "<b>–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏</b>\n\n"
        "Telegram: @shoodyakoff\n\n"
        "–û—Ç–≤–µ—á–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 2-4 —á–∞—Å–æ–≤",
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_premium")]
        ])
    )


async def handle_premium_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ Premium'"""
    query = update.callback_query
    if not query:
        return
    
    await query.answer("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Premium...")
    
    user = update.effective_user
    user_id = None
    if user:
        user_id = await analytics.get_user_id(user.id)
        if user_id:
            await analytics.track_premium_button_clicked(user_id, 'premium_info', 'post_generation')
            await analytics.track_premium_info_viewed(user_id, source='button')
    
    premium_info = """
<b>–ó–ê–ö–û–ù –†–´–ù–ö–ê –ù–ê–ô–ú–ê: –ë–û–õ–¨–®–ï –û–¢–ö–õ–ò–ö–û–í ‚Äî –ë–û–õ–¨–®–ï –®–ê–ù–°–û–í</b>

–†–∞—Å—Å—ã–ª–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–∏—Å—å–º–∞ –≤ –∫–∞–∂–¥—É—é –∫–æ–º–ø–∞–Ω–∏—é –Ω–µ—Ä–µ–∞–ª—å–Ω–æ —Ç—è–∂–µ–ª–æ. –ï—â—ë —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–µ–ª–∞—Ç—å, —Å–æ–±–µ—Å–µ–¥–æ–≤–∞—Ç—å—Å—è. –ê –∂–∏—Ç—å –∫–æ–≥–¥–∞?

–ú—ã —Å–¥–µ–ª–∞–ª–∏ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–∏—à–µ—Ç —á–µ–ª–æ–≤–µ—á–Ω—ã–µ –ø–∏—Å—å–º–∞ –∑–∞ —Ç–µ–±—è. –û–±—É—á–µ–Ω –Ω–∞ –ø—Ä–æ–º–ø—Ç–∞—Ö –æ—Ç HR –∏ –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä–æ–≤: –∏–∑—É—á–∞–µ—Ç –≤–∞–∫–∞–Ω—Å–∏—é, —Ç–≤–æ–π –æ–ø—ã—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç –ø–∏—Å—å–º–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –æ—Ç–ª–∏—á–∏—Ç—å –æ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ.

<b>üÜì –ë–ï–°–ü–õ–ê–¢–ù–û</b>
3 –ø–∏—Å—å–º–∞ –≤ –º–µ—Å—è—Ü
–ë–∞–∑–æ–≤—ã–π GPT-4o
1 —É–ª—É—á—à–µ–Ω–∏–µ –ø–∏—Å—å–º–∞

<b>üíé PREMIUM</b>
20 –ø–∏—Å–µ–º –≤ –¥–µ–Ω—å
GPT-4o + Claude-3.5 —Ä–∞–±–æ—Ç–∞—é—Ç –≤–º–µ—Å—Ç–µ
–î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ = –≤—ã—à–µ –∫–∞—á–µ—Å—Ç–≤–æ
3 —É–ª—É—á—à–µ–Ω–∏—è –ø–∏—Å—å–º–∞

<b>199 —Ä—É–±–ª–µ–π/–º–µ—Å—è—Ü</b>

–ú–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –º–æ–∂–µ—à—å –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Å–∫–æ—Ä–æ—Å—Ç—å. –ö–æ–≥–¥–∞ –Ω–∞–π–¥–µ—à—å —Ä–∞–±–æ—Ç—É –º–µ—á—Ç—ã ‚Äî –æ–∫—É–ø–∏—Ç—Å—è –≤ —Ç—ã—Å—è—á–∏ —Ä–∞–∑.

–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å Premium ‚Äî –ø–∏—à–∏ @shoodyakoff
"""
    
    keyboard = get_premium_info_keyboard()
    
    await query.edit_message_text(
        premium_info,
        parse_mode='HTML',
        reply_markup=keyboard
    )


async def handle_unlock_limits(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π Premium —ç–∫—Ä–∞–Ω (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ v9.10)"""
    await handle_premium_info(update, context)


async def handle_back_to_premium(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —ç–∫—Ä–∞–Ω—É Premium –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ v9.11)"""
    # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —ç–∫—Ä–∞–Ω—É Premium –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    await handle_premium_info(update, context)


 