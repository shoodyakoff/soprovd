"""
Simple Conversation Handler v7.2
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: —Ç–æ–ª—å–∫–æ –ª–∞–π–∫–∏/–¥–∏–∑–ª–∞–π–∫–∏ –ë–ï–ó –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
–†–µ–ª–∏–∑–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UX
"""
import logging
import time
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from services.smart_analyzer import generate_simple_letter, generate_improved_letter
from services.analytics_service import analytics
from services.subscription_service import subscription_service
from services.feedback_service import feedback_service
from services.acquisition_service import acquisition_service
from models.analytics_models import UserData, LetterSessionData
from models.feedback_models import LetterFeedbackData, LetterIterationImprovement
from utils.validators import InputValidator, ValidationMiddleware
from utils.keyboards import get_feedback_keyboard, get_iteration_keyboard, get_final_letter_keyboard, get_retry_keyboard, get_start_work_keyboard
from utils.database import check_user_needs_consent, save_user_consent
from utils.rate_limiter import rate_limit, rate_limiter
from config import RATE_LIMITING_ENABLED, ADMIN_TELEGRAM_IDS

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è rate limiter (v9.2 Security)
if RATE_LIMITING_ENABLED:
    rate_limiter.set_admin_ids(ADMIN_TELEGRAM_IDS)
    logger.info(f"üîí Rate limiting enabled with {len(ADMIN_TELEGRAM_IDS)} admins")
else:
    logger.info("üîí Rate limiting disabled")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è v7.2 —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –æ—Ü–µ–Ω–æ–∫
WAITING_VACANCY, WAITING_RESUME, WAITING_IMPROVEMENT_REQUEST, WAITING_FEEDBACK = range(300, 304)

# ============================================================================
# –†–ï–õ–ò–ó–ù–ê–Ø –í–ï–†–°–ò–Ø 6.0 - –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£
# 
# ‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è —Ä–µ–ª–∏–∑–∞:
# ‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π
# ‚Ä¢ –ö–æ–º–∞–Ω–¥—ã: /help, /about, /support, /cancel, /start
# ‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ
# ‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
# ‚Ä¢ –í—Ä–µ–º—è–∑–∞–≤–∏—Å–∏–º—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
# ‚Ä¢ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
# ‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
# ‚Ä¢ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞
# ‚Ä¢ –£–±—Ä–∞–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ (/new —É–¥–∞–ª–µ–Ω)
# ============================================================================


@rate_limit('commands')
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    if update.message:
        await update.message.reply_text(
            "üìö <b>–°–ü–†–ê–í–ö–ê –ü–û –ö–û–ú–ê–ù–î–ê–ú</b>\n\n"
            "üéØ <b>/start</b> - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ\n"
            "‚ÑπÔ∏è <b>/about</b> - –û –±–æ—Ç–µ –∏ –µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö\n"
            "üìû <b>/support</b> - –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\n"
            "‚ùå <b>/cancel</b> - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å",
            parse_mode='HTML'
        )
        
        await update.message.reply_text(
            "üí° <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
            "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ /start\n"
            "2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏\n"
            "3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ä–µ–∑—é–º–µ\n"
            "4Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ!\n\n"
            "‚ö° –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ 30-45 —Å–µ–∫—É–Ω–¥",
            parse_mode='HTML'
        )


@rate_limit('commands')
async def about_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"""
    if update.message:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–∞—Å—Ç—è–º–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        await update.message.reply_text(
            "ü§ñ <b>–û –ë–û–¢–ï –°–û–ü–†–û–í–û–î</b>\n\n"
            "üéØ <b>–ú–∏—Å—Å–∏—è:</b> –ü–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º –Ω–∞—Ö–æ–¥–∏—Ç—å —Ä–∞–±–æ—Ç—É –º–µ—á—Ç—ã\n\n"
            "‚ú® <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–π —Å –ø–æ–º–æ—â—å—é –ò–ò\n"
            "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥ –∫–∞–∂–¥—É—é –ø–æ–∑–∏—Ü–∏—é\n"
            "‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –ø–∏—Å—å–º–∞\n"
            "‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (30-45 —Å–µ–∫)",
            parse_mode='HTML'
        )
        
        await update.message.reply_text(
            "üîí <b>–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</b>\n"
            "‚Ä¢ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è\n"
            "‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
            "‚Ä¢ –ü–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å\n\n"
            "üìä <b>–í–µ—Ä—Å–∏—è:</b> 6.0\n"
            "üöÄ <b>–°–æ–∑–¥–∞–Ω–æ —Å –ª—é–±–æ–≤—å—é –¥–ª—è —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π</b>\n\n"
            "üíå –£–¥–∞—á–∏ –≤ –ø–æ–∏—Å–∫–µ —Ä–∞–±–æ—Ç—ã!",
            parse_mode='HTML'
        )


@rate_limit('commands')
async def support_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    if update.message:
        await update.message.reply_text(
            "üìû <b>–ü–û–î–î–ï–†–ñ–ö–ê –ò –û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨</b>\n\n"
            "üí¨ <b>–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è?</b>\n"
            "–ù–∞–ø–∏—à–∏ –≤ tg @shoodyakoff",
            parse_mode='HTML'
        )





@rate_limit('commands')
async def start_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ v6.0"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥ v6.0")
    
    # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π - –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if context.user_data is not None:
        context.user_data.clear()
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        context.user_data['conversation_state'] = 'active'
        context.user_data['initialized'] = True  # –í–°–ï–ì–î–ê —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è ConversationHandler
    
    # –¢—Ä–µ–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
    user = update.effective_user
    user_id = None
    if user:
        user_data = UserData(
            telegram_user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            language_code=user.language_code
        )
        user_id = await analytics.track_user(user_data)
        if user_id and context.user_data is not None:
            context.user_data['analytics_user_id'] = user_id
            await analytics.track_start_command(user_id)
            
            # –¢—Ä–µ–∫–∞–µ–º –∫–∞–Ω–∞–ª –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
            start_param = ' '.join(context.args) if context.args else None
            if start_param:
                await acquisition_service.track_user_acquisition(
                    user_id=user_id,
                    start_param=start_param
                )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id:
        limits = await subscription_service.check_user_limits(user_id)
        limit_message = subscription_service.format_limit_message(limits)
        
        if not limits['can_generate']:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å—á–µ—Ä–ø–∞–ª –ª–∏–º–∏—Ç
            if update.callback_query:
                await update.callback_query.edit_message_text(text=limit_message, parse_mode='HTML')
            elif update.message:
                await update.message.reply_text(text=limit_message, parse_mode='HTML')
            return ConversationHandler.END
    
    # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏
    user_name = ""
    if user and user.first_name:
        user_name = f", {user.first_name}"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    current_hour = datetime.now().hour
    if 6 <= current_hour < 12:
        time_greeting = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
    elif 12 <= current_hour < 18:
        time_greeting = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å"
    elif 18 <= current_hour < 23:
        time_greeting = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
    else:
        time_greeting = "–î–æ–±—Ä–æ–π –Ω–æ—á–∏"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏ –ª–∏ —É–∂–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
    show_full_intro = context.user_data.get('shown_full_intro', False) if context.user_data else False
    
    if not show_full_intro:
        # –ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        message = f"""
{time_greeting}{user_name}! üéØ

<b>–°–æ–∑–¥–∞–¥–∏–º —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–º–µ—Ç—è—Ç!</b>

üìã <b>–ß—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞:</b>

<b>1Ô∏è‚É£ –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:</b>
‚Ä¢ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É
‚Ä¢ –û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –∏ –∑–∞–¥–∞—á–∏  
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏
‚Ä¢ –£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã

<b>2Ô∏è‚É£ –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ —Å:</b>
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ –∏ —Ü–∏—Ñ—Ä–∞–º–∏
‚Ä¢ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã
‚Ä¢ –ö–ª—é—á–µ–≤—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏
‚Ä¢ –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏

üí° <b>–°–æ–≤–µ—Ç:</b> –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –∏ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–µ–µ –±—É–¥–µ—Ç –ø–∏—Å—å–º–æ!

üöÄ <b>–ù–∞—á–Ω—ë–º —Å –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏...</b>
"""
        # –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ –ø–æ–∫–∞–∑–∞–ª–∏ –ø–æ–ª–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
        if context.user_data is not None:
            context.user_data['shown_full_intro'] = True
    else:
        # –°–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
        message = f"""
{time_greeting}{user_name}! üéØ

<b>–°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ</b>

üöÄ <b>–ù–∞—á–Ω—ë–º —Å –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏...</b>
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –∏ –ª–∏–º–∏—Ç–∞—Ö
    if user_id:
        limits = await subscription_service.check_user_limits(user_id)
        subscription_info = subscription_service.format_subscription_info(limits)
        message += f"\n{subscription_info}\n"
    
    message += (
        "üìù <b>–®–∞–≥ 1/3:</b> –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏\n\n"
        "üí° <i>–°–æ–≤–µ—Ç: –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å —Å–∞–π—Ç–∞ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è</i>"
    )
    
    if update.callback_query:
        await update.callback_query.edit_message_text(text=message, parse_mode='HTML')
    elif update.message:
        await update.message.reply_text(text=message, parse_mode='HTML')
    
    logger.info("üîç START_CONVERSATION: –í–æ–∑–≤—Ä–∞—â–∞–µ–º WAITING_VACANCY")
    return WAITING_VACANCY


@rate_limit('commands', check_text_size=True)
@ValidationMiddleware.require_initialization
@ValidationMiddleware.require_text_message
async def handle_vacancy(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏"""
    logger.info(f"üîç HANDLE_VACANCY CALLED! Message: {update.message.text[:50] if update.message and update.message.text else 'None'}...")
    logger.info(f"üîç context.user_data keys: {list(context.user_data.keys()) if context.user_data else 'None'}")
    
    if not update.message or not update.message.text:
        logger.error("‚ùå No message or text in handle_vacancy")
        return WAITING_VACANCY
        
    vacancy_text = update.message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
    is_valid, error_msg = InputValidator.validate_vacancy_text(vacancy_text)
    if not is_valid:
        await update.message.reply_text(error_msg, parse_mode='HTML')
        return WAITING_VACANCY
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∫–∞–Ω—Å–∏—é
    if context.user_data is not None:
        context.user_data['vacancy_text'] = vacancy_text
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        user_id = context.user_data.get('analytics_user_id')
        logger.info(f"üîç RAILWAY DEBUG: handle_vacancy analytics_user_id: {user_id}")
        
        if user_id:
            logger.info(f"üîç RAILWAY DEBUG: Creating LetterSessionData for user {user_id}")
            
            try:
                session_data = LetterSessionData(
                    user_id=user_id,
                    mode="v6.0",
                    job_description=vacancy_text[:1000],  # –ü–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤
                    job_description_length=len(vacancy_text),
                    selected_style="professional"
                )
                logger.info(f"üîç RAILWAY DEBUG: LetterSessionData created successfully")
                
                session_id = await analytics.create_letter_session(session_data)
                logger.info(f"üîç RAILWAY DEBUG: create_letter_session returned: {session_id}")
                
                if session_id:
                    context.user_data['analytics_session_id'] = session_id
                    logger.info(f"üîç RAILWAY DEBUG: Calling track_vacancy_sent...")
                    await analytics.track_vacancy_sent(user_id, session_id, len(vacancy_text))
                    logger.info(f"üîç RAILWAY DEBUG: track_vacancy_sent completed")
                else:
                    logger.error(f"‚ùå RAILWAY DEBUG: create_letter_session returned None!")
                    
            except Exception as e:
                logger.error(f"‚ùå RAILWAY DEBUG: Exception in vacancy analytics: {e}")
                import traceback
                logger.error(f"‚ùå RAILWAY DEBUG: Traceback: {traceback.format_exc()}")
        else:
            logger.error(f"‚ùå RAILWAY DEBUG: No analytics_user_id found!")
    else:
        logger.error(f"‚ùå RAILWAY DEBUG: context.user_data is None!")
    
    await update.message.reply_text(
        "‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ! –í–∞–∫–∞–Ω—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞</b>\n\n"
        "üìã <b>–®–∞–≥ 2/3:</b> –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ä–µ–∑—é–º–µ\n\n"
        "üìù <b>–ß—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:</b>\n"
        "‚Ä¢ –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å HeadHunter, –•–∞–±—Ä –ö–∞—Ä—å–µ—Ä–∞\n"
        "‚Ä¢ –ò–ª–∏ –∏–∑ Word/PDF —Ñ–∞–π–ª–∞\n"
        "‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –∏ –Ω–∞–≤—ã–∫–∏\n\n"
        "üí° <i>–°–æ–≤–µ—Ç: –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ —Ä–µ–∑—é–º–µ, —Ç–µ–º –ª—É—á—à–µ –ø–∏—Å—å–º–æ!</i>\n\n"
        "üîí <i>–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ: –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è</i>",
        parse_mode='HTML'
    )
    
    return WAITING_RESUME


@rate_limit('ai_requests', check_text_size=True)
@ValidationMiddleware.require_initialization
@ValidationMiddleware.require_text_message
async def handle_resume(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—é–º–µ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∏—Å—å–º–∞"""
    if not update.message or not update.message.text:
        return WAITING_RESUME
        
    resume_text = update.message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Ä–µ–∑—é–º–µ
    is_valid, error_msg = InputValidator.validate_resume_text(resume_text)
    if not is_valid:
        await update.message.reply_text(error_msg, parse_mode='HTML')
        return WAITING_RESUME
    
    # ========================================
    # –ü–†–û–í–ï–†–ö–ê –°–û–ì–õ–ê–°–ò–Ø –ù–ê –û–ë–†–ê–ë–û–¢–ö–£ –ü–î (–§–ó-152)
    # ========================================
    user_id = None
    if context.user_data is not None:
        user_id = context.user_data.get('analytics_user_id')
    
    if user_id:
        try:
            needs_consent = await check_user_needs_consent(user_id)
            
            if needs_consent:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω—É–∂–Ω–æ —Å–æ–≥–ª–∞—Å–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Å–æ–≥–ª–∞—Å–∏—è
                logger.info(f"üîí User {user_id} needs consent - showing consent form")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—é–º–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ–≥–ª–∞—Å–∏—è
                if context.user_data is not None:
                    context.user_data['pending_resume_text'] = resume_text
                
                consent_message = (
                    "üîí <b>–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
                    "–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ –Ω—É–∂–Ω–æ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ —Å–æ–≥–ª–∞—Å–Ω–æ –§–ó-152.\n\n"
                    "üìã <b>–ß—Ç–æ –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º:</b>\n"
                    "‚Ä¢ –¢–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ —Ä–µ–∑—é–º–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞)\n"
                    "‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–∫–∞–Ω—Å–∏–∏\n\n"
                    "üîê <b>–ì–∞—Ä–∞–Ω—Ç–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:</b>\n"
                    "‚Ä¢ –î–∞–Ω–Ω—ã–µ –ù–ï —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n"
                    "‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
                    "‚Ä¢ –ü–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å\n\n"
                    "üìÑ <b>–î–æ–∫—É–º–µ–Ω—Ç—ã:</b>\n"
                    "‚Ä¢ Telegram: /privacy –∏ /terms\n"
                    "‚Ä¢ üåê Notion: https://www.notion.so/21d47215317a8035a55ac5432dc8476c\n\n"
                    "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–∏—Å—å–º–∞?"
                )
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ–≥–ª–∞—Å–∏—è
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=f"consent_agree_{user_id}")],
                    [InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"consent_decline_{user_id}")],
                    [InlineKeyboardButton("üìÑ –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", callback_data="show_privacy")]
                ])
                
                await update.message.reply_text(
                    consent_message,
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–≥–ª–∞—Å–∏—è
                return WAITING_RESUME  # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –Ω–æ –∂–¥–µ–º callback
                
        except Exception as e:
            logger.error(f"‚ùå Error checking consent for user {user_id}: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≥–ª–∞—Å–∏—è
            pass
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—é–º–µ
    vacancy_text = None
    if context.user_data is not None:
        vacancy_text = context.user_data.get('vacancy_text')
        context.user_data['resume_text'] = resume_text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—é–º–µ –¥–ª—è –∏—Ç–µ—Ä–∞—Ü–∏–π
    
    if not vacancy_text:
        await update.message.reply_text("‚ùå –í–∞–∫–∞–Ω—Å–∏—è –ø–æ—Ç–µ—Ä—è–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start")
        return ConversationHandler.END
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    processing_msg = await update.message.reply_text(
        "üöÄ <b>–ù–∞—á–∏–Ω–∞—é —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –≤–∞—à–∏–º –ø–∏—Å—å–º–æ–º!</b>\n\n"
        "üîç <b>–®–∞–≥ 3/3:</b> –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞–∫–∞–Ω—Å–∏—é...\n"
        "‚è≥ –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: 30-45 —Å–µ–∫—É–Ω–¥\n\n"
        "üí≠ <i>–°–æ–∑–¥–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å</i>",
        parse_mode='HTML'
    )
    
    try:
        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        user_id = None
        session_id = None
        if context.user_data is not None:
            user_id = context.user_data.get('analytics_user_id')
            session_id = context.user_data.get('analytics_session_id')
            
            logger.info(f"üîç RAILWAY DEBUG: handle_resume user_id: {user_id}, session_id: {session_id}")
            
            if user_id and session_id:
                try:
                    logger.info(f"üîç RAILWAY DEBUG: Calling track_resume_sent...")
                    await analytics.track_resume_sent(user_id, session_id, len(resume_text))
                    logger.info(f"üîç RAILWAY DEBUG: track_resume_sent completed")
                except Exception as e:
                    logger.error(f"‚ùå RAILWAY DEBUG: Exception in track_resume_sent: {e}")
            else:
                logger.error(f"‚ùå RAILWAY DEBUG: Missing user_id or session_id!")
        else:
            logger.error(f"‚ùå RAILWAY DEBUG: context.user_data is None in handle_resume!")
        
        # üéØ –ü–†–û–°–¢–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø v6.1: –¢–æ–ª—å–∫–æ –ø–∏—Å—å–º–æ, –±–µ–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π
        start_time = time.time()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é - –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ (—Å —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–µ–π v9.2)
        if user_id and session_id:
            from services.ai_factory import AIFactory
            current_provider = AIFactory.get_provider_name()
            
            # –°–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—é–º–µ –¥–ª—è –ë–î (PII protection v9.2)
            sanitized_resume = InputValidator.sanitize_resume_text(resume_text)
            
            await analytics.update_letter_session(session_id, {
                'resume_text': sanitized_resume[:1000],  # –ü–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤ —Å–∞–Ω–∏—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                'resume_length': len(resume_text),
                'openai_model_used': current_provider.lower()  # 'openai' –∏–ª–∏ 'claude'
            })
        
        letter = await generate_simple_letter(
            vacancy_text=vacancy_text,
            resume_text=resume_text,
            user_id=user_id,
            session_id=session_id
        )
        
        generation_time = int(time.time() - start_time)
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        await processing_msg.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await update.message.reply_text(
            f"‚úçÔ∏è <b>–ü–ò–°–¨–ú–û:</b>\n\n{letter}",
            parse_mode='HTML'
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—á–µ—Ç—á–∏–∫–∞
        iteration_status = None
        if session_id:
            try:
                iteration_status = await feedback_service.get_session_iteration_status(session_id)
                logger.info(f"üîç RAILWAY DEBUG: iteration_status –ø–æ–ª—É—á–µ–Ω: {iteration_status}")
            except Exception as e:
                logger.error(f"‚ùå RAILWAY DEBUG: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è iteration_status: {e}")
        else:
            logger.error(f"‚ùå RAILWAY DEBUG: session_id is None!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å–ø–µ—à–Ω–æ –ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–æ—Å—å –ø–∏—Å—å–º–æ
        is_generation_successful = (
            letter and 
            letter.strip() and 
            letter != "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Å—å–º–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑." and
            letter != "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Å—å–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑." and
            len(letter.strip()) > 50  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ context.user_data 
        if context.user_data and session_id:
            context.user_data['current_session_id'] = session_id
            context.user_data['vacancy_text'] = vacancy_text  # –î–ª—è —É–ª—É—á—à–µ–Ω–∏–π
            context.user_data['resume_text'] = resume_text    # –î–ª—è —É–ª—É—á—à–µ–Ω–∏–π
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        if is_generation_successful:
            # –ü–∏—Å—å–º–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ
            feedback_message = f"üéâ <b>–ü–∏—Å—å–º–æ –≥–æ—Ç–æ–≤–æ –∑–∞ {generation_time} —Å–µ–∫—É–Ω–¥!</b>\n\n"
            
            if iteration_status:
                counter_text = feedback_service.format_iteration_counter(iteration_status)
                feedback_message += f"{counter_text}\n\n"
            
            feedback_message += (
                "üí° <b>–û—Ü–µ–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n"
                "‚Ä¢ ‚ù§Ô∏è –ù—Ä–∞–≤–∏—Ç—Å—è - –æ—Ç–ª–∏—á–Ω–æ!\n"
                "‚Ä¢ üëé –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç - –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑\n\n"
                "üçÄ <i>–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –ø–∏—Å–µ–º!</i>"
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏
            if session_id and iteration_status:
                keyboard = get_feedback_keyboard(session_id, iteration_status.current_iteration)
                logger.info(f"‚úÖ RAILWAY DEBUG: –ö–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏ —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è session_id: {session_id}")
            elif session_id:
                # Fallback: —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –µ—Å–ª–∏ –Ω–µ—Ç iteration_status
                keyboard = get_feedback_keyboard(session_id, 1)
                logger.warning(f"‚ö†Ô∏è RAILWAY DEBUG: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ—Ü–µ–Ω–∫–∏, session_id: {session_id}")
            else:
                keyboard = None
                logger.error(f"‚ùå RAILWAY DEBUG: –ù–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏ - –Ω–µ—Ç session_id!")
        else:
            # –ü–∏—Å—å–º–æ –ù–ï —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–æ—Å—å
            feedback_message = f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∏—Å—å–º–æ</b>\n\n"
            
            if iteration_status:
                counter_text = feedback_service.format_iteration_counter(iteration_status)
                feedback_message += f"{counter_text}\n\n"
            
            feedback_message += (
                "üîß <b>–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:</b>\n"
                "‚Ä¢ üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é - –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑\n"
                "‚Ä¢ üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n\n"
                "üí° <i>–ò–Ω–æ–≥–¥–∞ –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞!</i>"
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–∞
            keyboard = get_retry_keyboard(session_id) if session_id else None
            logger.warning(f"üîÑ RAILWAY DEBUG: –ü–æ–∫–∞–∑—ã–≤–∞—é –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–∞ –¥–ª—è session_id: {session_id}")
        
        await update.message.reply_text(
            feedback_message,
            parse_mode='HTML',
            reply_markup=keyboard
        )
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        if user_id and session_id:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º (–¢–û–õ–¨–ö–û –¥–ª—è –Ω–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π!)
            await subscription_service.increment_usage(user_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é - –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            await analytics.update_letter_session(session_id, {
                'generated_letter': letter[:2000],  # –ü–µ—Ä–≤—ã–µ 2000 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
                'generated_letter_length': len(letter),
                'generation_time_seconds': generation_time,
                'status': 'completed'
            })
            
            await analytics.track_letter_generated(
                user_id, session_id, len(letter), generation_time
            )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        
        # üìä –ê–ù–ê–õ–ò–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –ø–æ–º–µ—á–∞–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –∑–∞–±—Ä–æ—à–µ–Ω–Ω—É—é
        if user_id and session_id:
            try:
                import traceback
                from models.analytics_models import ErrorData
                
                error_data = ErrorData(
                    error_type=type(e).__name__,
                    error_message=str(e),
                    user_id=user_id,
                    session_id=session_id,
                    stack_trace=traceback.format_exc(),
                    handler_name='handle_resume'
                )
                await analytics.log_error(error_data)
                
                # –ü–æ–º–µ—á–∞–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—É—é
                await analytics.update_letter_session(session_id, {
                    'status': 'abandoned'
                })
            except Exception as log_error:
                logger.error(f"Failed to log error to database: {log_error}")
        
        try:
            await processing_msg.delete()
        except:
            pass
        
        await update.message.reply_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∏—Å—å–º–∞</b>\n\n"
            "üîß <b>–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:</b>\n"
            "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: /start\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ç–µ–∫—Å—Ç—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥—Ä–æ–±–Ω—ã–µ\n"
            "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: /support\n\n"
            "üòî <i>–ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞!</i>",
            parse_mode='HTML'
        )
    
    # –ù–ï –æ—á–∏—â–∞–µ–º context.user_data - –Ω—É–∂–Ω–æ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏!
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≤–º–µ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
    
    return WAITING_FEEDBACK


async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞"""
    if context.user_data is not None:
        context.user_data.clear()
    
    if update.message:
        await update.message.reply_text(
            "‚ùå <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø–∏—Å—å–º–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
            "üîÑ <b>–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ:</b> /start\n"
            "‚ùì <b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å:</b> /help\n\n"
            "üëã <i>–ë—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å –≤–∞–º —Å–Ω–æ–≤–∞!</i>",
            parse_mode='HTML'
        )
    
    return ConversationHandler.END


# ============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–ò–°–¢–ï–ú–´ –û–¶–ï–ù–û–ö –ò –ò–¢–ï–†–ê–¶–ò–ô V7.2
# –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: —Ç–æ–ª—å–∫–æ –ª–∞–π–∫–∏/–¥–∏–∑–ª–∞–π–∫–∏ –ë–ï–ó –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
# ============================================================================

async def handle_feedback_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –æ—Ü–µ–Ω–∫–∏ - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    query = update.callback_query
    if not query or not query.data:
        logger.error("‚ùå Feedback button: no query or data")
        return ConversationHandler.END
    
    logger.info(f"üîç Feedback button pressed: {query.data}")
    await query.answer()
    
    # –ü–∞—Ä—Å–∏–º callback_data: feedback_{type}_{session_id}_{iteration}
    parts = query.data.split('_')
    if len(parts) < 4:
        logger.error(f"‚ùå Invalid callback data format: {query.data}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏")
        return ConversationHandler.END
    
    feedback_type = parts[1]  # like, dislike
    session_id = parts[2]
    iteration = int(parts[3])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = None
    if context.user_data:
        user_id = context.user_data.get('analytics_user_id')
    
    if not user_id:
        logger.error("‚ùå No user_id in context.user_data")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏—Ç–µ—Ä–∞—Ü–∏–π
    iteration_status = await feedback_service.get_session_iteration_status(session_id)
    if not iteration_status:
        logger.error(f"‚ùå No iteration status for session {session_id}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return ConversationHandler.END
    
    # –°–†–ê–ó–£ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É –≤ –ë–î (–ë–ï–ó –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è)
    feedback_data = LetterFeedbackData(
        session_id=session_id,
        user_id=user_id,
        iteration_number=iteration,
        feedback_type=feedback_type
    )
    await feedback_service.save_feedback(feedback_data)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ü–µ–Ω–∫–∏
    if feedback_type == "like":
        response_text = (
            "‚ù§Ô∏è <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!</b>\n\n"
            "üôè –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à –æ—Ç–∑—ã–≤! –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –ª—É—á—à–∏–µ –ø–∏—Å—å–º–∞.\n\n"
            f"üîÑ <b>–£ –≤–∞—Å –µ—Å—Ç—å –µ—â—ë {iteration_status.remaining_iterations} –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∞–≤–æ–∫</b> "
            "–¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã –≤–∞–∫–∞–Ω—Å–∏—è-—Ä–µ–∑—é–º–µ, –∏–ª–∏ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ –¥–ª—è –¥—Ä—É–≥–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏.\n\n"
            "üí° <b>–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?</b>"
        )
    else:  # dislike
        response_text = (
            "üëé <b>–ü–æ–Ω—è—Ç–Ω–æ, –ø–∏—Å—å–º–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ.</b>\n\n"
            "üîß <b>–ú—ã –ø–æ–º–æ–∂–µ–º —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å!</b>\n\n"
            f"üîÑ <b>–û—Å—Ç–∞–ª–æ—Å—å {iteration_status.remaining_iterations} –ø–æ–ø—ã—Ç–æ–∫</b> –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —ç—Ç–æ–≥–æ –ø–∏—Å—å–º–∞.\n\n"
            "üí° <b>–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?</b>"
        )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = get_iteration_keyboard(session_id, iteration_status.remaining_iterations)
    
    await query.edit_message_text(
        response_text,
        parse_mode='HTML',
        reply_markup=keyboard
    )
    
    return WAITING_FEEDBACK


async def handle_improve_letter(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–µ –ø–∏—Å—å–º–∞ - –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê"""
    query = update.callback_query
    if not query or not query.data:
        logger.error("‚ùå Improve letter: no query or data")
        return ConversationHandler.END
    
    logger.info(f"üîÑ Improve letter button pressed: {query.data}")
    
    # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
    await query.answer("üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É–ª—É—á—à–µ–Ω–∏—é...")
    
    # –ü–∞—Ä—Å–∏–º callback_data: improve_letter_{session_id}
    parts = query.data.split('_')
    if len(parts) < 3:
        logger.error(f"‚ùå Invalid improve letter callback data: {query.data}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏")
        return ConversationHandler.END
    
    session_id = parts[2]
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏—Ç–µ—Ä–∞—Ü–∏–π
    iteration_status = await feedback_service.get_session_iteration_status(session_id)
    if not iteration_status:
        logger.error(f"‚ùå No iteration status for session {session_id}")
        await query.edit_message_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ: /start",
            parse_mode='HTML'
        )
        return ConversationHandler.END
    
    if not iteration_status.can_iterate:
        logger.warning(f"‚ö†Ô∏è Cannot iterate: max iterations reached")
        await query.edit_message_text(
            "‚ùå <b>–£–ª—É—á—à–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</b>\n\n"
            f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π ({iteration_status.max_iterations})\n\n"
            "‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –ø–∏—Å—å–º–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ: /start",
            parse_mode='HTML'
        )
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º session_id –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if context.user_data:
        context.user_data['improvement_session_id'] = session_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
        if not context.user_data.get('vacancy_text') or not context.user_data.get('resume_text'):
            logger.error("‚ùå Missing vacancy_text or resume_text in context")
            await query.edit_message_text(
                "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è</b>\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ: /start",
                parse_mode='HTML'
            )
            return ConversationHandler.END
    
    # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –ë–ï–ó –∫–Ω–æ–ø–æ–∫
    prompt_text = feedback_service.get_improvement_prompt_text(iteration_status.remaining_iterations)
    
    await query.edit_message_text(
        prompt_text,
        parse_mode='HTML'
        # –ë–ï–ó reply_markup - –Ω–∏–∫–∞–∫–∏—Ö –∫–Ω–æ–ø–æ–∫!
    )
    
    return WAITING_IMPROVEMENT_REQUEST


@rate_limit('ai_requests')
async def handle_retry_generation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∏—Å—å–º–∞ —Å —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    query = update.callback_query
    if not query:
        return ConversationHandler.END
    
    await query.answer("üîÑ –ü–æ–≤—Ç–æ—Ä—è—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not context.user_data:
        await query.edit_message_text(
            "‚ùå –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Ç–µ—Ä—è–Ω—ã\n\n"
            "üîÑ –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start"
        )
        return ConversationHandler.END
    
    vacancy_text = context.user_data.get('vacancy_text')
    resume_text = context.user_data.get('resume_text')
    
    if not vacancy_text or not resume_text:
        await query.edit_message_text(
            "‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞\n\n"
            "üîÑ –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start"
        )
        return ConversationHandler.END
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await query.edit_message_text(
        "üîÑ <b>–ü–æ–≤—Ç–æ—Ä—è—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–∏—Å—å–º–∞...</b>\n\n"
        "‚è≥ –ò—Å–ø–æ–ª—å–∑—É—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
        "üéØ –°–æ–∑–¥–∞—é –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ",
        parse_mode='HTML'
    )
    
    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        from services.smart_analyzer import generate_simple_letter
        from services.analytics_service import analytics
        from services.subscription_service import subscription_service  
        from services.feedback_service import feedback_service
        from models.analytics_models import LetterSessionData
        import time
        
        # –ü–æ–ª—É—á–∞–µ–º user_id
        user_id = context.user_data.get('analytics_user_id')
        if not user_id:
            if query.message:
                await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
        session_data = LetterSessionData(
            user_id=user_id,
            job_description=vacancy_text,
            job_description_length=len(vacancy_text),
            resume_text=resume_text,
            resume_length=len(resume_text)
        )
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        session_id = await analytics.create_letter_session(session_data)
        if not session_id:
            if query.message:
                await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏")
            return ConversationHandler.END
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∏—Å—å–º–æ
        start_time = time.time()
        letter = await generate_simple_letter(
            vacancy_text=vacancy_text,
            resume_text=resume_text,
            user_id=user_id,
            session_id=session_id
        )
        generation_time = int(time.time() - start_time)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if query.message:
            await query.message.reply_text(
                f"‚úçÔ∏è <b>–ü–ò–°–¨–ú–û:</b>\n\n{letter}",
                parse_mode='HTML'
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
        is_generation_successful = (
            letter and 
            letter.strip() and 
            letter != "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Å—å–º–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑." and
            letter != "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Å—å–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑." and
            len(letter.strip()) > 50
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ context
        context.user_data['current_session_id'] = session_id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏—Ç–µ—Ä–∞—Ü–∏–π
        iteration_status = await feedback_service.get_session_iteration_status(session_id)
        
        if is_generation_successful:
            # –£—Å–ø–µ—à–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
            feedback_message = f"üéâ <b>–ü–∏—Å—å–º–æ –≥–æ—Ç–æ–≤–æ –∑–∞ {generation_time} —Å–µ–∫—É–Ω–¥!</b>\n\n"
            
            if iteration_status:
                counter_text = feedback_service.format_iteration_counter(iteration_status)
                feedback_message += f"{counter_text}\n\n"
            
            feedback_message += (
                "üí° <b>–û—Ü–µ–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n"
                "‚Ä¢ ‚ù§Ô∏è –ù—Ä–∞–≤–∏—Ç—Å—è - –æ—Ç–ª–∏—á–Ω–æ!\n"
                "‚Ä¢ üëé –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç - –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑\n\n"
                "üçÄ <i>–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –ø–∏—Å–µ–º!</i>"
            )
            
            keyboard = get_feedback_keyboard(session_id, iteration_status.current_iteration if iteration_status else 1)
        else:
            # –ù–µ—É—Å–ø–µ—à–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
            feedback_message = f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∏—Å—å–º–æ</b>\n\n"
            
            if iteration_status:
                counter_text = feedback_service.format_iteration_counter(iteration_status)
                feedback_message += f"{counter_text}\n\n"
            
            feedback_message += (
                "üîß <b>–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:</b>\n"
                "‚Ä¢ üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é - –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑\n"
                "‚Ä¢ üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n\n"
                "üí° <i>–ò–Ω–æ–≥–¥–∞ –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞!</i>"
            )
            
            keyboard = get_retry_keyboard(session_id)
        
        if query.message:
            await query.message.reply_text(
                feedback_message,
                parse_mode='HTML',
                reply_markup=keyboard
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        if is_generation_successful:
            await subscription_service.increment_usage(user_id)
            await analytics.update_letter_session(session_id, {
                'generated_letter': letter[:2000],
                'generated_letter_length': len(letter),
                'generation_time_seconds': generation_time,
                'status': 'completed'
            })
            await analytics.track_letter_generated(user_id, session_id, len(letter), generation_time)
        
        return WAITING_FEEDBACK
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        if query.message:
            await query.message.reply_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</b>\n\n"
                "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /start",
                parse_mode='HTML'
            )
        return ConversationHandler.END


@rate_limit('ai_requests', check_text_size=True)
async def handle_improvement_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–µ"""
    if not update.message or not update.message.text:
        return WAITING_IMPROVEMENT_REQUEST
    
    improvement_request = update.message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if not context.user_data:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Ç–µ—Ä—è–Ω—ã")
        return ConversationHandler.END
    
    session_id = context.user_data.get('improvement_session_id')
    user_id = context.user_data.get('analytics_user_id')
    vacancy_text = context.user_data.get('vacancy_text')
    
    if not all([session_id, user_id, vacancy_text]):
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
        return ConversationHandler.END
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
    if not isinstance(session_id, str) or not isinstance(user_id, int) or not isinstance(vacancy_text, str):
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö")
        return ConversationHandler.END
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress_msg = await update.message.reply_text(
        "üîÑ <b>–£–ª—É—á—à–∞—é –ø–∏—Å—å–º–æ...</b>\n\n"
        "‚è≥ –£—á–∏—Ç—ã–≤–∞—é –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è\n"
        "üéØ –°–æ–∑–¥–∞—é —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é",
        parse_mode='HTML'
    )
    
    try:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä –∏—Ç–µ—Ä–∞—Ü–∏–∏
        await feedback_service.increment_session_iteration(session_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        iteration_status = await feedback_service.get_session_iteration_status(session_id)
        if not iteration_status:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏—Ç–µ—Ä–∞—Ü–∏–∏")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ
        start_time = time.time()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø–∏—Å—å–º–æ –∏–∑ —Å–µ—Å—Å–∏–∏
        session_response = await analytics.get_letter_session_by_id(session_id)
        previous_letter = ""
        if session_response:
            previous_letter = session_response.get('generated_letter', '')
        
        # Fallback –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø–∏—Å—å–º–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        if not previous_letter:
            logger.warning(f"‚ö†Ô∏è Previous letter not found for session {session_id}, using simple generation")
            improved_letter = await generate_simple_letter(
                vacancy_text=vacancy_text,
                resume_text=context.user_data.get('resume_text', ''),
                user_id=user_id,
                session_id=session_id
            )
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ —Å —É—á–µ—Ç–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            logger.info(f"üîÑ Improving letter with previous version ({len(previous_letter)} chars)")
            improved_letter = await generate_improved_letter(
                vacancy_text=vacancy_text,
                resume_text=context.user_data.get('resume_text', ''),
                previous_letter=previous_letter,
                user_feedback=improvement_request,
                improvement_request=improvement_request,
                user_id=user_id,
                session_id=session_id
            )
        
        generation_time = int(time.time() - start_time)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é
        iteration_data = LetterIterationImprovement(
            session_id=session_id,
            user_id=user_id,
            iteration_number=iteration_status.current_iteration,
            user_feedback=improvement_request,
            improvement_request=improvement_request,
            previous_letter=previous_letter[:1000] if previous_letter else ""  # –ü–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤
        )
        
        await feedback_service.save_letter_iteration(
            iteration_data, improved_letter, generation_time
        )
        
        # üìä –ê–ù–ê–õ–ò–¢–ò–ö–ê: –¢—Ä–µ–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–µ —É–ª—É—á—à–µ–Ω–∏—è –ø–∏—Å—å–º–∞
        from models.analytics_models import EventData
        
        event_data = EventData(
            user_id=user_id,
            event_type='letter_improved',
            session_id=session_id,
            event_data={
                'iteration_number': iteration_status.current_iteration,
                'improvement_length': len(improvement_request),
                'generation_time_seconds': generation_time,
                'has_previous_letter': bool(previous_letter)
            }
        )
        await analytics.track_event(event_data)
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        await progress_msg.delete()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ
        await update.message.reply_text(
            f"‚úçÔ∏è <b>–£–õ–£–ß–®–ï–ù–ù–û–ï –ü–ò–°–¨–ú–û:</b>\n\n{improved_letter}",
            parse_mode='HTML'
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–æ–≤–æ–π –æ—Ü–µ–Ω–∫–∏
        counter_text = feedback_service.format_iteration_counter(iteration_status)
        feedback_message = f"üéâ <b>–ü–∏—Å—å–º–æ —É–ª—É—á—à–µ–Ω–æ –∑–∞ {generation_time} —Å–µ–∫—É–Ω–¥!</b>\n\n{counter_text}\n\n"
        
        if iteration_status.remaining_iterations > 0:
            feedback_message += (
                "üí° <b>–û—Ü–µ–Ω–∏—Ç–µ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é:</b>\n"
                "‚Ä¢ ‚ù§Ô∏è –ù—Ä–∞–≤–∏—Ç—Å—è - –æ—Ç–ª–∏—á–Ω–æ!\n"
                "‚Ä¢ üëé –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç - –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑\n\n"
            )
            keyboard = get_feedback_keyboard(session_id, iteration_status.current_iteration)
        else:
            feedback_message += "‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ"
            keyboard = get_final_letter_keyboard()
        
        await update.message.reply_text(
            feedback_message,
            parse_mode='HTML',
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –ø–∏—Å—å–º–∞: {e}")
        
        try:
            await progress_msg.delete()
        except:
            pass
        
        await update.message.reply_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –ø–∏—Å—å–º–∞</b>\n\n"
            "üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ: /start",
            parse_mode='HTML'
        )
    
    return WAITING_FEEDBACK


async def handle_accept_letter(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–∏—Å—å–º–∞"""
    query = update.callback_query
    if not query:
        logger.error("‚ùå Accept letter: no query")
        return ConversationHandler.END
    
    logger.info(f"‚úÖ Letter accepted by user: {query.data}")
    logger.info(f"üîç User ID: {query.from_user.id}")
    logger.info(f"üîç Chat ID: {query.message.chat_id if query.message else 'None'}")
    
    await query.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –£–¥–∞—á–∏ —Å —ç—Ç–∏–º –ø–∏—Å—å–º–æ–º!")
    
    await query.edit_message_text(
        "‚úÖ <b>–ü–∏—Å—å–º–æ –ø—Ä–∏–Ω—è—Ç–æ!</b>\n\n"
        "üéØ <b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b>\n"
        "‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–∏—Å—å–º–æ\n"
        "‚Ä¢ –ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é\n\n"
        "üîÑ <b>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ:</b> /start\n"
        "üí¨ <b>–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã:</b> /support\n\n"
        "üçÄ <b>–£–¥–∞—á–∏ –≤ –ø–æ–∏—Å–∫–µ —Ä–∞–±–æ—Ç—ã!</b>",
        parse_mode='HTML'
    )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if context.user_data:
        logger.info(f"üîç Clearing context.user_data with keys: {list(context.user_data.keys())}")
        context.user_data.clear()
    else:
        logger.warning("‚ö†Ô∏è context.user_data is None when accepting letter")
    
    return ConversationHandler.END


async def handle_waiting_feedback_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    if update.message:
        await update.message.reply_text(
            "üí° <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø–∏—Å—å–º–∞</b>\n\n"
            "üîÑ <b>–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–∏—Å—å–º–∞</b>",
            parse_mode='HTML'
        )
    return WAITING_FEEDBACK


# ========================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ì–õ–ê–°–ò–Ø –ù–ê –û–ë–†–ê–ë–û–¢–ö–£ –ü–î
# ========================================

async def handle_consent_agree(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ü–î"""
    query = update.callback_query
    if not query:
        return WAITING_RESUME
    
    await query.answer("‚úÖ –°–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ callback_data
    try:
        if not query.data:
            return WAITING_RESUME
        user_id = int(query.data.split('_')[-1])
        logger.info(f"‚úÖ User {user_id} agreed to consent")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–≥–ª–∞—Å–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        consent_saved = await save_user_consent(user_id, consent_version='v1.0', marketing_consent=False)
        
        if consent_saved:
            logger.info(f"‚úÖ Consent saved for user {user_id}")
        else:
            logger.error(f"‚ùå Failed to save consent for user {user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        resume_text = None
        if context.user_data:
            resume_text = context.user_data.get('pending_resume_text')
        
        if resume_text:
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∑—é–º–µ
            await query.edit_message_text(
                "‚úÖ <b>–°–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!</b>\n\n"
                "üöÄ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ä–µ–∑—é–º–µ –µ—â–µ —Ä–∞–∑ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Å—å–º–∞:",
                parse_mode='HTML'
            )
            
            # –û—á–∏—â–∞–µ–º pending —Ä–µ–∑—é–º–µ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ä–µ–∑—é–º–µ –∑–∞–Ω–æ–≤–æ
            if context.user_data:
                context.user_data.pop('pending_resume_text', None)
            
            return WAITING_RESUME
        else:
            await query.edit_message_text(
                "‚úÖ <b>–°–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!</b>\n\n"
                "‚ùå –†–µ–∑—é–º–µ –ø–æ—Ç–µ—Ä—è–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –µ—â–µ —Ä–∞–∑:",
                parse_mode='HTML'
            )
            return WAITING_RESUME
            
    except Exception as e:
        logger.error(f"‚ùå Error processing consent agreement: {e}")
        await query.edit_message_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–≥–ª–∞—Å–∏—è</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start",
            parse_mode='HTML'
        )
        return ConversationHandler.END


async def handle_consent_decline(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç —Å–æ–≥–ª–∞—Å–∏—è"""
    query = update.callback_query
    if not query:
        return WAITING_RESUME
    
    await query.answer("–ü–æ–Ω–∏–º–∞–µ–º –≤–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ")
    
    try:
        if not query.data:
            return WAITING_RESUME
        user_id = int(query.data.split('_')[-1])
        logger.info(f"‚ùå User {user_id} declined consent")
        
        await query.edit_message_text(
            "‚ùå <b>–°–æ–≥–ª–∞—Å–∏–µ –Ω–µ –¥–∞–Ω–æ</b>\n\n"
            "–ü–æ–Ω–∏–º–∞–µ–º! –ë–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –º—ã –Ω–µ –º–æ–∂–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à–µ —Ä–µ–∑—é–º–µ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –§–ó-152.\n\n"
            "üîÑ <b>–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ:</b>\n"
            "–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è - –º—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å! üòä\n\n"
            "üÜï <b>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ:</b> /start",
            parse_mode='HTML'
        )
        
        # –û—á–∏—â–∞–µ–º pending –¥–∞–Ω–Ω—ã–µ
        if context.user_data:
            context.user_data.pop('pending_resume_text', None)
        
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"‚ùå Error processing consent decline: {e}")
        return ConversationHandler.END


async def handle_show_privacy(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"""
    query = update.callback_query
    if not query:
        return WAITING_RESUME
    
    await query.answer("–û—Ç–∫—Ä—ã–≤–∞—é –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏...")
    
    try:
        # –ß–∏—Ç–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ —Ñ–∞–π–ª–∞
        with open('docs/legal/privacy_policy.md', 'r', encoding='utf-8') as f:
            privacy_content = f.read()
        
        # –£–±–∏—Ä–∞–µ–º markdown –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º–æ–≥–æ –≤–∏–¥–∞ –≤ Telegram
        privacy_text = privacy_content.replace('# ', '').replace('## ', '').replace('### ', '')
        
        # Telegram –ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤ - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        max_length = 4000  # –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        
        if len(privacy_text) <= max_length:
            # –¢–µ–∫—Å—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–æ–≥–ª–∞—Å–∏—é", callback_data="back_to_consent")]
            ])
            
            await query.edit_message_text(
                f"üìÑ <b>–ü–û–õ–ò–¢–ò–ö–ê –ö–û–ù–§–ò–î–ï–ù–¶–ò–ê–õ–¨–ù–û–°–¢–ò</b>\n\n{privacy_text}",
                parse_mode='HTML',
                reply_markup=keyboard
            )
        else:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            parts = []
            current_part = ""
            
            for line in privacy_text.split('\n'):
                if len(current_part + line + '\n') <= max_length:
                    current_part += line + '\n'
                else:
                    if current_part:
                        parts.append(current_part.strip())
                    current_part = line + '\n'
            
            if current_part:
                parts.append(current_part.strip())
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å
            if parts:
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–æ–≥–ª–∞—Å–∏—é", callback_data="back_to_consent")]
                ])
                
                await query.edit_message_text(
                    f"üìÑ <b>–ü–û–õ–ò–¢–ò–ö–ê –ö–û–ù–§–ò–î–ï–ù–¶–ò–ê–õ–¨–ù–û–°–¢–ò</b>\n<i>(—á–∞—Å—Ç—å 1 –∏–∑ {len(parts)})</i>\n\n{parts[0]}",
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                for i, part in enumerate(parts[1:], 2):
                    if query.message:
                        await query.message.reply_text(
                            f"üìÑ <b>–ü–û–õ–ò–¢–ò–ö–ê –ö–û–ù–§–ò–î–ï–ù–¶–ò–ê–õ–¨–ù–û–°–¢–ò</b>\n<i>(—á–∞—Å—Ç—å {i} –∏–∑ {len(parts)})</i>\n\n{part}",
                            parse_mode='HTML'
                        )
        
        return WAITING_RESUME
        
    except FileNotFoundError:
        await query.edit_message_text(
            "‚ùå <b>–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</b>\n\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: /support",
            parse_mode='HTML'
        )
        return WAITING_RESUME
    except Exception as e:
        logger.error(f"‚ùå Error showing privacy policy: {e}")
        await query.edit_message_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª–∏—Ç–∏–∫–∏</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: /support",
            parse_mode='HTML'
        )
        return WAITING_RESUME


async def handle_back_to_consent(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ñ–æ—Ä–º–µ —Å–æ–≥–ª–∞—Å–∏—è –∏–∑ –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"""
    query = update.callback_query
    if not query:
        return WAITING_RESUME
    
    await query.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ–≥–ª–∞—Å–∏—é...")
    
    # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    user_id = None
    if context.user_data:
        user_id = context.user_data.get('analytics_user_id')
    
    if not user_id:
        await query.edit_message_text(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start",
            parse_mode='HTML'
        )
        return ConversationHandler.END
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Å–æ–≥–ª–∞—Å–∏—è –∑–∞–Ω–æ–≤–æ
    consent_message = (
        "üîí <b>–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
        "–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ –Ω—É–∂–Ω–æ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ —Å–æ–≥–ª–∞—Å–Ω–æ –§–ó-152.\n\n"
        "üìã <b>–ß—Ç–æ –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º:</b>\n"
        "‚Ä¢ –¢–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ —Ä–µ–∑—é–º–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞)\n"
        "‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–∫–∞–Ω—Å–∏–∏\n\n"
        "üîê <b>–ì–∞—Ä–∞–Ω—Ç–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ –î–∞–Ω–Ω—ã–µ –ù–ï —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n"
        "‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
        "‚Ä¢ –ü–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å\n\n"
        "üìÑ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: /privacy\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–∏—Å—å–º–∞?"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ–≥–ª–∞—Å–∏—è
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=f"consent_agree_{user_id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"consent_decline_{user_id}")],
        [InlineKeyboardButton("üìÑ –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", callback_data="show_privacy")]
    ])
    
    await query.edit_message_text(
        consent_message,
        parse_mode='HTML',
        reply_markup=keyboard
    )
    
    return WAITING_RESUME


def get_conversation_handler():
    """–°–æ–∑–¥–∞–µ—Ç ConversationHandler –¥–ª—è v7.2 —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –æ—Ü–µ–Ω–æ–∫"""
    from telegram.ext import CommandHandler, MessageHandler, CallbackQueryHandler, filters
    
    return ConversationHandler(
        entry_points=[
            CommandHandler("start", start_conversation),
            CallbackQueryHandler(handle_start_work_callback, pattern=r'^start_work$')
        ],
        states={
            WAITING_VACANCY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_vacancy)
            ],
            WAITING_RESUME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_resume),
                # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —Å–æ–≥–ª–∞—Å–∏—è
                CallbackQueryHandler(handle_consent_agree, pattern=r'^consent_agree_'),
                CallbackQueryHandler(handle_consent_decline, pattern=r'^consent_decline_'),
                CallbackQueryHandler(handle_show_privacy, pattern=r'^show_privacy$'),
                CallbackQueryHandler(handle_back_to_consent, pattern=r'^back_to_consent$')
            ],
            WAITING_IMPROVEMENT_REQUEST: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_improvement_request)
            ],
            WAITING_FEEDBACK: [
                # Callback handlers –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (—Ç–æ–ª—å–∫–æ –ª–∞–π–∫–∏/–¥–∏–∑–ª–∞–π–∫–∏)
                CallbackQueryHandler(handle_feedback_button, pattern=r'^feedback_(like|dislike)_'),
                CallbackQueryHandler(handle_improve_letter, pattern=r'^improve_letter_'),
                CallbackQueryHandler(handle_retry_generation, pattern=r'^retry_generation_'),
                CallbackQueryHandler(start_conversation, pattern=r'^restart$'),
                # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_waiting_feedback_message)
            ]
        },
        fallbacks=[
            CommandHandler('cancel', cancel_conversation),
            CommandHandler('start', start_conversation)
        ],
        name="conversation_v7_2",
        persistent=False,
        per_message=False,  # False –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å MessageHandler –∏ CallbackQueryHandler
        per_chat=True,
        per_user=True
    )


def get_command_handlers():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
    from telegram.ext import CommandHandler, MessageHandler, CallbackQueryHandler, filters
    
    return [
        CommandHandler("help", help_command),
        CommandHandler("about", about_command),
        CommandHandler("support", support_command),
        # –°–ö–†–´–¢–´–ï –∫–æ–º–∞–Ω–¥—ã (–ù–ï –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –º–µ–Ω—é)
        CommandHandler("privacy", privacy_command),
        CommandHandler("terms", terms_command),
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Å—å–º–∞ –≤–Ω–µ —Å–µ—Å—Å–∏–∏
        CallbackQueryHandler(handle_start_work_callback, pattern=r'^start_work$'),
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–æ—Ç—É"
        CallbackQueryHandler(handle_back_to_bot, pattern=r'^back_to_bot$'),
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º!)
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message_outside_session)
    ]


# ============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô –í–ù–ï –ê–ö–¢–ò–í–ù–û–ô –°–ï–°–°–ò–ò
# ============================================================================

async def handle_message_outside_session(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Å—å–º–∞
    """
    if not update.message or not update.message.text:
        return
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ ConversationHandler
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Å—å–º–∞ - –ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if context.user_data and context.user_data.get('conversation_state'):
        logger.info(f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º outside_session handler")
        return
    
    user = update.effective_user
    user_name = f", {user.first_name}" if user and user.first_name else ""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    current_hour = datetime.now().hour
    if 6 <= current_hour < 12:
        time_greeting = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
    elif 12 <= current_hour < 18:
        time_greeting = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å"
    elif 18 <= current_hour < 23:
        time_greeting = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
    else:
        time_greeting = "–î–æ–±—Ä–æ–π –Ω–æ—á–∏"
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª
    message_text = update.message.text.lower().strip()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    if any(word in message_text for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–¥–æ–±—Ä–æ', 'hi', 'hello']):
        response_type = "greeting"
    elif any(word in message_text for word in ['–ø–æ–º–æ—â—å', 'help', '—á—Ç–æ –¥–µ–ª–∞—Ç—å', '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç']):
        response_type = "help"
    elif any(word in message_text for word in ['–ø–∏—Å—å–º–æ', '—Ä–µ–∑—é–º–µ', '–≤–∞–∫–∞–Ω—Å–∏—è', '—Å–æ–ø—Ä–æ–≤–æ–¥', '—Ä–∞–±–æ—Ç–∞']):
        response_type = "work_related"
    elif any(word in message_text for word in ['—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é', 'thanks']):
        response_type = "thanks"
    else:
        response_type = "general"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    if response_type == "greeting":
        main_text = f"{time_greeting}{user_name}! üëã\n\n–†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å!"
    elif response_type == "help":
        main_text = f"{time_greeting}{user_name}! ü§ù\n\n–ü–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –æ—Ç–ª–∏—á–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ!"
    elif response_type == "work_related":
        main_text = f"{time_greeting}{user_name}! üíº\n\n–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–±–æ—Ç—É –º–µ—á—Ç—ã!"
    elif response_type == "thanks":
        main_text = f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞{user_name}! üòä\n\n–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å!"
    else:
        main_text = f"{time_greeting}{user_name}! ü§ñ\n\n–Ø –ø–æ–º–æ–≥–∞—é —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∏—Å—å–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∏ –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –æ–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω)
    limit_info = ""
    if context.user_data and context.user_data.get('analytics_user_id'):
        user_id = context.user_data['analytics_user_id']
        try:
            limits = await subscription_service.check_user_limits(user_id)
            subscription_info = subscription_service.format_subscription_info(limits)
            limit_info = f"\n{subscription_info}"
            
            if not limits['can_generate']:
                limit_info += f"‚ö†Ô∏è –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: /support"
        except Exception as e:
            logger.error(f"Error checking limits in outside session: {e}")
    
    response_message = f"""
{main_text}

üéØ <b>–ß—Ç–æ —è —É–º–µ—é:</b>
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∏—Å—å–º–∞
‚Ä¢ –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Å—å–º–∞ –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
‚Ä¢ –†–∞–±–æ—Ç–∞—Ç—å –±—ã—Å—Ç—Ä–æ (30-45 —Å–µ–∫—É–Ω–¥)

üí° <b>–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:</b>
–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start{limit_info}

üöÄ <b>–ì–æ—Ç–æ–≤—ã —Å–æ–∑–¥–∞—Ç—å –ø–∏—Å—å–º–æ, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–º–µ—Ç—è—Ç?</b>
"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
    keyboard = get_start_work_keyboard()
    
    await update.message.reply_text(
        response_message,
        parse_mode='HTML',
        reply_markup=keyboard
    )


# ============================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ============================================================================

@rate_limit('commands')
async def handle_start_work_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–æ–∑–¥–∞—Ç—å –ø–∏—Å—å–º–æ' –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–Ω–µ —Å–µ—Å—Å–∏–∏"""
    query = update.callback_query
    if not query:
        return ConversationHandler.END
    
    await query.answer("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∏—Å—å–º–∞!")
    
    logger.info("üîç START_WORK_CALLBACK: –í—ã–∑—ã–≤–∞–µ–º start_conversation...")
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–ª–æ—É —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Å—å–º–∞
    result = await start_conversation(update, context)
    logger.info(f"üîç START_WORK_CALLBACK: start_conversation returned {result}")
    return result


# ========================================
# –°–ö–†–´–¢–´–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –Æ–†–ò–î–ò–ß–ï–°–ö–ò–• –î–û–ö–£–ú–ï–ù–¢–û–í
# ========================================

async def privacy_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–∫—Ä—ã—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"""
    if not update.message:
        return
    
    try:
        # –ß–∏—Ç–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ —Ñ–∞–π–ª–∞
        with open('docs/legal/privacy_policy.md', 'r', encoding='utf-8') as f:
            privacy_content = f.read()
        
        # –£–±–∏—Ä–∞–µ–º markdown –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º–æ–≥–æ –≤–∏–¥–∞ –≤ Telegram
        privacy_text = privacy_content.replace('# ', '').replace('## ', '').replace('### ', '')
        
        # Telegram –ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤ - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        max_length = 4000  # –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        
        if len(privacy_text) <= max_length:
            # –¢–µ–∫—Å—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–æ—Ç—É", callback_data="back_to_bot")]
            ])
            
            await update.message.reply_text(
                f"üìÑ <b>–ü–û–õ–ò–¢–ò–ö–ê –ö–û–ù–§–ò–î–ï–ù–¶–ò–ê–õ–¨–ù–û–°–¢–ò</b>\n\n{privacy_text}",
                parse_mode='HTML',
                reply_markup=keyboard
            )
        else:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            parts = []
            current_part = ""
            
            for line in privacy_text.split('\n'):
                if len(current_part + line + '\n') <= max_length:
                    current_part += line + '\n'
                else:
                    if current_part:
                        parts.append(current_part.strip())
                    current_part = line + '\n'
            
            if current_part:
                parts.append(current_part.strip())
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–æ–π
            if parts:
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–æ—Ç—É", callback_data="back_to_bot")]
                ])
                
                await update.message.reply_text(
                    f"üìÑ <b>–ü–û–õ–ò–¢–ò–ö–ê –ö–û–ù–§–ò–î–ï–ù–¶–ò–ê–õ–¨–ù–û–°–¢–ò</b>\n<i>(—á–∞—Å—Ç—å 1 –∏–∑ {len(parts)})</i>\n\n{parts[0]}",
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                for i, part in enumerate(parts[1:], 2):
                    await update.message.reply_text(
                        f"üìÑ <b>–ü–û–õ–ò–¢–ò–ö–ê –ö–û–ù–§–ò–î–ï–ù–¶–ò–ê–õ–¨–ù–û–°–¢–ò</b>\n<i>(—á–∞—Å—Ç—å {i} –∏–∑ {len(parts)})</i>\n\n{part}",
                        parse_mode='HTML'
                    )
        
    except FileNotFoundError:
        await update.message.reply_text(
            "‚ùå <b>–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</b>\n\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: /support",
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"‚ùå Error showing privacy policy: {e}")
        await update.message.reply_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª–∏—Ç–∏–∫–∏</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: /support",
            parse_mode='HTML'
        )


async def terms_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–∫—Ä—ã—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è"""
    if not update.message:
        return
    
    try:
        # –ß–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞
        with open('docs/legal/terms_of_service.md', 'r', encoding='utf-8') as f:
            terms_content = f.read()
        
        # –£–±–∏—Ä–∞–µ–º markdown –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º–æ–≥–æ –≤–∏–¥–∞ –≤ Telegram
        terms_text = terms_content.replace('# ', '').replace('## ', '').replace('### ', '')
        
        # Telegram –ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤ - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏  
        max_length = 4000  # –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        
        if len(terms_text) <= max_length:
            # –¢–µ–∫—Å—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–æ—Ç—É", callback_data="back_to_bot")]
            ])
            
            await update.message.reply_text(
                f"üìã <b>–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ï –°–û–ì–õ–ê–®–ï–ù–ò–ï</b>\n\n{terms_text}",
                parse_mode='HTML',
                reply_markup=keyboard
            )
        else:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            parts = []
            current_part = ""
            
            for line in terms_text.split('\n'):
                if len(current_part + line + '\n') <= max_length:
                    current_part += line + '\n'
                else:
                    if current_part:
                        parts.append(current_part.strip())
                    current_part = line + '\n'
            
            if current_part:
                parts.append(current_part.strip())
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–æ–π
            if parts:
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–æ—Ç—É", callback_data="back_to_bot")]
                ])
                
                await update.message.reply_text(
                    f"üìã <b>–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ï –°–û–ì–õ–ê–®–ï–ù–ò–ï</b>\n<i>(—á–∞—Å—Ç—å 1 –∏–∑ {len(parts)})</i>\n\n{parts[0]}",
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                for i, part in enumerate(parts[1:], 2):
                    await update.message.reply_text(
                        f"üìã <b>–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ï –°–û–ì–õ–ê–®–ï–ù–ò–ï</b>\n<i>(—á–∞—Å—Ç—å {i} –∏–∑ {len(parts)})</i>\n\n{part}",
                        parse_mode='HTML'
                    )
        
    except FileNotFoundError:
        await update.message.reply_text(
            "‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</b>\n\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: /support",
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"‚ùå Error showing terms of service: {e}")
        await update.message.reply_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: /support",
            parse_mode='HTML'
        )


async def handle_back_to_bot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–æ—Ç—É'"""
    query = update.callback_query
    if not query:
        return
    
    await query.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –±–æ—Ç—É...")
    
    await query.edit_message_text(
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!</b>\n\n"
        "üéØ <b>–ì–æ—Ç–æ–≤—ã —Å–æ–∑–¥–∞—Ç—å —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ?</b>\n\n"
        "üí° –ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å",
        parse_mode='HTML'
    )


 