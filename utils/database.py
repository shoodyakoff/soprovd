import os
from typing import Optional
import logging

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç Supabase
try:
    from supabase import create_client, Client
    print("‚úÖ Supabase imported successfully")
    SUPABASE_AVAILABLE = True
except ImportError as e:
    print(f"‚ùå Supabase import failed: {e}")
    create_client = None
    Client = None
    SUPABASE_AVAILABLE = False

logger = logging.getLogger(__name__)

class SupabaseClient:
    _instance: Optional[object] = None
    _failed_init = False  # –§–ª–∞–≥ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    
    @classmethod
    def get_client(cls) -> Optional[object]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç Supabase (—Å–∏–Ω–≥–ª—Ç–æ–Ω)"""
        if cls._instance is None and not cls._failed_init:
            try:
                if not SUPABASE_AVAILABLE or create_client is None:
                    logger.warning("Supabase library not available")
                    cls._failed_init = True
                    return None
                
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ config.py
                from config import SUPABASE_URL, SUPABASE_KEY
                
                print(f"üîç DATABASE DEBUG: FINAL SUPABASE_URL = {SUPABASE_URL}")
                print(f"üîç DATABASE DEBUG: FINAL SUPABASE_KEY = {SUPABASE_KEY[:20] if SUPABASE_KEY else 'NONE'}...")
                
                if not SUPABASE_URL or not SUPABASE_KEY:
                    logger.warning("Supabase credentials not found in config")
                    cls._failed_init = True
                    return None
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, –∏–∑–±–µ–≥–∞—è –ø—Ä–æ–±–ª–µ–º —Å –≤–µ—Ä—Å–∏—è–º–∏
                cls._instance = create_client(
                    supabase_url=SUPABASE_URL,
                    supabase_key=SUPABASE_KEY
                )
                logger.info("‚úÖ Supabase client initialized successfully")
                
            except Exception as e:
                logger.error(f"‚ùå Failed to initialize Supabase client: {e}")
                # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
                import traceback
                logger.error(f"Full traceback: {traceback.format_exc()}")
                cls._failed_init = True
                print("‚ö†Ô∏è  –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ Supabase")
                return None
                
        return cls._instance
    
    @classmethod
    def is_available(cls) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Supabase"""
        try:
            from config import ANALYTICS_ENABLED
            return cls.get_client() is not None and ANALYTICS_ENABLED
        except:
            return False 