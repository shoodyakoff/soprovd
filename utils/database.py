import os
from typing import Optional, Any
import logging

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç Supabase
try:
    from supabase import create_client, Client
    print("‚úÖ Supabase imported successfully")
    SUPABASE_AVAILABLE = True
    SupabaseClientType = Client
except ImportError as e:
    print(f"‚ùå Supabase import failed: {e}")
    create_client = None
    Client = None
    SUPABASE_AVAILABLE = False
    SupabaseClientType = Any

logger = logging.getLogger(__name__)

class SupabaseClient:
    """Supabase –∫–ª–∏–µ–Ω—Ç —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    _instance: Optional[Any] = None
    _failed_init = False
    
    @classmethod
    def get_client(cls) -> Optional[Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç Supabase (—Å–∏–Ω–≥–ª—Ç–æ–Ω)"""
        if cls._instance is None and not cls._failed_init:
            try:
                if not SUPABASE_AVAILABLE or create_client is None:
                    logger.warning("Supabase library not available")
                    print("‚ùå Supabase library not available")
                    cls._failed_init = True
                    return None
                
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ config.py
                from config import SUPABASE_URL, SUPABASE_KEY, SUPABASE_SERVICE_KEY, ANALYTICS_ENABLED
                
                logger.info("üîç RAILWAY DEBUG: Supabase configuration check")
                logger.info(f"   ANALYTICS_ENABLED: {ANALYTICS_ENABLED}")
                logger.info(f"   SUPABASE_URL: {SUPABASE_URL[:50] if SUPABASE_URL else 'None'}...")
                logger.info(f"   SUPABASE_KEY: {SUPABASE_KEY[:30] if SUPABASE_KEY else 'None'}...")
                logger.info(f"   SUPABASE_SERVICE_KEY: {SUPABASE_SERVICE_KEY[:30] if SUPABASE_SERVICE_KEY else 'None'}...")
                
                if not ANALYTICS_ENABLED:
                    logger.info("Analytics disabled by configuration")
                    logger.warning("‚ö†Ô∏è Analytics disabled by ANALYTICS_ENABLED=false")
                    cls._failed_init = True
                    return None
                
                if not SUPABASE_URL or not SUPABASE_SERVICE_KEY:
                    logger.warning("Supabase credentials not found in config")
                    logger.error("‚ùå Supabase credentials missing!")
                    logger.error(f"   SUPABASE_URL exists: {bool(SUPABASE_URL)}")
                    logger.error(f"   SUPABASE_SERVICE_KEY exists: {bool(SUPABASE_SERVICE_KEY)}")
                    cls._failed_init = True
                    return None
                
                logger.info(f"üîÑ Trying to initialize Supabase client with SERVICE KEY...")
                
                # üîë –ò–°–ü–û–õ–¨–ó–£–ï–ú SERVICE KEY –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É!
                cls._instance = create_client(
                    supabase_url=SUPABASE_URL,
                    supabase_key=SUPABASE_SERVICE_KEY
                )
                logger.info("‚úÖ Supabase client initialized successfully")
                print("‚úÖ Supabase client initialized successfully")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                try:
                    test_result = cls._instance.table('users').select('id').limit(1).execute()
                    logger.info("‚úÖ Supabase connection test passed")
                    print("‚úÖ Supabase connection test passed")
                except Exception as test_e:
                    logger.error(f"‚ùå Supabase connection test failed: {test_e}")
                    print(f"‚ùå Supabase connection test failed: {test_e}")
                    # –ù–µ —Ñ–µ–π–ª–∏–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é, –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∞–≤–∞–º–∏
                
            except TypeError as e:
                if "proxy" in str(e):
                    logger.error(f"‚ùå Supabase version incompatibility (proxy argument): {e}")
                    print(f"‚ùå Supabase version incompatibility - need different version")
                else:
                    logger.error(f"‚ùå Supabase TypeError: {e}")
                    print(f"‚ùå Supabase TypeError: {e}")
                cls._failed_init = True
                print("‚ö†Ô∏è –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ Supabase")
                return None
                
            except Exception as e:
                logger.error(f"‚ùå Failed to initialize Supabase client: {e}")
                print(f"‚ùå Failed to initialize Supabase client: {e}")
                cls._failed_init = True
                print("‚ö†Ô∏è –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ Supabase")
                return None
                
        return cls._instance
    
    @classmethod
    def is_available(cls) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Supabase"""
        try:
            from config import ANALYTICS_ENABLED
            client_available = cls.get_client() is not None
            result = client_available and ANALYTICS_ENABLED
            print(f"üîç Supabase availability check: client={client_available}, enabled={ANALYTICS_ENABLED}, result={result}")
            return result
        except Exception as e:
            print(f"‚ùå Error checking Supabase availability: {e}")
            return False 


# ========================================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –°–û–ì–õ–ê–°–ò–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
# ========================================

async def get_user_consent_status(user_id: int) -> Optional[dict]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–æ–≥–ª–∞—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        
    Returns:
        dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–≥–ª–∞—Å–∏–∏ –∏–ª–∏ None –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
        {
            'consent_given': bool,
            'consent_timestamp': datetime,
            'consent_version': str,
            'marketing_consent': bool
        }
    """
    try:
        client = SupabaseClient.get_client()
        if not client:
            logger.warning("Supabase client not available for consent check")
            return None
            
        result = client.table('users').select(
            'consent_given, consent_timestamp, consent_version, marketing_consent'
        ).eq('id', user_id).execute()
        
        if result.data:
            consent_data = result.data[0]
            logger.info(f"‚úÖ Consent status retrieved for user {user_id}: {consent_data}")
            return consent_data
        else:
            logger.info(f"‚ö†Ô∏è No consent data found for user {user_id}")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå Error getting consent status for user {user_id}: {e}")
        return None


async def save_user_consent(user_id: int, consent_version: str = 'v1.0', marketing_consent: bool = False) -> bool:
    """
    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        consent_version: –í–µ—Ä—Å–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
        marketing_consent: –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
        
    Returns:
        bool: True –µ—Å–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
    """
    try:
        client = SupabaseClient.get_client()
        if not client:
            logger.warning("Supabase client not available for consent saving")
            return False
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å–æ–≥–ª–∞—Å–∏—è
        result = client.table('users').update({
            'consent_given': True,
            'consent_timestamp': 'now()',
            'consent_version': consent_version,
            'marketing_consent': marketing_consent
        }).eq('id', user_id).execute()
        
        if result.data:
            logger.info(f"‚úÖ Consent saved for user {user_id}, version {consent_version}")
            return True
        else:
            logger.error(f"‚ùå Failed to save consent for user {user_id}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Error saving consent for user {user_id}: {e}")
        return False


async def revoke_user_consent(user_id: int) -> bool:
    """
    –û—Ç–æ–∑–≤–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ email support)
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        
    Returns:
        bool: True –µ—Å–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ –æ—Ç–æ–∑–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ
    """
    try:
        client = SupabaseClient.get_client()
        if not client:
            logger.warning("Supabase client not available for consent revocation")
            return False
            
        # –ü–æ–º–µ—á–∞–µ–º —Å–æ–≥–ª–∞—Å–∏–µ –∫–∞–∫ –æ—Ç–æ–∑–≤–∞–Ω–Ω–æ–µ (–ù–ï —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é)
        result = client.table('users').update({
            'consent_given': False,
            'consent_timestamp': 'now()'  # –í—Ä–µ–º—è –æ—Ç–∑—ã–≤–∞
        }).eq('id', user_id).execute()
        
        if result.data:
            logger.info(f"‚úÖ Consent revoked for user {user_id}")
            return True
        else:
            logger.error(f"‚ùå Failed to revoke consent for user {user_id}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Error revoking consent for user {user_id}: {e}")
        return False


async def check_user_needs_consent(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        
    Returns:
        bool: True –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ
    """
    try:
        consent_status = await get_user_consent_status(user_id)
        
        if consent_status is None:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –Ω—É–∂–Ω–æ —Å–æ–≥–ª–∞—Å–∏–µ
            logger.info(f"üÜï New user {user_id} - consent required")
            return True
            
        if consent_status.get('consent_given') is None:
            # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è - –Ω—É–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å
            logger.info(f"‚ö†Ô∏è Existing user {user_id} without consent - consent required")
            return True
            
        if consent_status.get('consent_given') is False:
            # –°–æ–≥–ª–∞—Å–∏–µ –æ—Ç–æ–∑–≤–∞–Ω–æ - –Ω—É–∂–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ
            logger.info(f"‚ùå User {user_id} revoked consent - new consent required")
            return True
            
        # –°–æ–≥–ª–∞—Å–∏–µ –µ—Å—Ç—å –∏ –∞–∫—Ç–∏–≤–Ω–æ
        logger.info(f"‚úÖ User {user_id} has valid consent")
        return False
        
    except Exception as e:
        logger.error(f"‚ùå Error checking consent requirement for user {user_id}: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ª—É—á—à–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        return True


async def migrate_existing_users_consent() -> dict:
    """
    –ú—è–≥–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ø—Ä–æ—Å—Ç–∞–≤–∏—Ç—å implied consent
    
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–∞ –û–î–ò–ù –†–ê–ó –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î
    
    Returns:
        dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
    """
    try:
        client = SupabaseClient.get_client()
        if not client:
            logger.warning("Supabase client not available for migration")
            return {'error': 'Database not available'}
            
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è
        users_without_consent = client.table('users').select(
            'id'
        ).is_('consent_given', 'null').execute()
        
        if not users_without_consent.data:
            logger.info("‚úÖ No users found without consent - migration complete")
            return {'migrated': 0, 'already_migrated': 0}
            
        # –ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º implied consent
        migration_result = client.table('users').update({
            'consent_given': True,
            'consent_timestamp': 'now()',
            'consent_version': 'v1.0',
            'marketing_consent': False
        }).is_('consent_given', 'null').execute()
        
        migrated_count = len(users_without_consent.data)
        logger.info(f"‚úÖ Migration complete: {migrated_count} users migrated to implied consent")
        
        return {
            'migrated': migrated_count,
            'already_migrated': 0,
            'status': 'success'
        }
        
    except Exception as e:
        logger.error(f"‚ùå Error during consent migration: {e}")
        return {'error': str(e)} 