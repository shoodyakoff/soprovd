import os
from typing import Optional
import logging

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç Supabase
try:
    from supabase import create_client, Client
    print("‚úÖ Supabase imported successfully")
    SUPABASE_AVAILABLE = True
except ImportError as e:
    print(f"‚ùå Supabase import failed: {e}")
    create_client = None
    Client = None
    SUPABASE_AVAILABLE = False

logger = logging.getLogger(__name__)

class SupabaseClient:
    """Supabase –∫–ª–∏–µ–Ω—Ç —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    _instance: Optional[object] = None
    _failed_init = False
    
    @classmethod
    def get_client(cls) -> Optional[object]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç Supabase (—Å–∏–Ω–≥–ª—Ç–æ–Ω)"""
        if cls._instance is None and not cls._failed_init:
            try:
                if not SUPABASE_AVAILABLE or create_client is None:
                    logger.warning("Supabase library not available")
                    print("‚ùå Supabase library not available")
                    cls._failed_init = True
                    return None
                
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ config.py
                from config import SUPABASE_URL, SUPABASE_KEY, SUPABASE_SERVICE_KEY, ANALYTICS_ENABLED
                
                print("üîç RAILWAY DEBUG: Supabase configuration check")
                print(f"   ANALYTICS_ENABLED: {ANALYTICS_ENABLED}")
                print(f"   SUPABASE_URL: {SUPABASE_URL[:50] if SUPABASE_URL else 'None'}...")
                print(f"   SUPABASE_KEY: {SUPABASE_KEY[:30] if SUPABASE_KEY else 'None'}...")
                print(f"   SUPABASE_SERVICE_KEY: {SUPABASE_SERVICE_KEY[:30] if SUPABASE_SERVICE_KEY else 'None'}...")
                
                if not ANALYTICS_ENABLED:
                    logger.info("Analytics disabled by configuration")
                    print("‚ö†Ô∏è Analytics disabled by ANALYTICS_ENABLED=false")
                    cls._failed_init = True
                    return None
                
                if not SUPABASE_URL or not SUPABASE_SERVICE_KEY:
                    logger.warning("Supabase credentials not found in config")
                    print("‚ùå Supabase credentials missing!")
                    print(f"   SUPABASE_URL exists: {bool(SUPABASE_URL)}")
                    print(f"   SUPABASE_SERVICE_KEY exists: {bool(SUPABASE_SERVICE_KEY)}")
                    cls._failed_init = True
                    return None
                
                print(f"üîÑ Trying to initialize Supabase client with SERVICE KEY...")
                
                # üîë –ò–°–ü–û–õ–¨–ó–£–ï–ú SERVICE KEY –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É!
                cls._instance = create_client(
                    supabase_url=SUPABASE_URL,
                    supabase_key=SUPABASE_SERVICE_KEY
                )
                logger.info("‚úÖ Supabase client initialized successfully")
                print("‚úÖ Supabase client initialized successfully")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                try:
                    test_result = cls._instance.table('users').select('id').limit(1).execute()
                    print("‚úÖ Supabase connection test passed")
                    logger.info("‚úÖ Supabase connection test passed")
                except Exception as test_e:
                    print(f"‚ùå Supabase connection test failed: {test_e}")
                    logger.error(f"‚ùå Supabase connection test failed: {test_e}")
                    # –ù–µ —Ñ–µ–π–ª–∏–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é, –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∞–≤–∞–º–∏
                
            except TypeError as e:
                if "proxy" in str(e):
                    logger.error(f"‚ùå Supabase version incompatibility (proxy argument): {e}")
                    print(f"‚ùå Supabase version incompatibility - need different version")
                else:
                    logger.error(f"‚ùå Supabase TypeError: {e}")
                    print(f"‚ùå Supabase TypeError: {e}")
                cls._failed_init = True
                print("‚ö†Ô∏è –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ Supabase")
                return None
                
            except Exception as e:
                logger.error(f"‚ùå Failed to initialize Supabase client: {e}")
                print(f"‚ùå Failed to initialize Supabase client: {e}")
                cls._failed_init = True
                print("‚ö†Ô∏è –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ Supabase")
                return None
                
        return cls._instance
    
    @classmethod
    def is_available(cls) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Supabase"""
        try:
            from config import ANALYTICS_ENABLED
            client_available = cls.get_client() is not None
            result = client_available and ANALYTICS_ENABLED
            print(f"üîç Supabase availability check: client={client_available}, enabled={ANALYTICS_ENABLED}, result={result}")
            return result
        except Exception as e:
            print(f"‚ùå Error checking Supabase availability: {e}")
            return False 