"""
Rate Limiter –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç DoS –∞—Ç–∞–∫
–°–æ–ø—Ä–æ–≤–æ–¥ v9.2 - Security Protection

–•—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏ (–±–µ–∑ Redis –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è)
Sliding window algorithm –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞
"""
import time
import logging
from typing import Dict, List, Tuple, Optional
from functools import wraps
from collections import defaultdict, deque

logger = logging.getLogger(__name__)


class InMemoryRateLimiter:
    """
    Production-ready rate limiter —Å —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ø–∞–º—è—Ç–∏
    
    –õ–∏–º–∏—Ç—ã:
    - 5 –∫–æ–º–∞–Ω–¥ –≤ 60 —Å–µ–∫—É–Ω–¥ (–æ–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã)
    - 3 AI –∑–∞–ø—Ä–æ—Å–∞ –≤ 300 —Å–µ–∫—É–Ω–¥ (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∏—Å–µ–º)
    - 50KB –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
    """
    
    def __init__(self):
        # Sliding window –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è
        self.user_requests: Dict[str, deque] = defaultdict(deque)
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–∏–º–∏—Ç–æ–≤
        self.limits = {
            'commands': {'rate': 5, 'window': 60},        # 5 –∫–æ–º–∞–Ω–¥/–º–∏–Ω—É—Ç—É
            'ai_requests': {'rate': 3, 'window': 300},    # 3 AI –∑–∞–ø—Ä–æ—Å–∞/5 –º–∏–Ω—É—Ç
            'text_size': {'max_size': 50 * 1024}          # 50KB max text
        }
        
        # –ê–¥–º–∏–Ω—ã (–æ–±—Ö–æ–¥—è—Ç –ª–∏–º–∏—Ç—ã)
        self.admin_ids: List[int] = []
        
        logger.info("üîí InMemoryRateLimiter initialized")
        logger.info(f"   Commands limit: {self.limits['commands']['rate']}/{self.limits['commands']['window']}s")
        logger.info(f"   AI requests limit: {self.limits['ai_requests']['rate']}/{self.limits['ai_requests']['window']}s")
        logger.info(f"   Text size limit: {self.limits['text_size']['max_size']} bytes")
    
    def set_admin_ids(self, admin_ids: List[int]):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ (–æ–±—Ö–æ–¥—è—Ç –ª–∏–º–∏—Ç—ã)"""
        self.admin_ids = admin_ids
        logger.info(f"üîí Rate limiter admin IDs set: {admin_ids}")
    
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
        return user_id in self.admin_ids
    
    def check_rate_limit(self, user_id: int, action_type: str) -> Tuple[bool, Dict]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å rate limit –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            (allowed: bool, info: dict)
            info —Å–æ–¥–µ—Ä–∂–∏—Ç: allowed, requests_left, retry_after_seconds, warning
        """
        # –ê–¥–º–∏–Ω—ã –æ–±—Ö–æ–¥—è—Ç –ª–∏–º–∏—Ç—ã
        if self.is_admin(user_id):
            return True, {
                'allowed': True,
                'requests_left': 999,
                'retry_after_seconds': 0,
                'warning': False,
                'admin_bypass': True
            }
        
        if action_type not in self.limits:
            logger.warning(f"üîí Unknown action type: {action_type}")
            return True, {'allowed': True, 'requests_left': 999}
        
        limit_config = self.limits[action_type]
        max_requests = limit_config['rate']
        window_seconds = limit_config['window']
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 1000 –∑–∞–ø—Ä–æ—Å–æ–≤
        if hasattr(self, '_cleanup_counter'):
            self._cleanup_counter += 1
        else:
            self._cleanup_counter = 1
            
        if self._cleanup_counter % 1000 == 0:
            logger.info(f"üßπ Auto-cleanup triggered at request #{self._cleanup_counter}")
            self.cleanup_old_data()
        
        # –ö–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è requests —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–µ–π—Å—Ç–≤–∏—è
        key = f"{user_id}:{action_type}"
        current_time = time.time()
        
        # –ü–æ–ª—É—á–∞–µ–º deque –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–¥–µ–π—Å—Ç–≤–∏—è
        requests_deque = self.user_requests[key]
        
        # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–≤–Ω–µ sliding window)
        while requests_deque and requests_deque[0] <= current_time - window_seconds:
            requests_deque.popleft()
        
        current_requests = len(requests_deque)
        requests_left = max(0, max_requests - current_requests)
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ 80% –ª–∏–º–∏—Ç–∞
        warning_threshold = int(max_requests * 0.8)
        warning = current_requests >= warning_threshold
        
        if current_requests >= max_requests:
            # –õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω
            # –°—á–∏—Ç–∞–µ–º –∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–Ω–æ–≤–∞ –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å
            oldest_request_time = requests_deque[0] if requests_deque else current_time
            retry_after = max(0, int(oldest_request_time + window_seconds - current_time))
            
            logger.warning(f"üîí RATE_LIMIT exceeded: user_id={user_id}, action={action_type}, "
                         f"requests={current_requests}/{max_requests}, retry_after={retry_after}s")
            
            return False, {
                'allowed': False,
                'requests_left': 0,
                'retry_after_seconds': retry_after,
                'warning': False,
                'current_requests': current_requests,
                'max_requests': max_requests,
                'window_seconds': window_seconds
            }
        
        # –õ–∏–º–∏—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω - –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
        requests_deque.append(current_time)
        
        if warning:
            logger.info(f"üîí RATE_LIMIT warning: user_id={user_id}, action={action_type}, "
                       f"requests={current_requests + 1}/{max_requests} (80% threshold)")
        
        return True, {
            'allowed': True,
            'requests_left': requests_left - 1,  # -1 –ø–æ—Ç–æ–º—É —á—Ç–æ –º—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å
            'retry_after_seconds': 0,
            'warning': warning,
            'current_requests': current_requests + 1,
            'max_requests': max_requests,
            'window_seconds': window_seconds
        }
    
    def check_text_size(self, text: str) -> Tuple[bool, Dict]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
        
        Returns:
            (allowed: bool, info: dict)
        """
        if not text:
            return True, {'allowed': True, 'size_kb': 0}
        
        text_size = len(text.encode('utf-8'))
        max_size = self.limits['text_size']['max_size']
        size_kb = round(text_size / 1024, 1)
        max_size_kb = round(max_size / 1024, 1)
        
        if text_size > max_size:
            logger.warning(f"üîí TEXT_SIZE exceeded: size={size_kb}KB, max={max_size_kb}KB")
            return False, {
                'allowed': False,
                'size_kb': size_kb,
                'max_size_kb': max_size_kb,
                'size_bytes': text_size,
                'max_size_bytes': max_size
            }
        
        return True, {
            'allowed': True,
            'size_kb': size_kb,
            'max_size_kb': max_size_kb,
            'size_bytes': text_size,
            'max_size_bytes': max_size
        }
    
    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É rate limiter"""
        total_users = len(set(key.split(':')[0] for key in self.user_requests.keys()))
        total_tracked_actions = len(self.user_requests)
        
        return {
            'total_users_tracked': total_users,
            'total_action_types_tracked': total_tracked_actions,
            'admin_ids': self.admin_ids,
            'limits': self.limits
        }
    
    def cleanup_old_data(self, max_age_hours: int = 24):
        """
        –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–≤—ã–∑—ã–≤–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
        """
        current_time = time.time()
        cutoff_time = current_time - (max_age_hours * 3600)
        
        keys_to_remove = []
        for key, requests_deque in self.user_requests.items():
            # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            while requests_deque and requests_deque[0] <= cutoff_time:
                requests_deque.popleft()
            
            # –ï—Å–ª–∏ deque –ø—É—Å—Ç–æ–π, —É–¥–∞–ª—è–µ–º –∫–ª—é—á
            if not requests_deque:
                keys_to_remove.append(key)
        
        for key in keys_to_remove:
            del self.user_requests[key]
        
        logger.info(f"üîí Cleanup completed: removed {len(keys_to_remove)} empty entries")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä rate limiter
rate_limiter = InMemoryRateLimiter()


def rate_limit(action_type: str, check_text_size: bool = False):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è rate limiting
    
    Args:
        action_type: —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è ('commands', 'ai_requests')
        check_text_size: –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ª–∏ —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
    """
    def decorator(func):
        @wraps(func)
        async def wrapper(update, context, *args, **kwargs):
            # –ü–æ–ª—É—á–∞–µ–º user_id
            user_id = None
            if update.effective_user:
                user_id = update.effective_user.id
            elif update.callback_query and update.callback_query.from_user:
                user_id = update.callback_query.from_user.id
            
            if not user_id:
                logger.warning("üîí Rate limiter: no user_id found")
                return await func(update, context, *args, **kwargs)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
            allowed, info = rate_limiter.check_rate_limit(user_id, action_type)
            
            if not allowed:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                retry_minutes = max(1, int(info['retry_after_seconds'] / 60))
                
                if action_type == 'commands':
                    error_msg = (
                        f"‚è±Ô∏è <b>–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–æ–º–∞–Ω–¥!</b>\n\n"
                        f"üìä –õ–∏–º–∏—Ç: {info['max_requests']} –∫–æ–º–∞–Ω–¥ –≤ {info['window_seconds']}—Å\n"
                        f"‚è∞ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {retry_minutes} –º–∏–Ω\n\n"
                        f"üí° –≠—Ç–æ –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞"
                    )
                elif action_type == 'ai_requests':
                    error_msg = (
                        f"ü§ñ <b>–õ–∏–º–∏—Ç AI –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω!</b>\n\n"
                        f"üìä –õ–∏–º–∏—Ç: {info['max_requests']} –ø–∏—Å–µ–º –≤ {info['window_seconds']}—Å\n"
                        f"‚è∞ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {retry_minutes} –º–∏–Ω\n\n"
                        f"üíé –î–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤: /support"
                    )
                else:
                    error_msg = f"‚è±Ô∏è –õ–∏–º–∏—Ç –¥–µ–π—Å—Ç–≤–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {retry_minutes} –º–∏–Ω"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if update.message:
                    await update.message.reply_text(error_msg, parse_mode='HTML')
                elif update.callback_query:
                    await update.callback_query.answer(f"–õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {retry_minutes} –º–∏–Ω", show_alert=True)
                
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if check_text_size:
                text_to_check = ""
                if update.message and update.message.text:
                    text_to_check = update.message.text
                
                if text_to_check:
                    text_allowed, text_info = rate_limiter.check_text_size(text_to_check)
                    
                    if not text_allowed:
                        error_msg = (
                            f"üìÑ <b>–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π!</b>\n\n"
                            f"üìä –†–∞–∑–º–µ—Ä: {text_info['size_kb']} –ö–ë\n"
                            f"üìã –ú–∞–∫—Å–∏–º—É–º: {text_info['max_size_kb']} –ö–ë\n\n"
                            f"üí° –°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
                        )
                        
                        if update.message:
                            await update.message.reply_text(error_msg, parse_mode='HTML')
                        return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ 80% –ª–∏–º–∏—Ç–∞
            if info.get('warning') and not info.get('admin_bypass'):
                warning_msg = f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –æ—Å—Ç–∞–ª–æ—Å—å {info['requests_left']} –∏–∑ {info['max_requests']} –∑–∞–ø—Ä–æ—Å–æ–≤"
                if update.message:
                    await update.message.reply_text(warning_msg, parse_mode='HTML')
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            return await func(update, context, *args, **kwargs)
        
        return wrapper
    return decorator 