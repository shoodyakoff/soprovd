"""
–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–æ—Ç–∞ –°–æ–ø—Ä–æ–≤–æ–¥ v7.0
–û–±—Ä–∞–±–æ—Ç–∫–∞ corner-–∫–µ–π—Å–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
"""
import re
from typing import Tuple
from telegram import Update


class InputValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    MIN_VACANCY_LENGTH = 100
    MAX_VACANCY_LENGTH = 10000
    MIN_RESUME_LENGTH = 300
    MAX_RESUME_LENGTH = 15000
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫ (–∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å)
    FILE_SHARING_PATTERNS = [
        r'docs\.google\.com',
        r'drive\.google\.com',
        r'dropbox\.com',
        r'yandex\.ru/disk',
        r'cloud\.mail\.ru',
        r'onedrive\.live\.com',
        r'sharepoint\.com'
    ]
    
    @staticmethod
    def validate_user_initialized(context) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"""
        if not context.user_data or not context.user_data.get('initialized'):
            return False, (
                "üëã –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start, —á—Ç–æ–±—ã –±–æ—Ç –∑–Ω–∞–ª, —á—Ç–æ –¥–µ–ª–∞—Ç—å."
            )
        return True, ""
    
    @staticmethod
    def validate_message_type(update: Update) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)"""
        if not update.message:
            return False, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"
            
        message = update.message
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ñ–∞–π–ª—ã
        if (message.document or message.photo or message.voice or 
            message.video or message.animation or message.sticker or
            message.audio or message.video_note):
            return False, (
                "‚ö†Ô∏è –°–µ–π—á–∞—Å –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é."
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞
        if not message.text:
            return False, (
                "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            )
            
        return True, ""
    
    @staticmethod
    def validate_vacancy_text(text: str) -> Tuple[bool, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–∏"""
        if not text or not text.strip():
            return False, "üìÑ –í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π"
        
        text_length = len(text.strip())
        
        if text_length < InputValidator.MIN_VACANCY_LENGTH:
            return False, (
                f"‚ùå <b>–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ</b>\n\n"
                f"üìä –ü–æ–ª—É—á–µ–Ω–æ: {text_length} —Å–∏–º–≤–æ–ª–æ–≤\n"
                f"üìã –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º: {InputValidator.MIN_VACANCY_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤\n\n"
                f"üí° <b>–ß—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å:</b>\n"
                f"‚Ä¢ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É\n"
                f"‚Ä¢ –û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏\n"
                f"‚Ä¢ –£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã\n"
                f"‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏"
            )
        
        if text_length > InputValidator.MAX_VACANCY_LENGTH:
            return False, (
                f"‚ùå <b>–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ</b>\n\n"
                f"üìä –ü–æ–ª—É—á–µ–Ω–æ: {text_length} —Å–∏–º–≤–æ–ª–æ–≤\n"
                f"üìã –ú–∞–∫—Å–∏–º—É–º: {InputValidator.MAX_VACANCY_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤\n\n"
                f"üí° –°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç, –æ—Å—Ç–∞–≤–∏–≤ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ñ–∞–π–ª–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ (Google Drive, Dropbox –∏ —Ç.–¥.)
        if InputValidator._has_file_sharing_links(text):
            return False, (
                "üîó <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª—ã</b>\n\n"
                "–ü–æ–∫–∞ —á—Ç–æ —Å—Å—ã–ª–∫–∏ –Ω–∞ Google Drive, Dropbox –∏ –¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è.\n\n"
                "üí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –∫–∞–∫ —Ç–µ–∫—Å—Ç"
            )
        
        return True, ""
    
    @staticmethod
    def validate_resume_text(text: str) -> Tuple[bool, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Ä–µ–∑—é–º–µ"""
        if not text or not text.strip():
            return False, "üìÑ –†–µ–∑—é–º–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        
        text_length = len(text.strip())
        
        if text_length < InputValidator.MIN_RESUME_LENGTH:
            return False, (
                f"‚ùå <b>–†–µ–∑—é–º–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ</b>\n\n"
                f"üìä –ü–æ–ª—É—á–µ–Ω–æ: {text_length} —Å–∏–º–≤–æ–ª–æ–≤\n"
                f"üìã –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º: {InputValidator.MIN_RESUME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤\n\n"
                f"üí° <b>–î–æ–±–∞–≤—å—Ç–µ –≤ —Ä–µ–∑—é–º–µ:</b>\n"
                f"‚Ä¢ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (–¥–æ–ª–∂–Ω–æ—Å—Ç–∏, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è)\n"
                f"‚Ä¢ –ù–∞–≤—ã–∫–∏ –∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏\n"
                f"‚Ä¢ –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ\n"
                f"‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
            )
        
        if text_length > InputValidator.MAX_RESUME_LENGTH:
            return False, (
                f"‚ùå <b>–†–µ–∑—é–º–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ</b>\n\n"
                f"üìä –ü–æ–ª—É—á–µ–Ω–æ: {text_length} —Å–∏–º–≤–æ–ª–æ–≤\n"
                f"üìã –ú–∞–∫—Å–∏–º—É–º: {InputValidator.MAX_RESUME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤\n\n"
                f"üí° –°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç, –æ—Å—Ç–∞–≤–∏–≤ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ"
            )
        
        # –î–ª—è —Ä–µ–∑—é–º–µ —Å—Å—ã–ª–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã (—Å–∞–π—Ç—ã –∫–æ–º–ø–∞–Ω–∏–π, –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∏ —Ç.–¥.)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫ —É–±—Ä–∞–Ω–∞
        
        return True, ""
    
    @staticmethod
    def _has_file_sharing_links(text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ"""
        text_lower = text.lower()
        return any(
            re.search(pattern, text_lower) 
            for pattern in InputValidator.FILE_SHARING_PATTERNS
        )
    
    @staticmethod
    def sanitize_for_logging(text: str) -> str:
        """–°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (—É–±–∏—Ä–∞–µ–º PII)"""
        # –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç
        text = re.sub(r'\b\d{4}[\s-]?\d{4}[\s-]?\d{4}[\s-]?\d{4}\b', '[CARD]', text)
        
        # –£–±–∏—Ä–∞–µ–º email –∞–¥—Ä–µ—Å–∞  
        text = re.sub(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b', '[EMAIL]', text)
        
        # –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
        text = re.sub(r'\b\+?[1-9]\d{1,14}\b', '[PHONE]', text)
        
        # –£–±–∏—Ä–∞–µ–º –ò–ù–ù
        text = re.sub(r'\b\d{10,12}\b', '[INN]', text)
        
        return text


class ValidationMiddleware:
    """Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    
    @staticmethod
    def require_initialization(func):
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async def wrapper(update, context):
            import logging
            logger = logging.getLogger(__name__)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
            if update.message and update.message.text == '/start':
                logger.info("üîç VALIDATOR: Skipping initialization check for /start command")
                return await func(update, context)
            
            logger.info(f"üîç VALIDATOR: Checking initialization for function {func.__name__}")
            logger.info(f"üîç VALIDATOR: context.user_data = {context.user_data}")
            
            is_valid, error_msg = InputValidator.validate_user_initialized(context)
            logger.info(f"üîç VALIDATOR: is_valid = {is_valid}, error_msg = '{error_msg}'")
            
            if not is_valid and update.message:
                logger.warning(f"üîç VALIDATOR: Blocking {func.__name__} due to initialization check")
                await update.message.reply_text(error_msg, parse_mode='HTML')
                return
            
            logger.info(f"üîç VALIDATOR: Initialization check passed, calling {func.__name__}")
            return await func(update, context)
        return wrapper
    
    @staticmethod  
    def require_text_message(func):
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        async def wrapper(update, context):
            is_valid, error_msg = InputValidator.validate_message_type(update)
            if not is_valid and update.message:
                await update.message.reply_text(error_msg, parse_mode='HTML')
                return
                
            return await func(update, context)
        return wrapper 